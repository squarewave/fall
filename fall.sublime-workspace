{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"main",
				"main_archive_async_handle\tvoid * main_archive_async_handle"
			],
			[
				"archive",
				"archive_mem_head\tchar * archive_mem_head"
			],
			[
				"Asse",
				"AssetType\tAssetType"
			],
			[
				"AssetMove",
				"AssetMoveState_standing"
			],
			[
				"AssetD",
				"AssetDirection_left"
			],
			[
				"pac",
				"packed_images\tPackedTexture [0] packed_images"
			],
			[
				"p",
				"packed_images\tPackedTexture [0] packed_images"
			],
			[
				"stbi_",
				"stbi_load_from_memory\tstbi_uc * stbi_load_from_memory(const stbi_uc *buffer, int len, int *x, int *y, int *channels_in_file, int desired_channels)"
			],
			[
				"con",
				"contents\tunsigned char * contents"
			],
			[
				"writearc",
				"write_archive_mem\tvoid write_archive_mem(char *filepath)"
			],
			[
				"file",
				"filepath"
			],
			[
				"archi",
				"archive_mem_head\tchar * archive_mem_head"
			],
			[
				"stbiwritepng",
				"stbi_write_png_to_func\tint stbi_write_png_to_func(stbi_write_func *func, void *context, int x, int y, int comp, const void *data, int stride_bytes)"
			],
			[
				"TEXTURE_A",
				"TEXTURE_CHANNELS\tconst int TEXTURE_CHANNELS"
			],
			[
				"stbi_write_png",
				"stbi_write_png_to_mem\tunsigned char * stbi_write_png_to_mem(unsigned char *pixels, int stride_bytes, int x, int y, int n, int *out_len)"
			],
			[
				"TEXTUREAT",
				"TEXTURE_ATLAS_SIZE_BYTES\tconst int TEXTURE_ATLAS_SIZE_BYTES"
			],
			[
				"TEXTURE_AT",
				"TEXTURE_ATLAS_SIZE_BYTES\tconst int TEXTURE_ATLAS_SIZE_BYTES"
			],
			[
				"working",
				"working_memory"
			],
			[
				"ArchiveEn",
				"ArchiveEntryHeader_texture_atlas\tArchiveEntryHeader_texture_atlas"
			],
			[
				"num",
				"num_rects"
			],
			[
				"bitm",
				"bitmap_count\tint bitmap_count"
			],
			[
				"stbrp_re",
				"stbrp_rect\tstbrp_rect"
			],
			[
				"rec",
				"rect_packer"
			],
			[
				"stbrp",
				"stbrp_node\tstbrp_node"
			],
			[
				"TEX",
				"TEXTURE_ATLAS_DIAMETER"
			],
			[
				"IMAGE_A",
				"IMAGE_ATLAS_MAP_SIZE"
			],
			[
				"IMA",
				"IMAGE_CHANNELS"
			],
			[
				"bi",
				"bitmaps\tBitmap [1024] bitmaps"
			],
			[
				"bit",
				"bitmap_count\tint bitmap_count"
			],
			[
				"fi",
				"filename"
			],
			[
				"stbi_load",
				"stbi_loadf_from_memory\tfloat * stbi_loadf_from_memory(const stbi_uc *buffer, int len, int *x, int *y, int *channels_in_file, int desired_channels)"
			],
			[
				"stbi_load_",
				"stbi_load_from_file\tstbi_uc * stbi_load_from_file(FILE *f, int *x, int *y, int *channels_in_file, int desired_channels)"
			],
			[
				"stbi_set",
				"stbi_set_flip_vertically_on_load\tvoid stbi_set_flip_vertically_on_load(int flag_true_if_should_flip)"
			],
			[
				"read",
				"read_entire_file\tEntireFile read_entire_file(char *filepath)"
			],
			[
				"conten",
				"content_size"
			],
			[
				"du",
				"dummy_texture_bitmap\tchar * dummy_texture_bitmap"
			],
			[
				"vie",
				"view_height\tf32 view_height"
			],
			[
				"v",
				"view_center_x\tf32 view_center_x"
			],
			[
				"GL_UNSIGNEDIN",
				"GL_UNSIGNED_INT\tGL_UNSIGNED_INT"
			],
			[
				"GL_DEPTH_BUF",
				"GL_DEPTH_BUFFER_BIT\tGL_DEPTH_BUFFER_BIT"
			],
			[
				"GL_DEPTH_B",
				"GL_DEPTH_BUFFER_BIT\tGL_DEPTH_BUFFER_BIT"
			],
			[
				"tex",
				"texture_handle"
			],
			[
				"vec",
				"vec4"
			],
			[
				"g_",
				"g_opengl_state"
			],
			[
				"set_camer",
				"set_camera_scale\tvoid set_camera_scale(RenderCommands *render_commands, f32 world_width, f32 world_height)"
			],
			[
				"check",
				"check_shader_status"
			],
			[
				"STAR",
				"START_HEIGHT"
			],
			[
				"START",
				"START_WIDTH"
			],
			[
				"OpenGlP",
				"OpenGLProgramBase\tOpenGLProgramBase"
			],
			[
				"ver",
				"vertex_count\ti32 vertex_count"
			],
			[
				"verte",
				"vertex_array\tTexturedQuadVertex * vertex_array"
			],
			[
				"world",
				"world_x\tf32 world_x"
			],
			[
				"OpenGLP",
				"OpenGLProgramBase"
			],
			[
				"wind",
				"window_height"
			],
			[
				"pr",
				"program_id"
			],
			[
				"free",
				"DEBUG_free_file_memory\tDEBUG_PlatformFreeFileMemory * DEBUG_free_file_memory"
			],
			[
				"program_",
				"program_id\tGLuint program_id"
			],
			[
				"vertr",
				"vertex_shader_id\tGLuint vertex_shader_id"
			],
			[
				"fragment",
				"fragment_shader_id\tGLuint fragment_shader_id"
			],
			[
				"frag",
				"fragment_shader_id"
			],
			[
				"vertex",
				"vertex_sources\tGLchar *[3] vertex_sources"
			],
			[
				"c",
				"contents\tunsigned char * contents"
			],
			[
				"common",
				"common_source"
			],
			[
				"cont",
				"content_size\ti32 content_size"
			],
			[
				"Opengl",
				"OpenGLProgramType\tOpenGLProgramType"
			],
			[
				"comp",
				"compile_program_"
			],
			[
				"progr",
				"program_memory_used\ti32 program_memory_used"
			],
			[
				"progra",
				"program_memory\tchar [1024] program_memory"
			],
			[
				"openglprogra",
				"OpenGLProgramBase\tOpenGLProgramBase"
			],
			[
				"OpenGl",
				"OpenGLProgramType"
			],
			[
				"OpenGL",
				"OpenGLProgramBase\tOpenGLProgramBase"
			],
			[
				"worl",
				"world_width"
			],
			[
				"view",
				"view_center_x\tf32 view_center_x"
			],
			[
				"world_",
				"world_y\tf32 world_y"
			],
			[
				"vert",
				"vertex_array\tTexturedQuadVertex * vertex_array"
			],
			[
				"SDL_",
				"SDL_Window\tSDL_Window"
			],
			[
				"tabPro",
				"tabProfileDict"
			],
			[
				"mod",
				"module"
			],
			[
				"dismi",
				"dismissed"
			],
			[
				"PanelUI",
				"PanelUINotifications"
			],
			[
				"showUp",
				"showManualUpdateNotification"
			],
			[
				"noti",
				"notificationId"
			],
			[
				"popu",
				"popupShownPromise"
			],
			[
				"most",
				"mostRecentUpdateEvent"
			],
			[
				"PREF_AP",
				"PREF_APP_UPDATE_DOORHANGER"
			],
			[
				"chrome",
				"chromeKey"
			],
			[
				"on",
				"oncommand"
			],
			[
				"shi",
				"shiftIndex"
			],
			[
				"chrom",
				"chromeKey"
			],
			[
				"popup",
				"popupshownPromise"
			],
			[
				"debu",
				"debugObserver"
			],
			[
				"for",
				"for\tfor (…) {…}"
			],
			[
				"prase",
				"parse1"
			],
			[
				"par",
				"parse1"
			],
			[
				"secon",
				"secondaryAction"
			],
			[
				"call",
				"callback"
			],
			[
				"mainAc",
				"mainActionCalled"
			],
			[
				"clo",
				"closeWindow"
			],
			[
				"open",
				"openNewBrowserWindow"
			],
			[
				"getSym",
				"getSymbolAtAddress"
			],
			[
				"ind",
				"index"
			],
			[
				"add",
				"address"
			],
			[
				"extr",
				"extraWindow"
			],
			[
				"ext",
				"extraWindow"
			],
			[
				"waitFo",
				"waitForFocus"
			],
			[
				"bre",
				"breakpadId"
			],
			[
				"extens",
				"extensionWhitelist"
			],
			[
				"sym",
				"symbol1"
			],
			[
				"symb",
				"symbol0"
			],
			[
				"getPro",
				"getProfilePromise"
			],
			[
				"setUpda",
				"setUpdateTimerPrefs"
			],
			[
				"aPro",
				"aPromise"
			],
			[
				"pop",
				"popupshownPromise"
			],
			[
				"getInt",
				"getIntPref"
			],
			[
				"_coll",
				"_isChromeCollapsed"
			],
			[
				"notifica",
				"notification"
			],
			[
				"REL_P",
				"REL_PATH_CHROME"
			],
			[
				"s",
				"signature"
			],
			[
				"br",
				"break-after"
			],
			[
				"getE",
				"getElementById"
			],
			[
				"wid",
				"width"
			],
			[
				"hangsere",
				"hangStatsTimeSeriesCanvas"
			],
			[
				"hang",
				"hangStatsCanvas"
			],
			[
				"han",
				"hangStatsTimeSeriesDictified"
			],
			[
				"hangstatti",
				"hangStatsTimeSeriesResponse"
			],
			[
				"run",
				"runnablestr"
			],
			[
				"chroe",
				"chromeGlobal"
			],
			[
				"RES_COLO",
				"RES_COLOR_PICKER_VERTEX_MODELSPACE"
			]
		]
	},
	"buffers":
	[
		{
			"file": "debug.h",
			"settings":
			{
				"buffer_size": 1089,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "sdl_platform.cpp",
			"settings":
			{
				"buffer_size": 12771,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "sdl_platform.h",
			"settings":
			{
				"buffer_size": 619,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "fall.sublime-project",
			"settings":
			{
				"buffer_size": 97,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": ".clang_complete",
			"settings":
			{
				"buffer_size": 52,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "game.cpp",
			"settings":
			{
				"buffer_size": 3606,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "asset_manager.h",
			"settings":
			{
				"buffer_size": 386,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "libs/include/Judy.h",
			"settings":
			{
				"buffer_size": 28031,
				"line_ending": "Unix"
			}
		},
		{
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		},
		{
			"file": "asset_manager.cpp",
			"settings":
			{
				"buffer_size": 1041,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "build_packager.bat",
			"settings":
			{
				"buffer_size": 555,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "asset_packager.cpp",
			"settings":
			{
				"buffer_size": 6587,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "assets.h",
			"settings":
			{
				"buffer_size": 1439,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "imgui.ini",
			"settings":
			{
				"buffer_size": 140,
				"line_ending": "Windows"
			}
		},
		{
			"file": "imgui_memory_editor.h",
			"settings":
			{
				"buffer_size": 10265,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "render_commands.h",
			"settings":
			{
				"buffer_size": 1297,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "renderer_opengl.h",
			"settings":
			{
				"buffer_size": 840,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "renderer_opengl.cpp",
			"settings":
			{
				"buffer_size": 6933,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "shaders/common.glsl",
			"settings":
			{
				"buffer_size": 235,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "shaders/textured_quads.glsl",
			"settings":
			{
				"buffer_size": 471,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "render_commands.cpp",
			"settings":
			{
				"buffer_size": 2174,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 139 files for \"g_render_commands\" (regex)\n\nC:\\Users\\doug\\Documents\\github\\fall\\platform.h:\n  179  extern PlatformInput* g_input;\n  180  extern PlatformServices g_platform;\n  181: extern RenderCommands* g_render_commands;\n  182  \n  183  void game_update_and_render();\n\nC:\\Users\\doug\\Documents\\github\\fall\\sdl_platform.cpp:\n  310      void** texture_handles = (void**)calloc(megabytes * 8, sizeof(u8));\n  311      TexturedQuadVertex* vertices = (TexturedQuadVertex*)calloc(megabytes * 16, sizeof(u8));\n  312:     *g_render_commands = init_render_commands(megabytes * 16 / sizeof(TexturedQuadVertex), vertices, texture_handles);\n  313  \n  314      context.controller_handle = find_controller_handle();\n\nC:\\Users\\doug\\Documents\\github\\fall\\build\\fall.obj:\n    <binary>\n\n4 matches across 3 files\n\n\nSearching 142 files for \"imgui\" (regex)\n\nC:\\Users\\doug\\Documents\\github\\fall\\.gitignore:\n    1  build/*\n    2: imgui.ini\n    3  \n\nC:\\Users\\doug\\Documents\\github\\fall\\debug.h:\n    3  \n    4  #include \"platform.h\"\n    5: #include \"imgui/imgui.h\"\n    6  \n    7  char debug_print_copy_buffer[DEBUG_PRINT_RING_BUFFER_SIZE + 1] = {0};\n    8  \n    9  void show_debug_log() {\n   10:   ImGui::SetNextWindowSize(ImVec2(200,100), ImGuiSetCond_FirstUseEver);\n   11:   if (ImGui::Begin(\"Output\")) {\n   12        if (g_debug_print_ring_buffer_write_head < DEBUG_PRINT_RING_BUFFER_SIZE) {\n   13:           ImGui::Text((const char*)g_debug_print_ring_buffer);\n   14        } else {\n   15            i32 write_head = g_debug_print_ring_buffer_write_head & DEBUG_PRINT_RING_BUFFER_MASK;\n   ..\n   18            char* end_of_first_line = strchr(debug_print_copy_buffer, '\\n');\n   19            if (end_of_first_line) {\n   20:               ImGui::Text((const char*)end_of_first_line + 1);\n   21            } else {\n   22:               ImGui::Text((const char*)debug_print_copy_buffer);\n   23            }\n   24        }\n   25    }\n   26:   ImGui::End();\n   27  }\n   28  \n\nC:\\Users\\doug\\Documents\\github\\fall\\fall.cpp:\n    2  \n    3  #include \"game.cpp\"\n    4: #include \"imgui_extensions.cpp\"\n    5  #include \"render_commands.cpp\"\n    6  \n    7: #include \"imgui/imgui.cpp\"\n    8: #include \"imgui/imgui_draw.cpp\"\n    9: #include \"imgui/imgui_impl_sdl_gl3.cpp\"\n   10  \n   11  #define STB_IMAGE_IMPLEMENTATION\n\nC:\\Users\\doug\\Documents\\github\\fall\\fall.sublime-workspace:\n  589  \t\t},\n  590  \t\t{\n  591: \t\t\t\"file\": \"imgui/imgui_impl_sdl_gl3.cpp\",\n  592  \t\t\t\"settings\":\n  593  \t\t\t{\n  ...\n  615  \t\t},\n  616  \t\t{\n  617: \t\t\t\"file\": \"imgui/imgui.cpp\",\n  618  \t\t\t\"settings\":\n  619  \t\t\t{\n  ...\n  623  \t\t},\n  624  \t\t{\n  625: \t\t\t\"file\": \"imgui/imgui.h\",\n  626  \t\t\t\"settings\":\n  627  \t\t\t{\n  ...\n  649  \t\t},\n  650  \t\t{\n  651: \t\t\t\"file\": \"imgui_extensions.h\",\n  652  \t\t\t\"settings\":\n  653  \t\t\t{\n  ...\n  658  \t\t},\n  659  \t\t{\n  660: \t\t\t\"file\": \"imgui_extensions.cpp\",\n  661  \t\t\t\"settings\":\n  662  \t\t\t{\n  ...\n 1557  \t\t\t\t{\n 1558  \t\t\t\t\t\"buffer\": 12,\n 1559: \t\t\t\t\t\"file\": \"imgui/imgui_impl_sdl_gl3.cpp\",\n 1560  \t\t\t\t\t\"semi_transient\": false,\n 1561  \t\t\t\t\t\"settings\":\n ....\n 1650  \t\t\t\t{\n 1651  \t\t\t\t\t\"buffer\": 15,\n 1652: \t\t\t\t\t\"file\": \"imgui/imgui.cpp\",\n 1653  \t\t\t\t\t\"semi_transient\": false,\n 1654  \t\t\t\t\t\"settings\":\n ....\n 1682  \t\t\t\t{\n 1683  \t\t\t\t\t\"buffer\": 16,\n 1684: \t\t\t\t\t\"file\": \"imgui/imgui.h\",\n 1685  \t\t\t\t\t\"semi_transient\": false,\n 1686  \t\t\t\t\t\"settings\":\n ....\n 1774  \t\t\t\t{\n 1775  \t\t\t\t\t\"buffer\": 19,\n 1776: \t\t\t\t\t\"file\": \"imgui_extensions.h\",\n 1777  \t\t\t\t\t\"semi_transient\": false,\n 1778  \t\t\t\t\t\"settings\":\n ....\n 1804  \t\t\t\t{\n 1805  \t\t\t\t\t\"buffer\": 20,\n 1806: \t\t\t\t\t\"file\": \"imgui_extensions.cpp\",\n 1807  \t\t\t\t\t\"semi_transient\": false,\n 1808  \t\t\t\t\t\"settings\":\n ....\n 1960  \t\t\t],\n 1961  \t\t\t[\n 1962: \t\t\t\t\"imguiim\",\n 1963: \t\t\t\t\"imgui\\\\imgui_impl_sdl_gl3.cpp\"\n 1964  \t\t\t],\n 1965  \t\t\t[\n ....\n 1976  \t\t\t],\n 1977  \t\t\t[\n 1978: \t\t\t\t\"imguiex\",\n 1979: \t\t\t\t\"imgui_extensions.h\"\n 1980  \t\t\t],\n 1981  \t\t\t[\n\nC:\\Users\\doug\\Documents\\github\\fall\\game.cpp:\n    1: #include \"imgui/imgui.h\"\n    2  #include \"stb/stb_image.h\"\n    3  \n    4  #include \"platform.h\"\n    5  #include \"game.h\"\n    6: #include \"imgui_extensions.h\"\n    7  #include \"render_commands.h\"\n    8  \n    .\n   18    }\n   19  \n   20:   // if (ImGui::InputText(\"\", g_game_state->file_name_input, 64)) {\n   21:   //   ImGui::Text(\"Hello, world!\");\n   22    // }\n   23  \n   ..\n   36  \n   37    if (g_game_state->dummy_image_loaded) {\n   38:     // ImGui::Image(g_game_state->dummy_texture);\n   39      push_textured_quad(&g_render_commands,\n   40                         g_game_state->dummy_texture.handle,\n   ..\n   46  \n   47    // if (g_game_state->dummy_file_result.contents) {\n   48:   //   ImGui::Text(\"%s\\n\", (const char *)g_game_state->dummy_file_result.contents);\n   49    // }\n   50:   // ImGui::Text(\"Application average %.3f ms/frame (%.1f FPS)\", 1000.0f / ImGui::GetIO().Framerate, ImGui::GetIO().Framerate);\n   51  \n   52  }\n\nC:\\Users\\doug\\Documents\\github\\fall\\imgui_extensions.cpp:\n    1  #include \"platform.h\"\n    2: #include \"imgui_extensions.h\"\n    3  \n    4: IMGUI_API void ImGui::Image(PlatformTexture texture) {\n    5:   ImGui::Image(texture.handle, ImVec2(texture.width, texture.height));\n    6  }\n    7  \n\nC:\\Users\\doug\\Documents\\github\\fall\\imgui_extensions.h:\n    1: #include \"imgui/imgui.h\"\n    2  \n    3  #include \"platform.h\"\n    4  \n    5: namespace ImGui {\n    6:   IMGUI_API void Image(PlatformTexture texture);\n    7  }\n    8  \n\nC:\\Users\\doug\\Documents\\github\\fall\\sdl_platform.cpp:\n   21  \n   22  #include \"SDL2/SDL.h\"\n   23: #include \"imgui/imgui.h\"\n   24: #include \"imgui/imgui_impl_sdl_gl3.h\"\n   25  \n   26  #include \"platform.h\"\n   ..\n   45  \n   46  void exit_gracefully(int error_code) {\n   47:     // ImGui_ImplSdlGL3_Shutdown();\n   48      exit(error_code);\n   49  }\n   ..\n  294      }\n  295  \n  296:     // ImGui_ImplSdlGL3_Init(context.window);\n  297  \n  298      if(SDL_GL_SetSwapInterval(1) < 0){\n  ...\n  378          SDL_Event event;\n  379          while (SDL_PollEvent(&event)) {\n  380:             // ImGui_ImplSdlGL3_ProcessEvent(&event);\n  381              if (handle_sdl_event(&event, &context)) {\n  382                  running = false;\n  ...\n  409          g_input = &next_input;\n  410  \n  411:         // ImGui_ImplSdlGL3_NewFrame(context.window);\n  412          game_update_and_render();\n  413          show_debug_log();\n  ...\n  420          reset_render_commands(&g_render_commands);\n  421  \n  422:         // ImGui::Render();\n  423          SDL_GL_SwapWindow(context.window);\n  424      }\n\nC:\\Users\\doug\\Documents\\github\\fall\\build\\fall.exe:\n    <binary>\n\nC:\\Users\\doug\\Documents\\github\\fall\\build\\fall.obj:\n    <binary>\n\nC:\\Users\\doug\\Documents\\github\\fall\\build\\fall.pdb:\n    <binary>\n\nC:\\Users\\doug\\Documents\\github\\fall\\build\\vc140.pdb:\n    <binary>\n\nC:\\Users\\doug\\Documents\\github\\fall\\build\\win32_fall.map:\n   67   0000:00000000       __ImageBase                0000000140000000     <linker-defined>\n   68   0001:000000a0       WinMain                    00000001400010a0 f   fall.obj\n   69:  0001:000007a0       ?GetIO@ImGui@@YAAEAUImGuiIO@@XZ 00000001400017a0 f   fall.obj\n   70:  0001:000007c0       ?GetStyle@ImGui@@YAAEAUImGuiStyle@@XZ 00000001400017c0 f   fall.obj\n   71:  0001:000007e0       ?GetDrawData@ImGui@@YAPEAUImDrawData@@XZ 00000001400017e0 f   fall.obj\n   72:  0001:00000820       ?NewFrame@ImGui@@YAXXZ     0000000140001820 f   fall.obj\n   73:  0001:00001d70       ?Render@ImGui@@YAXXZ       0000000140002d70 f   fall.obj\n   74:  0001:00002600       ?Shutdown@ImGui@@YAXXZ     0000000140003600 f   fall.obj\n   75:  0001:00002980       ?ShowMetricsWindow@ImGui@@YAXPEA_N@Z 0000000140003980 f   fall.obj\n   76:  0001:00002dd0       ?Begin@ImGui@@YA_NPEBDPEA_NH@Z 0000000140003dd0 f   fall.obj\n   77:  0001:00002e20       ?Begin@ImGui@@YA_NPEBDPEA_NAEBUImVec2@@MH@Z 0000000140003e20 f   fall.obj\n   78:  0001:00006740       ?End@ImGui@@YAXXZ          0000000140007740 f   fall.obj\n   79:  0001:00006840       ?BeginChild@ImGui@@YA_NPEBDAEBUImVec2@@_NH@Z 0000000140007840 f   fall.obj\n   80:  0001:000068a0       ?BeginChild@ImGui@@YA_NIAEBUImVec2@@_NH@Z 00000001400078a0 f   fall.obj\n   81:  0001:000068e0       ?EndChild@ImGui@@YAXXZ     00000001400078e0 f   fall.obj\n   82:  0001:00006a10       ?GetContentRegionMax@ImGui@@YA?AUImVec2@@XZ 0000000140007a10 f   fall.obj\n   83:  0001:00006a80       ?GetContentRegionAvail@ImGui@@YA?AUImVec2@@XZ 0000000140007a80 f   fall.obj\n   84:  0001:00006af0       ?GetContentRegionAvailWidth@ImGui@@YAMXZ 0000000140007af0 f   fall.obj\n   85:  0001:00006b10       ?GetWindowContentRegionMin@ImGui@@YA?AUImVec2@@XZ 0000000140007b10 f   fall.obj\n   86:  0001:00006b50       ?GetWindowContentRegionMax@ImGui@@YA?AUImVec2@@XZ 0000000140007b50 f   fall.obj\n   87:  0001:00006b90       ?GetWindowContentRegionWidth@ImGui@@YAMXZ 0000000140007b90 f   fall.obj\n   88:  0001:00006bc0       ?GetWindowDrawList@ImGui@@YAPEAUImDrawList@@XZ 0000000140007bc0 f   fall.obj\n   89:  0001:00006bf0       ?GetWindowPos@ImGui@@YA?AUImVec2@@XZ 0000000140007bf0 f   fall.obj\n   90:  0001:00006c40       ?GetWindowSize@ImGui@@YA?AUImVec2@@XZ 0000000140007c40 f   fall.obj\n   91:  0001:00006c80       ?GetWindowWidth@ImGui@@YAMXZ 0000000140007c80 f   fall.obj\n   92:  0001:00006cb0       ?GetWindowHeight@ImGui@@YAMXZ 0000000140007cb0 f   fall.obj\n   93:  0001:00006ce0       ?IsWindowCollapsed@ImGui@@YA_NXZ 0000000140007ce0 f   fall.obj\n   94:  0001:00006d00       ?SetWindowFontScale@ImGui@@YAXM@Z 0000000140007d00 f   fall.obj\n   95:  0001:00006d60       ?SetNextWindowPos@ImGui@@YAXAEBUImVec2@@H@Z 0000000140007d60 f   fall.obj\n   96:  0001:00006dc0       ?SetNextWindowPosCenter@ImGui@@YAXH@Z 0000000140007dc0 f   fall.obj\n   97:  0001:00006e30       ?SetNextWindowSize@ImGui@@YAXAEBUImVec2@@H@Z 0000000140007e30 f   fall.obj\n   98:  0001:00006e90       ?SetNextWindowSizeConstraints@ImGui@@YAXAEBUImVec2@@0P6AXPEAUImGuiSizeConstraintCallbackData@@@ZPEAX@Z 0000000140007e90 f   fall.obj\n   99:  0001:00006f20       ?SetNextWindowContentSize@ImGui@@YAXAEBUImVec2@@@Z 0000000140007f20 f   fall.obj\n  100:  0001:00006f60       ?SetNextWindowContentWidth@ImGui@@YAXM@Z 0000000140007f60 f   fall.obj\n  101:  0001:00006ff0       ?SetNextWindowCollapsed@ImGui@@YAX_NH@Z 0000000140007ff0 f   fall.obj\n  102:  0001:00007050       ?SetNextWindowFocus@ImGui@@YAXXZ 0000000140008050 f   fall.obj\n  103:  0001:00007080       ?SetWindowPos@ImGui@@YAXAEBUImVec2@@H@Z 0000000140008080 f   fall.obj\n  104:  0001:000070c0       ?SetWindowSize@ImGui@@YAXAEBUImVec2@@H@Z 00000001400080c0 f   fall.obj\n  105:  0001:00007100       ?SetWindowCollapsed@ImGui@@YAX_NH@Z 0000000140008100 f   fall.obj\n  106:  0001:00007140       ?SetWindowFocus@ImGui@@YAXXZ 0000000140008140 f   fall.obj\n  107:  0001:00007170       ?SetWindowPos@ImGui@@YAXPEBDAEBUImVec2@@H@Z 0000000140008170 f   fall.obj\n  108:  0001:000071c0       ?SetWindowSize@ImGui@@YAXPEBDAEBUImVec2@@H@Z 00000001400081c0 f   fall.obj\n  109:  0001:00007210       ?SetWindowCollapsed@ImGui@@YAXPEBD_NH@Z 0000000140008210 f   fall.obj\n  110:  0001:00007260       ?SetWindowFocus@ImGui@@YAXPEBD@Z 0000000140008260 f   fall.obj\n  111:  0001:000072b0       ?GetScrollX@ImGui@@YAMXZ   00000001400082b0 f   fall.obj\n  112:  0001:000072d0       ?GetScrollY@ImGui@@YAMXZ   00000001400082d0 f   fall.obj\n  113:  0001:000072f0       ?GetScrollMaxX@ImGui@@YAMXZ 00000001400082f0 f   fall.obj\n  114:  0001:00007330       ?GetScrollMaxY@ImGui@@YAMXZ 0000000140008330 f   fall.obj\n  115:  0001:00007370       ?SetScrollX@ImGui@@YAXM@Z  0000000140008370 f   fall.obj\n  116:  0001:000073b0       ?SetScrollY@ImGui@@YAXM@Z  00000001400083b0 f   fall.obj\n  117:  0001:00007420       ?SetScrollHere@ImGui@@YAXM@Z 0000000140008420 f   fall.obj\n  118:  0001:000074c0       ?SetScrollFromPosY@ImGui@@YAXMM@Z 00000001400084c0 f   fall.obj\n  119:  0001:00007580       ?SetKeyboardFocusHere@ImGui@@YAXH@Z 0000000140008580 f   fall.obj\n  120:  0001:000075d0       ?SetStateStorage@ImGui@@YAXPEAUImGuiStorage@@@Z 00000001400085d0 f   fall.obj\n  121:  0001:00007630       ?GetStateStorage@ImGui@@YAPEAUImGuiStorage@@XZ 0000000140008630 f   fall.obj\n  122:  0001:00007660       ?PushFont@ImGui@@YAXPEAUImFont@@@Z 0000000140008660 f   fall.obj\n  123:  0001:000076e0       ?PopFont@ImGui@@YAXXZ      00000001400086e0 f   fall.obj\n  124:  0001:00007780       ?PushStyleColor@ImGui@@YAXHAEBUImVec4@@@Z 0000000140008780 f   fall.obj\n  125:  0001:00007820       ?PopStyleColor@ImGui@@YAXH@Z 0000000140008820 f   fall.obj\n  126:  0001:000078b0       ?PushStyleVar@ImGui@@YAXHM@Z 00000001400088b0 f   fall.obj\n  127:  0001:00007950       ?PushStyleVar@ImGui@@YAXHAEBUImVec2@@@Z 0000000140008950 f   fall.obj\n  128:  0001:000079f0       ?PopStyleVar@ImGui@@YAXH@Z 00000001400089f0 f   fall.obj\n  129:  0001:00007b30       ?GetFont@ImGui@@YAPEAUImFont@@XZ 0000000140008b30 f   fall.obj\n  130:  0001:00007b50       ?GetFontSize@ImGui@@YAMXZ  0000000140008b50 f   fall.obj\n  131:  0001:00007b70       ?GetFontTexUvWhitePixel@ImGui@@YA?AUImVec2@@XZ 0000000140008b70 f   fall.obj\n  132:  0001:00007ba0       ?GetColorU32@ImGui@@YAIHM@Z 0000000140008ba0 f   fall.obj\n  133:  0001:00007c20       ?GetColorU32@ImGui@@YAIAEBUImVec4@@@Z 0000000140008c20 f   fall.obj\n  134:  0001:00007c80       ?PushItemWidth@ImGui@@YAXM@Z 0000000140008c80 f   fall.obj\n  135:  0001:00007d10       ?PopItemWidth@ImGui@@YAXXZ 0000000140008d10 f   fall.obj\n  136:  0001:00007da0       ?CalcItemWidth@ImGui@@YAMXZ 0000000140008da0 f   fall.obj\n  137:  0001:00007e30       ?PushTextWrapPos@ImGui@@YAXM@Z 0000000140008e30 f   fall.obj\n  138:  0001:00007e80       ?PopTextWrapPos@ImGui@@YAXXZ 0000000140008e80 f   fall.obj\n  139:  0001:00007f10       ?PushAllowKeyboardFocus@ImGui@@YAX_N@Z 0000000140008f10 f   fall.obj\n  140:  0001:00007f60       ?PopAllowKeyboardFocus@ImGui@@YAXXZ 0000000140008f60 f   fall.obj\n  141:  0001:00007fe0       ?PushButtonRepeat@ImGui@@YAX_N@Z 0000000140008fe0 f   fall.obj\n  142:  0001:00008030       ?PopButtonRepeat@ImGui@@YAXXZ 0000000140009030 f   fall.obj\n  143:  0001:000080b0       ?Separator@ImGui@@YAXXZ    00000001400090b0 f   fall.obj\n  144:  0001:000082c0       ?SameLine@ImGui@@YAXMM@Z   00000001400092c0 f   fall.obj\n  145:  0001:00008420       ?NewLine@ImGui@@YAXXZ      0000000140009420 f   fall.obj\n  146:  0001:000084b0       ?Spacing@ImGui@@YAXXZ      00000001400094b0 f   fall.obj\n  147:  0001:00008500       ?Dummy@ImGui@@YAXAEBUImVec2@@@Z 0000000140009500 f   fall.obj\n  148:  0001:00008590       ?Indent@ImGui@@YAXM@Z      0000000140009590 f   fall.obj\n  149:  0001:00008640       ?Unindent@ImGui@@YAXM@Z    0000000140009640 f   fall.obj\n  150:  0001:000086f0       ?BeginGroup@ImGui@@YAXXZ   00000001400096f0 f   fall.obj\n  151:  0001:000088a0       ?EndGroup@ImGui@@YAXXZ     00000001400098a0 f   fall.obj\n  152:  0001:00008b60       ?GetCursorPos@ImGui@@YA?AUImVec2@@XZ 0000000140009b60 f   fall.obj\n  153:  0001:00008bd0       ?GetCursorPosX@ImGui@@YAMXZ 0000000140009bd0 f   fall.obj\n  154:  0001:00008c10       ?GetCursorPosY@ImGui@@YAMXZ 0000000140009c10 f   fall.obj\n  155:  0001:00008c50       ?SetCursorPos@ImGui@@YAXAEBUImVec2@@@Z 0000000140009c50 f   fall.obj\n  156:  0001:00008cf0       ?SetCursorPosX@ImGui@@YAXM@Z 0000000140009cf0 f   fall.obj\n  157:  0001:00008d70       ?SetCursorPosY@ImGui@@YAXM@Z 0000000140009d70 f   fall.obj\n  158:  0001:00008df0       ?GetCursorStartPos@ImGui@@YA?AUImVec2@@XZ 0000000140009df0 f   fall.obj\n  159:  0001:00008e40       ?GetCursorScreenPos@ImGui@@YA?AUImVec2@@XZ 0000000140009e40 f   fall.obj\n  160:  0001:00008e80       ?SetCursorScreenPos@ImGui@@YAXAEBUImVec2@@@Z 0000000140009e80 f   fall.obj\n  161:  0001:00008ef0       ?AlignFirstTextHeightToWidgets@ImGui@@YAXXZ 0000000140009ef0 f   fall.obj\n  162:  0001:00008f80       ?GetTextLineHeight@ImGui@@YAMXZ 0000000140009f80 f   fall.obj\n  163:  0001:00008fb0       ?GetTextLineHeightWithSpacing@ImGui@@YAMXZ 0000000140009fb0 f   fall.obj\n  164:  0001:00008ff0       ?GetItemsLineHeightWithSpacing@ImGui@@YAMXZ 0000000140009ff0 f   fall.obj\n  165:  0001:00009040       ?Columns@ImGui@@YAXHPEBD_N@Z 000000014000a040 f   fall.obj\n  166:  0001:00009740       ?NextColumn@ImGui@@YAXXZ   000000014000a740 f   fall.obj\n  167:  0001:00009930       ?GetColumnIndex@ImGui@@YAHXZ 000000014000a930 f   fall.obj\n  168:  0001:00009960       ?GetColumnOffset@ImGui@@YAMH@Z 000000014000a960 f   fall.obj\n  169:  0001:00009a80       ?SetColumnOffset@ImGui@@YAXHM@Z 000000014000aa80 f   fall.obj\n  170:  0001:00009b70       ?GetColumnWidth@ImGui@@YAMH@Z 000000014000ab70 f   fall.obj\n  171:  0001:00009be0       ?GetColumnsCount@ImGui@@YAHXZ 000000014000abe0 f   fall.obj\n  172:  0001:00009c10       ?PushID@ImGui@@YAXPEBD@Z   000000014000ac10 f   fall.obj\n  173:  0001:00009c60       ?PushID@ImGui@@YAXPEBD0@Z  000000014000ac60 f   fall.obj\n  174:  0001:00009cc0       ?PushID@ImGui@@YAXPEBX@Z   000000014000acc0 f   fall.obj\n  175:  0001:00009d10       ?PushID@ImGui@@YAXH@Z      000000014000ad10 f   fall.obj\n  176:  0001:00009d70       ?PopID@ImGui@@YAXXZ        000000014000ad70 f   fall.obj\n  177:  0001:00009da0       ?GetID@ImGui@@YAIPEBD@Z    000000014000ada0 f   fall.obj\n  178:  0001:00009dd0       ?GetID@ImGui@@YAIPEBD0@Z   000000014000add0 f   fall.obj\n  179:  0001:00009e10       ?GetID@ImGui@@YAIPEBX@Z    000000014000ae10 f   fall.obj\n  180:  0001:00009e40       ?Text@ImGui@@YAXPEBDZZ     000000014000ae40 f   fall.obj\n  181:  0001:00009e90       ?TextV@ImGui@@YAXPEBDPEAD@Z 000000014000ae90 f   fall.obj\n  182:  0001:00009f20       ?TextColored@ImGui@@YAXAEBUImVec4@@PEBDZZ 000000014000af20 f   fall.obj\n  183:  0001:00009f70       ?TextColoredV@ImGui@@YAXAEBUImVec4@@PEBDPEAD@Z 000000014000af70 f   fall.obj\n  184:  0001:00009fc0       ?TextDisabled@ImGui@@YAXPEBDZZ 000000014000afc0 f   fall.obj\n  185:  0001:0000a010       ?TextDisabledV@ImGui@@YAXPEBDPEAD@Z 000000014000b010 f   fall.obj\n  186:  0001:0000a070       ?TextWrapped@ImGui@@YAXPEBDZZ 000000014000b070 f   fall.obj\n  187:  0001:0000a0c0       ?TextWrappedV@ImGui@@YAXPEBDPEAD@Z 000000014000b0c0 f   fall.obj\n  188:  0001:0000a140       ?TextUnformatted@ImGui@@YAXPEBD0@Z 000000014000b140 f   fall.obj\n  189:  0001:0000a760       ?LabelText@ImGui@@YAXPEBD0ZZ 000000014000b760 f   fall.obj\n  190:  0001:0000a7b0       ?LabelTextV@ImGui@@YAXPEBD0PEAD@Z 000000014000b7b0 f   fall.obj\n  191:  0001:0000aa90       ?Bullet@ImGui@@YAXXZ       000000014000ba90 f   fall.obj\n  192:  0001:0000ac40       ?BulletText@ImGui@@YAXPEBDZZ 000000014000bc40 f   fall.obj\n  193:  0001:0000ac90       ?BulletTextV@ImGui@@YAXPEBDPEAD@Z 000000014000bc90 f   fall.obj\n  194:  0001:0000af70       ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z 000000014000bf70 f   fall.obj\n  195:  0001:0000afa0       ?SmallButton@ImGui@@YA_NPEBD@Z 000000014000bfa0 f   fall.obj\n  196:  0001:0000b030       ?InvisibleButton@ImGui@@YA_NPEBDAEBUImVec2@@@Z 000000014000c030 f   fall.obj\n  197:  0001:0000b130       ?Image@ImGui@@YAXPEAXAEBUImVec2@@11AEBUImVec4@@2@Z 000000014000c130 f   fall.obj\n  198:  0001:0000b390       ?ImageButton@ImGui@@YA_NPEAXAEBUImVec2@@11HAEBUImVec4@@2@Z 000000014000c390 f   fall.obj\n  199:  0001:0000b740       ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z 000000014000c740 f   fall.obj\n  200:  0001:0000bcf0       ?CheckboxFlags@ImGui@@YA_NPEBDPEAII@Z 000000014000ccf0 f   fall.obj\n  201:  0001:0000bda0       ?RadioButton@ImGui@@YA_NPEBD_N@Z 000000014000cda0 f   fall.obj\n  202:  0001:0000c3a0       ?RadioButton@ImGui@@YA_NPEBDPEAHH@Z 000000014000d3a0 f   fall.obj\n  203:  0001:0000c410       ?Combo@ImGui@@YA_NPEBDPEAHPEBQEBDHH@Z 000000014000d410 f   fall.obj\n  204:  0001:0000c470       ?Combo@ImGui@@YA_NPEBDPEAH0H@Z 000000014000d470 f   fall.obj\n  205:  0001:0000c510       ?Combo@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z 000000014000d510 f   fall.obj\n  206:  0001:0000cdc0       ?ColorButton@ImGui@@YA_NAEBUImVec4@@_N1@Z 000000014000ddc0 f   fall.obj\n  207:  0001:0000d100       ?ColorEdit3@ImGui@@YA_NPEBDQEAM@Z 000000014000e100 f   fall.obj\n  208:  0001:0000d240       ?ColorEdit4@ImGui@@YA_NPEBDQEAM_N@Z 000000014000e240 f   fall.obj\n  209:  0001:0000e210       ?ColorEditMode@ImGui@@YAXH@Z 000000014000f210 f   fall.obj\n  210:  0001:0000e240       ?PlotLines@ImGui@@YAXPEBDPEBMHH0MMUImVec2@@H@Z 000000014000f240 f   fall.obj\n  211:  0001:0000e2e0       ?PlotLines@ImGui@@YAXPEBDP6AMPEAXH@Z1HH0MMUImVec2@@@Z 000000014000f2e0 f   fall.obj\n  212:  0001:0000e370       ?PlotHistogram@ImGui@@YAXPEBDPEBMHH0MMUImVec2@@H@Z 000000014000f370 f   fall.obj\n  213:  0001:0000e420       ?PlotHistogram@ImGui@@YAXPEBDP6AMPEAXH@Z1HH0MMUImVec2@@@Z 000000014000f420 f   fall.obj\n  214:  0001:0000e4b0       ?ProgressBar@ImGui@@YAXMAEBUImVec2@@PEBD@Z 000000014000f4b0 f   fall.obj\n  215:  0001:0000e820       ?DragFloat@ImGui@@YA_NPEBDPEAMMMM0M@Z 000000014000f820 f   fall.obj\n  216:  0001:0000ed70       ?DragFloat2@ImGui@@YA_NPEBDQEAMMMM0M@Z 000000014000fd70 f   fall.obj\n  217:  0001:0000edf0       ?DragFloat3@ImGui@@YA_NPEBDQEAMMMM0M@Z 000000014000fdf0 f   fall.obj\n  218:  0001:0000ee70       ?DragFloat4@ImGui@@YA_NPEBDQEAMMMM0M@Z 000000014000fe70 f   fall.obj\n  219:  0001:0000eef0       ?DragFloatRange2@ImGui@@YA_NPEBDPEAM1MMM00M@Z 000000014000fef0 f   fall.obj\n  220:  0001:0000f190       ?DragInt@ImGui@@YA_NPEBDPEAHMHH0@Z 0000000140010190 f   fall.obj\n  221:  0001:0000f240       ?DragInt2@ImGui@@YA_NPEBDQEAHMHH0@Z 0000000140010240 f   fall.obj\n  222:  0001:0000f2a0       ?DragInt3@ImGui@@YA_NPEBDQEAHMHH0@Z 00000001400102a0 f   fall.obj\n  223:  0001:0000f300       ?DragInt4@ImGui@@YA_NPEBDQEAHMHH0@Z 0000000140010300 f   fall.obj\n  224:  0001:0000f360       ?DragIntRange2@ImGui@@YA_NPEBDPEAH1MHH00@Z 0000000140010360 f   fall.obj\n  225:  0001:0000f590       ?InputText@ImGui@@YA_NPEBDPEAD_KHP6AHPEAUImGuiTextEditCallbackData@@@ZPEAX@Z 0000000140010590 f   fall.obj\n  226:  0001:0000f630       ?InputTextMultiline@ImGui@@YA_NPEBDPEAD_KAEBUImVec2@@HP6AHPEAUImGuiTextEditCallbackData@@@ZPEAX@Z 0000000140010630 f   fall.obj\n  227:  0001:0000f690       ?InputFloat@ImGui@@YA_NPEBDPEAMMMHH@Z 0000000140010690 f   fall.obj\n  228:  0001:0000f7a0       ?InputFloat2@ImGui@@YA_NPEBDQEAMHH@Z 00000001400107a0 f   fall.obj\n  229:  0001:0000f7f0       ?InputFloat3@ImGui@@YA_NPEBDQEAMHH@Z 00000001400107f0 f   fall.obj\n  230:  0001:0000f840       ?InputFloat4@ImGui@@YA_NPEBDQEAMHH@Z 0000000140010840 f   fall.obj\n  231:  0001:0000f890       ?InputInt@ImGui@@YA_NPEBDPEAHHHH@Z 0000000140010890 f   fall.obj\n  232:  0001:0000f970       ?InputInt2@ImGui@@YA_NPEBDQEAHH@Z 0000000140010970 f   fall.obj\n  233:  0001:0000f9b0       ?InputInt3@ImGui@@YA_NPEBDQEAHH@Z 00000001400109b0 f   fall.obj\n  234:  0001:0000f9f0       ?InputInt4@ImGui@@YA_NPEBDQEAHH@Z 00000001400109f0 f   fall.obj\n  235:  0001:0000fa30       ?SliderFloat@ImGui@@YA_NPEBDPEAMMM0M@Z 0000000140010a30 f   fall.obj\n  236:  0001:0000fee0       ?SliderFloat2@ImGui@@YA_NPEBDQEAMMM0M@Z 0000000140010ee0 f   fall.obj\n  237:  0001:0000ff50       ?SliderFloat3@ImGui@@YA_NPEBDQEAMMM0M@Z 0000000140010f50 f   fall.obj\n  238:  0001:0000ffc0       ?SliderFloat4@ImGui@@YA_NPEBDQEAMMM0M@Z 0000000140010fc0 f   fall.obj\n  239:  0001:00010030       ?SliderAngle@ImGui@@YA_NPEBDPEAMMM@Z 0000000140011030 f   fall.obj\n  240:  0001:000100e0       ?SliderInt@ImGui@@YA_NPEBDPEAHHH0@Z 00000001400110e0 f   fall.obj\n  241:  0001:00010180       ?SliderInt2@ImGui@@YA_NPEBDQEAHHH0@Z 0000000140011180 f   fall.obj\n  242:  0001:000101d0       ?SliderInt3@ImGui@@YA_NPEBDQEAHHH0@Z 00000001400111d0 f   fall.obj\n  243:  0001:00010220       ?SliderInt4@ImGui@@YA_NPEBDQEAHHH0@Z 0000000140011220 f   fall.obj\n  244:  0001:00010270       ?VSliderFloat@ImGui@@YA_NPEBDAEBUImVec2@@PEAMMM0M@Z 0000000140011270 f   fall.obj\n  245:  0001:00010630       ?VSliderInt@ImGui@@YA_NPEBDAEBUImVec2@@PEAHHH0@Z 0000000140011630 f   fall.obj\n  246:  0001:000106e0       ?TreeNode@ImGui@@YA_NPEBD@Z 00000001400116e0 f   fall.obj\n  247:  0001:00010740       ?TreeNode@ImGui@@YA_NPEBD0ZZ 0000000140011740 f   fall.obj\n  248:  0001:000107a0       ?TreeNode@ImGui@@YA_NPEBXPEBDZZ 00000001400117a0 f   fall.obj\n  249:  0001:00010800       ?TreeNodeV@ImGui@@YA_NPEBD0PEAD@Z 0000000140011800 f   fall.obj\n  250:  0001:00010840       ?TreeNodeV@ImGui@@YA_NPEBXPEBDPEAD@Z 0000000140011840 f   fall.obj\n  251:  0001:00010880       ?TreeNodeEx@ImGui@@YA_NPEBDH@Z 0000000140011880 f   fall.obj\n  252:  0001:000108e0       ?TreeNodeEx@ImGui@@YA_NPEBDH0ZZ 00000001400118e0 f   fall.obj\n  253:  0001:00010940       ?TreeNodeEx@ImGui@@YA_NPEBXHPEBDZZ 0000000140011940 f   fall.obj\n  254:  0001:000109a0       ?TreeNodeExV@ImGui@@YA_NPEBDH0PEAD@Z 00000001400119a0 f   fall.obj\n  255:  0001:00010a60       ?TreeNodeExV@ImGui@@YA_NPEBXHPEBDPEAD@Z 0000000140011a60 f   fall.obj\n  256:  0001:00010b20       ?TreePush@ImGui@@YAXPEBD@Z 0000000140011b20 f   fall.obj\n  257:  0001:00010b90       ?TreePush@ImGui@@YAXPEBX@Z 0000000140011b90 f   fall.obj\n  258:  0001:00010c00       ?TreePop@ImGui@@YAXXZ      0000000140011c00 f   fall.obj\n  259:  0001:00010c40       ?TreeAdvanceToLabelPos@ImGui@@YAXXZ 0000000140011c40 f   fall.obj\n  260:  0001:00010ca0       ?GetTreeNodeToLabelSpacing@ImGui@@YAMXZ 0000000140011ca0 f   fall.obj\n  261:  0001:00010cf0       ?SetNextTreeNodeOpen@ImGui@@YAX_NH@Z 0000000140011cf0 f   fall.obj\n  262:  0001:00010d50       ?CollapsingHeader@ImGui@@YA_NPEBDH@Z 0000000140011d50 f   fall.obj\n  263:  0001:00010dc0       ?CollapsingHeader@ImGui@@YA_NPEBDPEA_NH@Z 0000000140011dc0 f   fall.obj\n  264:  0001:00010f60       ?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z 0000000140011f60 f   fall.obj\n  265:  0001:00011670       ?Selectable@ImGui@@YA_NPEBDPEA_NHAEBUImVec2@@@Z 0000000140012670 f   fall.obj\n  266:  0001:000116f0       ?ListBox@ImGui@@YA_NPEBDPEAHPEBQEBDHH@Z 00000001400126f0 f   fall.obj\n  267:  0001:00011750       ?ListBox@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z 0000000140012750 f   fall.obj\n  268:  0001:000118b0       ?ListBoxHeader@ImGui@@YA_NPEBDAEBUImVec2@@@Z 00000001400128b0 f   fall.obj\n  269:  0001:00011ae0       ?ListBoxHeader@ImGui@@YA_NPEBDHH@Z 0000000140012ae0 f   fall.obj\n  270:  0001:00011ba0       ?ListBoxFooter@ImGui@@YAXXZ 0000000140012ba0 f   fall.obj\n  271:  0001:00011c30       ?Value@ImGui@@YAXPEBD_N@Z  0000000140012c30 f   fall.obj\n  272:  0001:00011c90       ?Value@ImGui@@YAXPEBDH@Z   0000000140012c90 f   fall.obj\n  273:  0001:00011cc0       ?Value@ImGui@@YAXPEBDI@Z   0000000140012cc0 f   fall.obj\n  274:  0001:00011cf0       ?Value@ImGui@@YAXPEBDM0@Z  0000000140012cf0 f   fall.obj\n  275:  0001:00011da0       ?ValueColor@ImGui@@YAXPEBDAEBUImVec4@@@Z 0000000140012da0 f   fall.obj\n  276:  0001:00011e40       ?ValueColor@ImGui@@YAXPEBDI@Z 0000000140012e40 f   fall.obj\n  277:  0001:00011ea0       ?SetTooltip@ImGui@@YAXPEBDZZ 0000000140012ea0 f   fall.obj\n  278:  0001:00011ef0       ?SetTooltipV@ImGui@@YAXPEBDPEAD@Z 0000000140012ef0 f   fall.obj\n  279:  0001:00011f40       ?BeginTooltip@ImGui@@YAXXZ 0000000140012f40 f   fall.obj\n  280:  0001:00011f70       ?EndTooltip@ImGui@@YAXXZ   0000000140012f70 f   fall.obj\n  281:  0001:00011fb0       ?BeginMainMenuBar@ImGui@@YA_NXZ 0000000140012fb0 f   fall.obj\n  282:  0001:000120d0       ?EndMainMenuBar@ImGui@@YAXXZ 00000001400130d0 f   fall.obj\n  283:  0001:00012100       ?BeginMenuBar@ImGui@@YA_NXZ 0000000140013100 f   fall.obj\n  284:  0001:000122a0       ?EndMenuBar@ImGui@@YAXXZ   00000001400132a0 f   fall.obj\n  285:  0001:000123a0       ?BeginMenu@ImGui@@YA_NPEBD_N@Z 00000001400133a0 f   fall.obj\n  286:  0001:00012e20       ?EndMenu@ImGui@@YAXXZ      0000000140013e20 f   fall.obj\n  287:  0001:00012e40       ?MenuItem@ImGui@@YA_NPEBD0_N1@Z 0000000140013e40 f   fall.obj\n  288:  0001:00013150       ?MenuItem@ImGui@@YA_NPEBD0PEA_N_N@Z 0000000140014150 f   fall.obj\n  289:  0001:000131f0       ?OpenPopup@ImGui@@YAXPEBD@Z 00000001400141f0 f   fall.obj\n  290:  0001:00013210       ?BeginPopup@ImGui@@YA_NPEBD@Z 0000000140014210 f   fall.obj\n  291:  0001:00013260       ?BeginPopupModal@ImGui@@YA_NPEBDPEA_NH@Z 0000000140014260 f   fall.obj\n  292:  0001:00013340       ?BeginPopupContextItem@ImGui@@YA_NPEBDH@Z 0000000140014340 f   fall.obj\n  293:  0001:00013390       ?BeginPopupContextWindow@ImGui@@YA_N_NPEBDH@Z 0000000140014390 f   fall.obj\n  294:  0001:00013410       ?BeginPopupContextVoid@ImGui@@YA_NPEBDH@Z 0000000140014410 f   fall.obj\n  295:  0001:00013470       ?EndPopup@ImGui@@YAXXZ     0000000140014470 f   fall.obj\n  296:  0001:00013500       ?CloseCurrentPopup@ImGui@@YAXXZ 0000000140014500 f   fall.obj\n  297:  0001:000135f0       ?LogToTTY@ImGui@@YAXH@Z    00000001400145f0 f   fall.obj\n  298:  0001:00013680       ?LogToFile@ImGui@@YAXHPEBD@Z 0000000140014680 f   fall.obj\n  299:  0001:00013780       ?LogToClipboard@ImGui@@YAXH@Z 0000000140014780 f   fall.obj\n  300:  0001:00013810       ?LogFinish@ImGui@@YAXXZ    0000000140014810 f   fall.obj\n  301:  0001:00013900       ?LogButtons@ImGui@@YAXXZ   0000000140014900 f   fall.obj\n  302:  0001:00013a70       ?LogText@ImGui@@YAXPEBDZZ  0000000140014a70 f   fall.obj\n  303:  0001:00013b10       ?PushClipRect@ImGui@@YAXAEBUImVec2@@0_N@Z 0000000140014b10 f   fall.obj\n  304:  0001:00013bb0       ?PopClipRect@ImGui@@YAXXZ  0000000140014bb0 f   fall.obj\n  305:  0001:00013c20       ?IsItemHovered@ImGui@@YA_NXZ 0000000140014c20 f   fall.obj\n  306:  0001:00013c50       ?IsItemHoveredRect@ImGui@@YA_NXZ 0000000140014c50 f   fall.obj\n  307:  0001:00013c80       ?IsItemActive@ImGui@@YA_NXZ 0000000140014c80 f   fall.obj\n  308:  0001:00013cf0       ?IsItemClicked@ImGui@@YA_NH@Z 0000000140014cf0 f   fall.obj\n  309:  0001:00013d40       ?IsItemVisible@ImGui@@YA_NXZ 0000000140014d40 f   fall.obj\n  310:  0001:00013da0       ?IsAnyItemHovered@ImGui@@YA_NXZ 0000000140014da0 f   fall.obj\n  311:  0001:00013df0       ?IsAnyItemActive@ImGui@@YA_NXZ 0000000140014df0 f   fall.obj\n  312:  0001:00013e30       ?GetItemRectMin@ImGui@@YA?AUImVec2@@XZ 0000000140014e30 f   fall.obj\n  313:  0001:00013e70       ?GetItemRectMax@ImGui@@YA?AUImVec2@@XZ 0000000140014e70 f   fall.obj\n  314:  0001:00013eb0       ?GetItemRectSize@ImGui@@YA?AUImVec2@@XZ 0000000140014eb0 f   fall.obj\n  315:  0001:00013ef0       ?SetItemAllowOverlap@ImGui@@YAXXZ 0000000140014ef0 f   fall.obj\n  316:  0001:00013f60       ?IsWindowHovered@ImGui@@YA_NXZ 0000000140014f60 f   fall.obj\n  317:  0001:00013fd0       ?IsWindowFocused@ImGui@@YA_NXZ 0000000140014fd0 f   fall.obj\n  318:  0001:00014020       ?IsRootWindowFocused@ImGui@@YA_NXZ 0000000140015020 f   fall.obj\n  319:  0001:00014070       ?IsRootWindowOrAnyChildFocused@ImGui@@YA_NXZ 0000000140015070 f   fall.obj\n  320:  0001:000140e0       ?IsRootWindowOrAnyChildHovered@ImGui@@YA_NXZ 00000001400150e0 f   fall.obj\n  321:  0001:00014160       ?IsRectVisible@ImGui@@YA_NAEBUImVec2@@@Z 0000000140015160 f   fall.obj\n  322:  0001:000141d0       ?IsRectVisible@ImGui@@YA_NAEBUImVec2@@0@Z 00000001400151d0 f   fall.obj\n  323:  0001:00014220       ?IsPosHoveringAnyWindow@ImGui@@YA_NAEBUImVec2@@@Z 0000000140015220 f   fall.obj\n  324:  0001:00014260       ?GetTime@ImGui@@YAMXZ      0000000140015260 f   fall.obj\n  325:  0001:00014280       ?GetFrameCount@ImGui@@YAHXZ 0000000140015280 f   fall.obj\n  326:  0001:000142a0       ?GetStyleColName@ImGui@@YAPEBDH@Z 00000001400152a0 f   fall.obj\n  327:  0001:000145a0       ?CalcItemRectClosestPoint@ImGui@@YA?AUImVec2@@AEBU2@_NM@Z 00000001400155a0 f   fall.obj\n  328:  0001:00014620       ?CalcTextSize@ImGui@@YA?AUImVec2@@PEBD0_NM@Z 0000000140015620 f   fall.obj\n  329:  0001:000147b0       ?CalcListClipping@ImGui@@YAXHMPEAH0@Z 00000001400157b0 f   fall.obj\n  330:  0001:000148e0       ?BeginChildFrame@ImGui@@YA_NIAEBUImVec2@@H@Z 00000001400158e0 f   fall.obj\n  331:  0001:000149b0       ?EndChildFrame@ImGui@@YAXXZ 00000001400159b0 f   fall.obj\n  332:  0001:000149e0       ?ColorConvertU32ToFloat4@ImGui@@YA?AUImVec4@@I@Z 00000001400159e0 f   fall.obj\n  333:  0001:00014a90       ?ColorConvertFloat4ToU32@ImGui@@YAIAEBUImVec4@@@Z 0000000140015a90 f   fall.obj\n  334:  0001:00014b70       ?ColorConvertRGBtoHSV@ImGui@@YAXMMMAEAM00@Z 0000000140015b70 f   fall.obj\n  335:  0001:00014cd0       ?ColorConvertHSVtoRGB@ImGui@@YAXMMMAEAM00@Z 0000000140015cd0 f   fall.obj\n  336:  0001:00014f70       ?GetKeyIndex@ImGui@@YAHH@Z 0000000140015f70 f   fall.obj\n  337:  0001:00014fc0       ?IsKeyDown@ImGui@@YA_NH@Z  0000000140015fc0 f   fall.obj\n  338:  0001:00015020       ?IsKeyPressed@ImGui@@YA_NH_N@Z 0000000140016020 f   fall.obj\n  339:  0001:00015190       ?IsKeyReleased@ImGui@@YA_NH@Z 0000000140016190 f   fall.obj\n  340:  0001:00015220       ?IsMouseDown@ImGui@@YA_NH@Z 0000000140016220 f   fall.obj\n  341:  0001:00015280       ?IsMouseClicked@ImGui@@YA_NH_N@Z 0000000140016280 f   fall.obj\n  342:  0001:000153e0       ?IsMouseDoubleClicked@ImGui@@YA_NH@Z 00000001400163e0 f   fall.obj\n  343:  0001:00015440       ?IsMouseReleased@ImGui@@YA_NH@Z 0000000140016440 f   fall.obj\n  344:  0001:000154a0       ?IsMouseHoveringWindow@ImGui@@YA_NXZ 00000001400164a0 f   fall.obj\n  345:  0001:000154f0       ?IsMouseHoveringAnyWindow@ImGui@@YA_NXZ 00000001400164f0 f   fall.obj\n  346:  0001:00015530       ?IsMouseHoveringRect@ImGui@@YA_NAEBUImVec2@@0_N@Z 0000000140016530 f   fall.obj\n  347:  0001:00015610       ?IsMouseDragging@ImGui@@YA_NHM@Z 0000000140016610 f   fall.obj\n  348:  0001:000156d0       ?GetMousePos@ImGui@@YA?AUImVec2@@XZ 00000001400166d0 f   fall.obj\n  349:  0001:00015700       ?GetMousePosOnOpeningCurrentPopup@ImGui@@YA?AUImVec2@@XZ 0000000140016700 f   fall.obj\n  350:  0001:00015780       ?GetMouseDragDelta@ImGui@@YA?AUImVec2@@HM@Z 0000000140016780 f   fall.obj\n  351:  0001:00015880       ?ResetMouseDragDelta@ImGui@@YAXH@Z 0000000140016880 f   fall.obj\n  352:  0001:000158f0       ?GetMouseCursor@ImGui@@YAHXZ 00000001400168f0 f   fall.obj\n  353:  0001:00015910       ?SetMouseCursor@ImGui@@YAXH@Z 0000000140016910 f   fall.obj\n  354:  0001:00015930       ?CaptureKeyboardFromApp@ImGui@@YAX_N@Z 0000000140016930 f   fall.obj\n  355:  0001:00015970       ?CaptureMouseFromApp@ImGui@@YAX_N@Z 0000000140016970 f   fall.obj\n  356:  0001:000159b0       ?MemAlloc@ImGui@@YAPEAX_K@Z 00000001400169b0 f   fall.obj\n  357:  0001:00015a00       ?MemFree@ImGui@@YAXPEAX@Z  0000000140016a00 f   fall.obj\n  358:  0001:00015a50       ?GetClipboardText@ImGui@@YAPEBDXZ 0000000140016a50 f   fall.obj\n  359:  0001:00015ab0       ?SetClipboardText@ImGui@@YAXPEBD@Z 0000000140016ab0 f   fall.obj\n  360:  0001:00015b00       ?GetVersion@ImGui@@YAPEBDXZ 0000000140016b00 f   fall.obj\n  361:  0001:00015b10       ?CreateContext@ImGui@@YAPEAUImGuiContext@@P6APEAX_K@ZP6AXPEAX@Z@Z 0000000140016b10 f   fall.obj\n  362:  0001:00015bd0       ?DestroyContext@ImGui@@YAXPEAUImGuiContext@@@Z 0000000140016bd0 f   fall.obj\n  363:  0001:00015c20       ?GetCurrentContext@ImGui@@YAPEAUImGuiContext@@XZ 0000000140016c20 f   fall.obj\n  364:  0001:00015c30       ?SetCurrentContext@ImGui@@YAXPEAUImGuiContext@@@Z 0000000140016c30 f   fall.obj\n  365:  0001:00015c50       ??0ImGuiStyle@@QEAA@XZ     0000000140016c50 f   fall.obj\n  366:  0001:00016e10       ?AddInputCharacter@ImGuiIO@@QEAAXG@Z 0000000140017e10 f   fall.obj\n  367:  0001:00016e80       ?AddInputCharactersUTF8@ImGuiIO@@QEAAXPEBD@Z 0000000140017e80 f   fall.obj\n  368:  0001:00016f30       ??0ImGuiIO@@QEAA@XZ        0000000140017f30 f   fall.obj\n  369:  0001:000172e0       ?split@TextRange@ImGuiTextFilter@@QEAAXDAEAV?$ImVector@UTextRange@ImGuiTextFilter@@@@@Z 00000001400182e0 f   fall.obj\n  370:  0001:000173b0       ??0ImGuiTextFilter@@QEAA@PEBD@Z 00000001400183b0 f   fall.obj\n  371:  0001:00017430       ?Draw@ImGuiTextFilter@@QEAA_NPEBDM@Z 0000000140018430 f   fall.obj\n  372:  0001:000174d0       ?PassFilter@ImGuiTextFilter@@QEBA_NPEBD0@Z 00000001400184d0 f   fall.obj\n  373:  0001:00017630       ?Build@ImGuiTextFilter@@QEAAXXZ 0000000140018630 f   fall.obj\n  374:  0001:00017770       ?append@ImGuiTextBuffer@@QEAAXPEBDZZ 0000000140018770 f   fall.obj\n  375:  0001:000177c0       ?appendv@ImGuiTextBuffer@@QEAAXPEBDPEAD@Z 00000001400187c0 f   fall.obj\n  376:  0001:000178c0       ?Clear@ImGuiStorage@@QEAAXXZ 00000001400188c0 f   fall.obj\n  377:  0001:000178f0       ?GetInt@ImGuiStorage@@QEBAHIH@Z 00000001400188f0 f   fall.obj\n  378:  0001:00017960       ?SetInt@ImGuiStorage@@QEAAXIH@Z 0000000140018960 f   fall.obj\n  379:  0001:000179f0       ?GetBool@ImGuiStorage@@QEBA_NI_N@Z 00000001400189f0 f   fall.obj\n  380:  0001:00017a60       ?SetBool@ImGuiStorage@@QEAAXI_N@Z 0000000140018a60 f   fall.obj\n  381:  0001:00017ab0       ?GetFloat@ImGuiStorage@@QEBAMIM@Z 0000000140018ab0 f   fall.obj\n  382:  0001:00017b20       ?SetFloat@ImGuiStorage@@QEAAXIM@Z 0000000140018b20 f   fall.obj\n  383:  0001:00017bb0       ?GetVoidPtr@ImGuiStorage@@QEBAPEAXI@Z 0000000140018bb0 f   fall.obj\n  384:  0001:00017c10       ?SetVoidPtr@ImGuiStorage@@QEAAXIPEAX@Z 0000000140018c10 f   fall.obj\n  385:  0001:00017ca0       ?GetIntRef@ImGuiStorage@@QEAAPEAHIH@Z 0000000140018ca0 f   fall.obj\n  386:  0001:00017d30       ?GetBoolRef@ImGuiStorage@@QEAAPEA_NI_N@Z 0000000140018d30 f   fall.obj\n  387:  0001:00017d80       ?GetFloatRef@ImGuiStorage@@QEAAPEAMIM@Z 0000000140018d80 f   fall.obj\n  388:  0001:00017e10       ?GetVoidPtrRef@ImGuiStorage@@QEAAPEAPEAXIPEAX@Z 0000000140018e10 f   fall.obj\n  389:  0001:00017ea0       ?SetAllInt@ImGuiStorage@@QEAAXH@Z 0000000140018ea0 f   fall.obj\n  390:  0001:00017f00       ?DeleteChars@ImGuiTextEditCallbackData@@QEAAXHH@Z 0000000140018f00 f   fall.obj\n  391:  0001:00018050       ?InsertChars@ImGuiTextEditCallbackData@@QEAAXHPEBD0@Z 0000000140019050 f   fall.obj\n  392:  0001:000181c0       ?Step@ImGuiListClipper@@QEAA_NXZ 00000001400191c0 f   fall.obj\n  393:  0001:00018370       ?Begin@ImGuiListClipper@@QEAAXHM@Z 0000000140019370 f   fall.obj\n  394:  0001:00018470       ?End@ImGuiListClipper@@QEAAXXZ 0000000140019470 f   fall.obj\n  395   0001:000184f0       ?PushClipRect@ImDrawList@@QEAAXUImVec2@@0_N@Z 00000001400194f0 f   fall.obj\n  396   0001:00018650       ?PushClipRectFullScreen@ImDrawList@@QEAAXXZ 0000000140019650 f   fall.obj\n  ...\n  469   0001:00021ca0       ?GrowIndex@ImFont@@QEAAXH@Z 0000000140022ca0 f   fall.obj\n  470   0001:00021d90       ?AddRemapChar@ImFont@@QEAAXGG_N@Z 0000000140022d90 f   fall.obj\n  471:  0001:00021ef0       ?ImGui_ImplSdlGL3_Init@@YA_NPEAUSDL_Window@@@Z 0000000140022ef0 f   fall.obj\n  472:  0001:00022130       ?ImGui_ImplSdlGL3_Shutdown@@YAXXZ 0000000140023130 f   fall.obj\n  473:  0001:00022150       ?ImGui_ImplSdlGL3_NewFrame@@YAXPEAUSDL_Window@@@Z 0000000140023150 f   fall.obj\n  474:  0001:000224e0       ?ImGui_ImplSdlGL3_ProcessEvent@@YA_NPEATSDL_Event@@@Z 00000001400234e0 f   fall.obj\n  475:  0001:00022720       ?ImGui_ImplSdlGL3_InvalidateDeviceObjects@@YAXXZ 0000000140023720 f   fall.obj\n  476:  0001:000228a0       ?ImGui_ImplSdlGL3_CreateDeviceObjects@@YA_NXZ 00000001400238a0 f   fall.obj\n  477   0001:00022ba0       ?was_pressed@@YAIUButtonInput@@@Z 0000000140023ba0 f   fall.obj\n  478   0001:00022be0       ?was_down@@YAIUButtonInput@@@Z 0000000140023be0 f   fall.obj\n  ...\n  537   0001:00026420       stbi_zlib_decode_noheader_malloc 0000000140027420 f   fall.obj\n  538   0001:00026520       stbi_zlib_decode_noheader_buffer 0000000140027520 f   fall.obj\n  539:  0001:000265e0       ?Image@ImGui@@YAXUPlatformTexture@@@Z 00000001400275e0 f   fall.obj\n  540   0001:000266f0       ?ImTextStrToUtf8@@YAHPEADHPEBG1@Z 00000001400276f0 f   fall.obj\n  541   0001:00026800       ?ImTextCharFromUtf8@@YAHPEAIPEBD1@Z 0000000140027800 f   fall.obj\n  ...\n  555   0001:00027930       ?ImFormatString@@YAHPEADHPEBDZZ 0000000140028930 f   fall.obj\n  556   0001:000279e0       ?ImFormatStringV@@YAHPEADHPEBD0@Z 00000001400289e0 f   fall.obj\n  557:  0001:000282b0       ??0ImGuiSimpleColumns@@QEAA@XZ 00000001400292b0 f   fall.obj\n  558:  0001:00028330       ?Update@ImGuiSimpleColumns@@QEAAXHM_N@Z 0000000140029330 f   fall.obj\n  559:  0001:00028490       ?DeclColumns@ImGuiSimpleColumns@@QEAAMMMM@Z 0000000140029490 f   fall.obj\n  560:  0001:00028600       ?CalcExtraSpace@ImGuiSimpleColumns@@QEAAMM@Z 0000000140029600 f   fall.obj\n  561:  0001:00028640       ?OnKeyPressed@ImGuiTextEditState@@QEAAXH@Z 0000000140029640 f   fall.obj\n  562:  0001:00028690       ??0ImGuiWindow@@QEAA@PEBD@Z 0000000140029690 f   fall.obj\n  563:  0001:00028cb0       ??1ImGuiWindow@@QEAA@XZ    0000000140029cb0 f   fall.obj\n  564:  0001:00028d50       ?GetID@ImGuiWindow@@QEAAIPEBD0@Z 0000000140029d50 f   fall.obj\n  565:  0001:00028de0       ?GetID@ImGuiWindow@@QEAAIPEBX@Z 0000000140029de0 f   fall.obj\n  566:  0001:00028e40       ?GetIDNoKeepAlive@ImGuiWindow@@QEAAIPEBD0@Z 0000000140029e40 f   fall.obj\n  567:  0001:00028eb0       ?GetParentWindow@ImGui@@YAPEAUImGuiWindow@@XZ 0000000140029eb0 f   fall.obj\n  568:  0001:00028f20       ?FindWindowByName@ImGui@@YAPEAUImGuiWindow@@PEBD@Z 0000000140029f20 f   fall.obj\n  569:  0001:00028fc0       ?FocusWindow@ImGui@@YAXPEAUImGuiWindow@@@Z 0000000140029fc0 f   fall.obj\n  570:  0001:00029130       ?EndFrame@ImGui@@YAXXZ     000000014002a130 f   fall.obj\n  571:  0001:00029540       ?SetActiveID@ImGui@@YAXIPEAUImGuiWindow@@@Z 000000014002a540 f   fall.obj\n  572:  0001:000295b0       ?ClearActiveID@ImGui@@YAXXZ 000000014002a5b0 f   fall.obj\n  573:  0001:000295d0       ?SetHoveredID@ImGui@@YAXI@Z 000000014002a5d0 f   fall.obj\n  574:  0001:00029610       ?KeepAliveID@ImGui@@YAXI@Z 000000014002a610 f   fall.obj\n  575:  0001:00029650       ?ItemSize@ImGui@@YAXAEBUImVec2@@M@Z 000000014002a650 f   fall.obj\n  576:  0001:00029830       ?ItemSize@ImGui@@YAXAEBUImRect@@M@Z 000000014002a830 f   fall.obj\n  577:  0001:00029870       ?ItemAdd@ImGui@@YA_NAEBUImRect@@PEBI@Z 000000014002a870 f   fall.obj\n  578:  0001:000299e0       ?IsClippedEx@ImGui@@YA_NAEBUImRect@@PEBI_N@Z 000000014002a9e0 f   fall.obj\n  579:  0001:00029a70       ?IsHovered@ImGui@@YA_NAEBUImRect@@I_N@Z 000000014002aa70 f   fall.obj\n  580:  0001:00029b80       ?FocusableItemRegister@ImGui@@YA_NPEAUImGuiWindow@@_N1@Z 000000014002ab80 f   fall.obj\n  581:  0001:00029ce0       ?FocusableItemUnregister@ImGui@@YAXPEAUImGuiWindow@@@Z 000000014002ace0 f   fall.obj\n  582:  0001:00029d20       ?CalcItemSize@ImGui@@YA?AUImVec2@@U2@MM@Z 000000014002ad20 f   fall.obj\n  583:  0001:00029e90       ?CalcWrapWidthForPos@ImGui@@YAMAEBUImVec2@@M@Z 000000014002ae90 f   fall.obj\n  584:  0001:00029f50       ?OpenPopupEx@ImGui@@YAXPEBD_N@Z 000000014002af50 f   fall.obj\n  585:  0001:0002a090       ?RenderText@ImGui@@YAXUImVec2@@PEBD1_N@Z 000000014002b090 f   fall.obj\n  586:  0001:0002a1f0       ?RenderTextWrapped@ImGui@@YAXUImVec2@@PEBD1M@Z 000000014002b1f0 f   fall.obj\n  587:  0001:0002a330       ?RenderTextClipped@ImGui@@YAXAEBUImVec2@@0PEBD1PEBU2@0PEBUImRect@@@Z 000000014002b330 f   fall.obj\n  588:  0001:0002a780       ?RenderFrame@ImGui@@YAXUImVec2@@0I_NM@Z 000000014002b780 f   fall.obj\n  589:  0001:0002a940       ?RenderCollapseTriangle@ImGui@@YAXUImVec2@@_NM@Z 000000014002b940 f   fall.obj\n  590:  0001:0002ac60       ?RenderBullet@ImGui@@YAXUImVec2@@@Z 000000014002bc60 f   fall.obj\n  591:  0001:0002acd0       ?RenderCheckMark@ImGui@@YAXUImVec2@@I@Z 000000014002bcd0 f   fall.obj\n  592:  0001:0002aed0       ?FindRenderedTextEnd@ImGui@@YAPEBDPEBD0@Z 000000014002bed0 f   fall.obj\n  593:  0001:0002af60       ?ButtonBehavior@ImGui@@YA_NAEBUImRect@@IPEA_N1H@Z 000000014002bf60 f   fall.obj\n  594:  0001:0002b300       ?ButtonEx@ImGui@@YA_NPEBDAEBUImVec2@@H@Z 000000014002c300 f   fall.obj\n  595:  0001:0002b630       ?CloseButton@ImGui@@YA_NIAEBUImVec2@@M@Z 000000014002c630 f   fall.obj\n  596:  0001:0002b960       ?SliderBehavior@ImGui@@YA_NAEBUImRect@@IPEAMMMMHH@Z 000000014002c960 f   fall.obj\n  597:  0001:0002c270       ?SliderFloatN@ImGui@@YA_NPEBDPEAMHMM0M@Z 000000014002d270 f   fall.obj\n  598:  0001:0002c3c0       ?SliderIntN@ImGui@@YA_NPEBDPEAHHHH0@Z 000000014002d3c0 f   fall.obj\n  599:  0001:0002c500       ?DragBehavior@ImGui@@YA_NAEBUImRect@@IPEAMMMMHM@Z 000000014002d500 f   fall.obj\n  600:  0001:0002ca00       ?DragFloatN@ImGui@@YA_NPEBDPEAMHMMM0M@Z 000000014002da00 f   fall.obj\n  601:  0001:0002cb60       ?DragIntN@ImGui@@YA_NPEBDPEAHHMHH0@Z 000000014002db60 f   fall.obj\n  602:  0001:0002ccb0       ?InputTextEx@ImGui@@YA_NPEBDPEADHAEBUImVec2@@HP6AHPEAUImGuiTextEditCallbackData@@@ZPEAX@Z 000000014002dcb0 f   fall.obj\n  603:  0001:0002fdc0       ?InputFloatN@ImGui@@YA_NPEBDPEAMHHH@Z 0000000140030dc0 f   fall.obj\n  604:  0001:0002ff20       ?InputIntN@ImGui@@YA_NPEBDPEAHHH@Z 0000000140030f20 f   fall.obj\n  605:  0001:00030080       ?InputScalarEx@ImGui@@YA_NPEBDW4ImGuiDataType@@PEAX220H@Z 0000000140031080 f   fall.obj\n  606:  0001:00030480       ?InputScalarAsWidgetReplacement@ImGui@@YA_NAEBUImRect@@PEBDW4ImGuiDataType@@PEAXIH@Z 0000000140031480 f   fall.obj\n  607:  0001:00030650       ?TreeNodeBehavior@ImGui@@YA_NIHPEBD0@Z 0000000140031650 f   fall.obj\n  608:  0001:00031110       ?TreeNodeBehaviorIsOpen@ImGui@@YA_NIH@Z 0000000140032110 f   fall.obj\n  609:  0001:000312c0       ?TreePushRawID@ImGui@@YAXI@Z 00000001400322c0 f   fall.obj\n  610:  0001:00031320       ?PlotEx@ImGui@@YAXW4ImGuiPlotType@@PEBDP6AMPEAXH@Z2HH1MMUImVec2@@@Z 0000000140032320 f   fall.obj\n  611:  0001:00031de0       ?ParseFormatPrecision@ImGui@@YAHPEBDH@Z 0000000140032de0 f   fall.obj\n  612:  0001:00031ec0       ?RoundScalar@ImGui@@YAMMH@Z 0000000140032ec0 f   fall.obj\n  613   0001:00036120       ?ImStrncpy@@YAXPEADPEBDH@Z 0000000140037120 f   fall.obj\n  614:  0001:00046d10       ?ImGui_ImplSdlGL3_RenderDrawLists@@YAXPEAUImDrawData@@@Z 0000000140047d10 f   fall.obj\n  615:  0001:000474c0       ?ImGui_ImplSdlGL3_CreateFontsTexture@@YAXXZ 00000001400484c0 f   fall.obj\n  616   0001:0005fc30       stbi_write_png             0000000140060c30 f   fall.obj\n  617   0001:0005fd00       stbi_write_bmp             0000000140060d00 f   fall.obj\n  ...\n  635   0001:000648f0       ??$__vcrt_va_start_verify_argument_type@PEBD@@YAXXZ 00000001400658f0 f i fall.obj\n  636   0001:000648f0       ??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ 00000001400658f0 f i fall.obj\n  637:  0001:00064900       ??0?$ImVector@UTextRange@ImGuiTextFilter@@@@QEAA@XZ 0000000140065900 f i fall.obj\n  638   0001:00064900       ??0?$ImVector@_N@@QEAA@XZ  0000000140065900 f i fall.obj\n  639   0001:00064900       ??0?$ImVector@UGlyph@ImFont@@@@QEAA@XZ 0000000140065900 f i fall.obj\n  640   0001:00064900       ??0?$ImVector@UImVec4@@@@QEAA@XZ 0000000140065900 f i fall.obj\n  641:  0001:00064900       ??0?$ImVector@UImGuiGroupData@@@@QEAA@XZ 0000000140065900 f i fall.obj\n  642   0001:00064900       ??0?$ImVector@PEAUImFont@@@@QEAA@XZ 0000000140065900 f i fall.obj\n  643:  0001:00064900       ??0?$ImVector@PEAUImGuiWindow@@@@QEAA@XZ 0000000140065900 f i fall.obj\n  644   0001:00064900       ??0?$ImVector@UImDrawCmd@@@@QEAA@XZ 0000000140065900 f i fall.obj\n  645:  0001:00064900       ??0?$ImVector@UPair@ImGuiStorage@@@@QEAA@XZ 0000000140065900 f i fall.obj\n  646:  0001:00064900       ??0?$ImVector@UImGuiStyleMod@@@@QEAA@XZ 0000000140065900 f i fall.obj\n  647:  0001:00064900       ??0?$ImVector@UImGuiColumnData@@@@QEAA@XZ 0000000140065900 f i fall.obj\n  648   0001:00064900       ??0?$ImVector@Ustbrp_rect@@@@QEAA@XZ 0000000140065900 f i fall.obj\n  649   0001:00064900       ??0?$ImVector@D@@QEAA@XZ   0000000140065900 f i fall.obj\n  ...\n  651   0001:00064900       ??0?$ImVector@PEAUImDrawList@@@@QEAA@XZ 0000000140065900 f i fall.obj\n  652   0001:00064900       ??0?$ImVector@G@@QEAA@XZ   0000000140065900 f i fall.obj\n  653:  0001:00064900       ??0?$ImVector@UImGuiColMod@@@@QEAA@XZ 0000000140065900 f i fall.obj\n  654:  0001:00064900       ??0?$ImVector@UImGuiPopupRef@@@@QEAA@XZ 0000000140065900 f i fall.obj\n  655   0001:00064900       ??0?$ImVector@I@@QEAA@XZ   0000000140065900 f i fall.obj\n  656   0001:00064900       ??0?$ImVector@UImFontConfig@@@@QEAA@XZ 0000000140065900 f i fall.obj\n  657:  0001:00064900       ??0?$ImVector@UImGuiIniData@@@@QEAA@XZ 0000000140065900 f i fall.obj\n  658   0001:00064900       ??0?$ImVector@UImDrawVert@@@@QEAA@XZ 0000000140065900 f i fall.obj\n  659   0001:00064900       ??0?$ImVector@UImDrawChannel@@@@QEAA@XZ 0000000140065900 f i fall.obj\n  ...\n  665   0001:00064ab0       ??0ImDrawData@@QEAA@XZ     0000000140065ab0 f i fall.obj\n  666   0001:00064b00       ??0ImDrawList@@QEAA@XZ     0000000140065b00 f i fall.obj\n  667:  0001:00064ba0       ??0ImGuiColMod@@QEAA@XZ    0000000140065ba0 f i fall.obj\n  668:  0001:00064bd0       ??0ImGuiContext@@QEAA@XZ   0000000140065bd0 f i fall.obj\n  669:  0001:000653f0       ??0ImGuiDrawContext@@QEAA@XZ 00000001400663f0 f i fall.obj\n  670:  0001:00065710       ??0ImGuiListClipper@@QEAA@HM@Z 0000000140066710 f i fall.obj\n  671:  0001:00065750       ??0ImGuiMouseCursorData@@QEAA@XZ 0000000140066750 f i fall.obj\n  672:  0001:000657d0       ??0ImGuiPlotArrayGetterData@@QEAA@PEBMH@Z 00000001400667d0 f i fall.obj\n  673:  0001:00065800       ??0ImGuiPopupRef@@QEAA@IPEAUImGuiWindow@@IAEBUImVec2@@@Z 0000000140066800 f i fall.obj\n  674:  0001:00065880       ??0ImGuiSizeConstraintCallbackData@@QEAA@XZ 0000000140066880 f i fall.obj\n  675:  0001:000658d0       ??0ImGuiStorage@@QEAA@XZ   00000001400668d0 f i fall.obj\n  676:  0001:000658f0       ??0ImGuiStyleMod@@QEAA@HM@Z 00000001400668f0 f i fall.obj\n  677:  0001:00065930       ??0ImGuiStyleMod@@QEAA@HUImVec2@@@Z 0000000140066930 f i fall.obj\n  678:  0001:00065990       ??0ImGuiTextBuffer@@QEAA@XZ 0000000140066990 f i fall.obj\n  679:  0001:000659d0       ??0ImGuiTextEditState@@QEAA@XZ 00000001400669d0 f i fall.obj\n  680   0001:00065a30       ??0ImRect@@QEAA@AEBUImVec2@@0@Z 0000000140066a30 f i fall.obj\n  681   0001:00065a70       ??0ImRect@@QEAA@AEBUImVec4@@@Z 0000000140066a70 f i fall.obj\n  ...\n  686   0001:00065c00       ??0ImVec4@@QEAA@MMMM@Z     0000000140066c00 f i fall.obj\n  687   0001:00065c60       ??0ImVec4@@QEAA@XZ         0000000140066c60 f i fall.obj\n  688:  0001:00065ca0       ??0Pair@ImGuiStorage@@QEAA@IH@Z 0000000140066ca0 f i fall.obj\n  689:  0001:00065cd0       ??0Pair@ImGuiStorage@@QEAA@IM@Z 0000000140066cd0 f i fall.obj\n  690:  0001:00065d00       ??0Pair@ImGuiStorage@@QEAA@IPEAX@Z 0000000140066d00 f i fall.obj\n  691:  0001:00065d30       ??0TextRange@ImGuiTextFilter@@QEAA@PEBD0@Z 0000000140066d30 f i fall.obj\n  692   0001:00065d60       ??1?$ImVector@PEAUImFont@@@@QEAA@XZ 0000000140066d60 f i fall.obj\n  693   0001:00065d60       ??1?$ImVector@UImVec2@@@@QEAA@XZ 0000000140066d60 f i fall.obj\n  694   0001:00065d60       ??1?$ImVector@PEAX@@QEAA@XZ 0000000140066d60 f i fall.obj\n  695   0001:00065d60       ??1?$ImVector@PEAUImDrawList@@@@QEAA@XZ 0000000140066d60 f i fall.obj\n  696:  0001:00065d60       ??1?$ImVector@UImGuiColMod@@@@QEAA@XZ 0000000140066d60 f i fall.obj\n  697:  0001:00065d60       ??1?$ImVector@UImGuiPopupRef@@@@QEAA@XZ 0000000140066d60 f i fall.obj\n  698   0001:00065d60       ??1?$ImVector@UImDrawVert@@@@QEAA@XZ 0000000140066d60 f i fall.obj\n  699   0001:00065d60       ??1?$ImVector@UImDrawChannel@@@@QEAA@XZ 0000000140066d60 f i fall.obj\n  700   0001:00065d60       ??1?$ImVector@UImFontConfig@@@@QEAA@XZ 0000000140066d60 f i fall.obj\n  701:  0001:00065d60       ??1?$ImVector@UImGuiGroupData@@@@QEAA@XZ 0000000140066d60 f i fall.obj\n  702   0001:00065d60       ??1?$ImVector@Ustbrp_rect@@@@QEAA@XZ 0000000140066d60 f i fall.obj\n  703   0001:00065d60       ??1?$ImVector@M@@QEAA@XZ   0000000140066d60 f i fall.obj\n  704:  0001:00065d60       ??1?$ImVector@UImGuiIniData@@@@QEAA@XZ 0000000140066d60 f i fall.obj\n  705:  0001:00065d60       ??1?$ImVector@UPair@ImGuiStorage@@@@QEAA@XZ 0000000140066d60 f i fall.obj\n  706:  0001:00065d60       ??1?$ImVector@UImGuiColumnData@@@@QEAA@XZ 0000000140066d60 f i fall.obj\n  707:  0001:00065d60       ??1?$ImVector@UImGuiStyleMod@@@@QEAA@XZ 0000000140066d60 f i fall.obj\n  708   0001:00065d60       ??1?$ImVector@D@@QEAA@XZ   0000000140066d60 f i fall.obj\n  709   0001:00065d60       ??1?$ImVector@G@@QEAA@XZ   0000000140066d60 f i fall.obj\n  710   0001:00065d60       ??1?$ImVector@UImDrawCmd@@@@QEAA@XZ 0000000140066d60 f i fall.obj\n  711:  0001:00065d60       ??1?$ImVector@PEAUImGuiWindow@@@@QEAA@XZ 0000000140066d60 f i fall.obj\n  712   0001:00065d60       ??1?$ImVector@UImVec4@@@@QEAA@XZ 0000000140066d60 f i fall.obj\n  713   0001:00065d60       ??1?$ImVector@UGlyph@ImFont@@@@QEAA@XZ 0000000140066d60 f i fall.obj\n  ...\n  715   0001:00065d60       ??1?$ImVector@_N@@QEAA@XZ  0000000140066d60 f i fall.obj\n  716   0001:00065d90       ??1ImDrawList@@QEAA@XZ     0000000140066d90 f i fall.obj\n  717:  0001:00065e20       ??1ImGuiContext@@QEAA@XZ   0000000140066e20 f i fall.obj\n  718:  0001:00065f50       ??1ImGuiDrawContext@@QEAA@XZ 0000000140066f50 f i fall.obj\n  719:  0001:00065fe0       ??1ImGuiListClipper@@QEAA@XZ 0000000140066fe0 f i fall.obj\n  720:  0001:00066020       ??1ImGuiStorage@@QEAA@XZ   0000000140067020 f i fall.obj\n  721:  0001:00066020       ??1ImGuiTextBuffer@@QEAA@XZ 0000000140067020 f i fall.obj\n  722:  0001:00066040       ??1ImGuiTextEditState@@QEAA@XZ 0000000140067040 f i fall.obj\n  723   0001:00066090       ??2@YAPEAX_KUImPlacementNewDummy@@PEAX@Z 0000000140067090 f i fall.obj\n  724   0001:000660b0       ??A?$ImVector@D@@QEAAAEADH@Z 00000001400670b0 f i fall.obj\n  725   0001:00066100       ??A?$ImVector@G@@QEAAAEAGH@Z 0000000140067100 f i fall.obj\n  726   0001:00066150       ??A?$ImVector@G@@QEBAAEBGH@Z 0000000140067150 f i fall.obj\n  727:  0001:000661a0       ??A?$ImVector@UImGuiColumnData@@@@QEAAAEAUImGuiColumnData@@H@Z 00000001400671a0 f i fall.obj\n  728   0001:000661a0       ??A?$ImVector@M@@QEAAAEAMH@Z 00000001400671a0 f i fall.obj\n  729   0001:000661f0       ??A?$ImVector@M@@QEBAAEBMH@Z 00000001400671f0 f i fall.obj\n  730   0001:00066240       ??A?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@H@Z 0000000140067240 f i fall.obj\n  731   0001:00066240       ??A?$ImVector@PEAUImDrawList@@@@QEAAAEAPEAUImDrawList@@H@Z 0000000140067240 f i fall.obj\n  732:  0001:00066240       ??A?$ImVector@PEAUImGuiWindow@@@@QEAAAEAPEAUImGuiWindow@@H@Z 0000000140067240 f i fall.obj\n  733   0001:00066290       ??A?$ImVector@UGlyph@ImFont@@@@QEAAAEAUGlyph@ImFont@@H@Z 0000000140067290 f i fall.obj\n  734   0001:000662e0       ??A?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@H@Z 00000001400672e0 f i fall.obj\n  ...\n  736   0001:00066380       ??A?$ImVector@UImDrawVert@@@@QEAAAEAUImDrawVert@@H@Z 0000000140067380 f i fall.obj\n  737   0001:000663d0       ??A?$ImVector@UImFontConfig@@@@QEAAAEAUImFontConfig@@H@Z 00000001400673d0 f i fall.obj\n  738:  0001:00066420       ??A?$ImVector@UImGuiIniData@@@@QEAAAEAUImGuiIniData@@H@Z 0000000140067420 f i fall.obj\n  739:  0001:00066470       ??A?$ImVector@UImGuiPopupRef@@@@QEAAAEAUImGuiPopupRef@@H@Z 0000000140067470 f i fall.obj\n  740   0001:00066470       ??A?$ImVector@UImDrawChannel@@@@QEAAAEAUImDrawChannel@@H@Z 0000000140067470 f i fall.obj\n  741:  0001:000664c0       ??A?$ImVector@UPair@ImGuiStorage@@@@QEAAAEAUPair@ImGuiStorage@@H@Z 00000001400674c0 f i fall.obj\n  742:  0001:000664c0       ??A?$ImVector@UTextRange@ImGuiTextFilter@@@@QEAAAEAUTextRange@ImGuiTextFilter@@H@Z 00000001400674c0 f i fall.obj\n  743   0001:000664c0       ??A?$ImVector@Ustbrp_rect@@@@QEAAAEAUstbrp_rect@@H@Z 00000001400674c0 f i fall.obj\n  744:  0001:00066510       ??A?$ImVector@UTextRange@ImGuiTextFilter@@@@QEBAAEBUTextRange@ImGuiTextFilter@@H@Z 0000000140067510 f i fall.obj\n  745   0001:00066560       ??BImColor@@QEBA?AUImVec4@@XZ 0000000140067560 f i fall.obj\n  746   0001:00066590       ??_GImDrawList@@QEAAPEAXI@Z 0000000140067590 f i fall.obj\n  747   0001:000665d0       ??_GImFont@@QEAAPEAXI@Z    00000001400675d0 f i fall.obj\n  748:  0001:00066610       ??_GImGuiContext@@QEAAPEAXI@Z 0000000140067610 f i fall.obj\n  749:  0001:00066650       ??_GImGuiTextBuffer@@QEAAPEAXI@Z 0000000140067650 f i fall.obj\n  750:  0001:00066690       ??_GImGuiWindow@@QEAAPEAXI@Z 0000000140067690 f i fall.obj\n  751   0001:000666d0       ??_H@YAXPEAX_K1P6APEAX0@Z@Z 00000001400676d0 f i fall.obj\n  752   0001:00066730       ??_I@YAXPEAX_K1P6AX0@Z@Z   0000000140067730 f i fall.obj\n  753   0001:000667b0       ?Add@ImRect@@QEAAXAEBU1@@Z 00000001400677b0 f i fall.obj\n  754   0001:00066860       ?Add@ImRect@@QEAAXAEBUImVec2@@@Z 0000000140067860 f i fall.obj\n  755:  0001:00066910       ?CalcFontSize@ImGuiWindow@@QEBAMXZ 0000000140067910 f i fall.obj\n  756:  0001:00066940       ?ClearSelection@ImGuiTextEditState@@QEAAXXZ 0000000140067940 f i fall.obj\n  757   0001:00066970       ?Clip@ImRect@@QEAAXAEBU1@@Z 0000000140067970 f i fall.obj\n  758   0001:00066a20       ?Contains@ImRect@@QEBA_NAEBUImVec2@@@Z 0000000140067a20 f i fall.obj\n  759:  0001:00066aa0       ?CursorAnimReset@ImGuiTextEditState@@QEAAXXZ 0000000140067aa0 f i fall.obj\n  760:  0001:00066ac0       ?CursorClamp@ImGuiTextEditState@@QEAAXXZ 0000000140067ac0 f i fall.obj\n  761   0001:00066b30       ?Expand@ImRect@@QEAAXM@Z   0000000140067b30 f i fall.obj\n  762   0001:00066bb0       ?Floor@ImRect@@QEAAXXZ     0000000140067bb0 f i fall.obj\n  ...\n  766   0001:00066cf0       ?GetCharAdvance@ImFont@@QEBAMG@Z 0000000140067cf0 f i fall.obj\n  767   0001:00066d50       ?GetClosestPoint@ImRect@@QEBA?AUImVec2@@U2@_N@Z 0000000140067d50 f i fall.obj\n  768:  0001:00066e40       ?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ 0000000140067e40 f i fall.obj\n  769:  0001:00066e80       ?GetCurrentWindowRead@ImGui@@YAPEAUImGuiWindow@@XZ 0000000140067e80 f i fall.obj\n  770   0001:00066ea0       ?GetHeight@ImRect@@QEBAMXZ 0000000140067ea0 f i fall.obj\n  771   0001:00066ec0       ?GetSize@ImRect@@QEBA?AUImVec2@@XZ 0000000140067ec0 f i fall.obj\n  772   0001:00066f10       ?GetTL@ImRect@@QEBA?AUImVec2@@XZ 0000000140067f10 f i fall.obj\n  773   0001:00066f30       ?GetTR@ImRect@@QEBA?AUImVec2@@XZ 0000000140067f30 f i fall.obj\n  774:  0001:00066f70       ?GetVarPtr@ImGuiStyleVarInfo@@QEBAPEAXXZ 0000000140067f70 f i fall.obj\n  775   0001:00066f90       ?GetWidth@ImRect@@QEBAMXZ  0000000140067f90 f i fall.obj\n  776:  0001:00066fb0       ?HasSelection@ImGuiTextEditState@@QEBA_NXZ 0000000140067fb0 f i fall.obj\n  777   0001:00066ff0       ?IsLoaded@ImFont@@QEBA_NXZ 0000000140067ff0 f i fall.obj\n  778:  0001:00067020       ?MenuBarHeight@ImGuiWindow@@QEBAMXZ 0000000140068020 f i fall.obj\n  779:  0001:00067080       ?MenuBarRect@ImGuiWindow@@QEBA?AUImRect@@XZ 0000000140068080 f i fall.obj\n  780   0001:00067aa0       ?Overlaps@ImRect@@QEBA_NAEBU1@@Z 0000000140068aa0 f i fall.obj\n  781   0001:00067b20       ?PathClear@ImDrawList@@QEAAXXZ 0000000140068b20 f i fall.obj\n  ...\n  785   0001:00067c40       ?PrimWriteIdx@ImDrawList@@QEAAXG@Z 0000000140068c40 f i fall.obj\n  786   0001:00067c80       ?PrimWriteVtx@ImDrawList@@QEAAXAEBUImVec2@@0I@Z 0000000140068c80 f i fall.obj\n  787:  0001:00067d00       ?Rect@ImGuiWindow@@QEBA?AUImRect@@XZ 0000000140068d00 f i fall.obj\n  788   0001:00067d70       ?Reduce@ImRect@@QEAAXAEBUImVec2@@@Z 0000000140068d70 f i fall.obj\n  789:  0001:00067df0       ?SelectAll@ImGuiTextEditState@@QEAAXXZ 0000000140068df0 f i fall.obj\n  790   0001:00067e30       ?StringCbLengthA@@YAJPEBD_KPEA_K@Z 0000000140068e30 f i fall.obj\n  791   0001:00067ec0       ?StringCbPrintfA@@YAJPEAD_KPEBDZZ 0000000140068ec0 f i fall.obj\n  792   0001:00067f60       ?StringCbVPrintfA@@YAJPEAD_KPEBD0@Z 0000000140068f60 f i fall.obj\n  793:  0001:00067ff0       ?TitleBarHeight@ImGuiWindow@@QEBAMXZ 0000000140068ff0 f i fall.obj\n  794:  0001:00068050       ?TitleBarRect@ImGuiWindow@@QEBA?AUImRect@@XZ 0000000140069050 f i fall.obj\n  795   0001:000680c0       ?_grow_capacity@?$ImVector@D@@QEAAHH@Z 00000001400690c0 f i fall.obj\n  796:  0001:000680c0       ?_grow_capacity@?$ImVector@UImGuiIniData@@@@QEAAHH@Z 00000001400690c0 f i fall.obj\n  797:  0001:000680c0       ?_grow_capacity@?$ImVector@PEAUImGuiWindow@@@@QEAAHH@Z 00000001400690c0 f i fall.obj\n  798   0001:000680c0       ?_grow_capacity@?$ImVector@_N@@QEAAHH@Z 00000001400690c0 f i fall.obj\n  799:  0001:000680c0       ?_grow_capacity@?$ImVector@UImGuiGroupData@@@@QEAAHH@Z 00000001400690c0 f i fall.obj\n  800   0001:000680c0       ?_grow_capacity@?$ImVector@I@@QEAAHH@Z 00000001400690c0 f i fall.obj\n  801:  0001:000680c0       ?_grow_capacity@?$ImVector@UImGuiColMod@@@@QEAAHH@Z 00000001400690c0 f i fall.obj\n  802   0001:000680c0       ?_grow_capacity@?$ImVector@UGlyph@ImFont@@@@QEAAHH@Z 00000001400690c0 f i fall.obj\n  803:  0001:000680c0       ?_grow_capacity@?$ImVector@UImGuiColumnData@@@@QEAAHH@Z 00000001400690c0 f i fall.obj\n  804   0001:000680c0       ?_grow_capacity@?$ImVector@Ustbrp_rect@@@@QEAAHH@Z 00000001400690c0 f i fall.obj\n  805   0001:000680c0       ?_grow_capacity@?$ImVector@UImVec2@@@@QEAAHH@Z 00000001400690c0 f i fall.obj\n  806   0001:000680c0       ?_grow_capacity@?$ImVector@UImDrawCmd@@@@QEAAHH@Z 00000001400690c0 f i fall.obj\n  807   0001:000680c0       ?_grow_capacity@?$ImVector@PEAUImDrawList@@@@QEAAHH@Z 00000001400690c0 f i fall.obj\n  808:  0001:000680c0       ?_grow_capacity@?$ImVector@UTextRange@ImGuiTextFilter@@@@QEAAHH@Z 00000001400690c0 f i fall.obj\n  809   0001:000680c0       ?_grow_capacity@?$ImVector@UImDrawChannel@@@@QEAAHH@Z 00000001400690c0 f i fall.obj\n  810:  0001:000680c0       ?_grow_capacity@?$ImVector@UImGuiPopupRef@@@@QEAAHH@Z 00000001400690c0 f i fall.obj\n  811   0001:000680c0       ?_grow_capacity@?$ImVector@PEAX@@QEAAHH@Z 00000001400690c0 f i fall.obj\n  812   0001:000680c0       ?_grow_capacity@?$ImVector@UImVec4@@@@QEAAHH@Z 00000001400690c0 f i fall.obj\n  ...\n  815   0001:000680c0       ?_grow_capacity@?$ImVector@UImDrawVert@@@@QEAAHH@Z 00000001400690c0 f i fall.obj\n  816   0001:000680c0       ?_grow_capacity@?$ImVector@UImFontConfig@@@@QEAAHH@Z 00000001400690c0 f i fall.obj\n  817:  0001:000680c0       ?_grow_capacity@?$ImVector@UImGuiStyleMod@@@@QEAAHH@Z 00000001400690c0 f i fall.obj\n  818   0001:000680c0       ?_grow_capacity@?$ImVector@PEAUImFont@@@@QEAAHH@Z 00000001400690c0 f i fall.obj\n  819   0001:00068130       ?back@?$ImVector@I@@QEAAAEAIXZ 0000000140069130 f i fall.obj\n  ...\n  822   0001:000681d0       ?back@?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@XZ 00000001400691d0 f i fall.obj\n  823   0001:00068220       ?back@?$ImVector@UImFontConfig@@@@QEAAAEAUImFontConfig@@XZ 0000000140069220 f i fall.obj\n  824:  0001:00068270       ?back@?$ImVector@UImGuiColMod@@@@QEAAAEAUImGuiColMod@@XZ 0000000140069270 f i fall.obj\n  825:  0001:000682c0       ?back@?$ImVector@UImGuiGroupData@@@@QEAAAEAUImGuiGroupData@@XZ 00000001400692c0 f i fall.obj\n  826:  0001:00068310       ?back@?$ImVector@UImGuiIniData@@@@QEAAAEAUImGuiIniData@@XZ 0000000140069310 f i fall.obj\n  827:  0001:00068360       ?back@?$ImVector@UImGuiStyleMod@@@@QEAAAEAUImGuiStyleMod@@XZ 0000000140069360 f i fall.obj\n  828   0001:000683b0       ?back@?$ImVector@UImVec2@@@@QEAAAEAUImVec2@@XZ 00000001400693b0 f i fall.obj\n  829:  0001:000683b0       ?back@?$ImVector@PEAUImGuiWindow@@@@QEAAAEAPEAUImGuiWindow@@XZ 00000001400693b0 f i fall.obj\n  830   0001:000683b0       ?back@?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@XZ 00000001400693b0 f i fall.obj\n  831   0001:000683b0       ?back@?$ImVector@PEAX@@QEAAAEAPEAXXZ 00000001400693b0 f i fall.obj\n  832   0001:00068400       ?back@?$ImVector@UImVec4@@@@QEAAAEAUImVec4@@XZ 0000000140069400 f i fall.obj\n  833   0001:00068450       ?back@?$ImVector@_N@@QEAAAEA_NXZ 0000000140069450 f i fall.obj\n  834:  0001:000684a0       ?begin@ImGuiTextBuffer@@QEBAPEBDXZ 00000001400694a0 f i fall.obj\n  835:  0001:000684c0       ?begin@TextRange@ImGuiTextFilter@@QEBAPEBDXZ 00000001400694c0 f i fall.obj\n  836   0001:000684d0       ?clear@?$ImVector@UImDrawVert@@@@QEAAXXZ 00000001400694d0 f i fall.obj\n  837   0001:000684d0       ?clear@?$ImVector@PEAX@@QEAAXXZ 00000001400694d0 f i fall.obj\n  ...\n  841   0001:000684d0       ?clear@?$ImVector@UGlyph@ImFont@@@@QEAAXXZ 00000001400694d0 f i fall.obj\n  842   0001:000684d0       ?clear@?$ImVector@G@@QEAAXXZ 00000001400694d0 f i fall.obj\n  843:  0001:000684d0       ?clear@?$ImVector@UImGuiPopupRef@@@@QEAAXXZ 00000001400694d0 f i fall.obj\n  844   0001:000684d0       ?clear@?$ImVector@UImFontConfig@@@@QEAAXXZ 00000001400694d0 f i fall.obj\n  845   0001:000684d0       ?clear@?$ImVector@D@@QEAAXXZ 00000001400694d0 f i fall.obj\n  846   0001:000684d0       ?clear@?$ImVector@M@@QEAAXXZ 00000001400694d0 f i fall.obj\n  847:  0001:000684d0       ?clear@?$ImVector@UImGuiStyleMod@@@@QEAAXXZ 00000001400694d0 f i fall.obj\n  848:  0001:000684d0       ?clear@?$ImVector@PEAUImGuiWindow@@@@QEAAXXZ 00000001400694d0 f i fall.obj\n  849:  0001:000684d0       ?clear@?$ImVector@UImGuiColMod@@@@QEAAXXZ 00000001400694d0 f i fall.obj\n  850   0001:000684d0       ?clear@?$ImVector@PEAUImFont@@@@QEAAXXZ 00000001400694d0 f i fall.obj\n  851:  0001:000684d0       ?clear@?$ImVector@UImGuiIniData@@@@QEAAXXZ 00000001400694d0 f i fall.obj\n  852:  0001:000684d0       ?clear@?$ImVector@UPair@ImGuiStorage@@@@QEAAXXZ 00000001400694d0 f i fall.obj\n  853   0001:000684d0       ?clear@?$ImVector@UImDrawCmd@@@@QEAAXXZ 00000001400694d0 f i fall.obj\n  854   0001:000684d0       ?clear@?$ImVector@UImVec2@@@@QEAAXXZ 00000001400694d0 f i fall.obj\n  855:  0001:00068520       ?clear@ImGuiTextBuffer@@QEAAXXZ 0000000140069520 f i fall.obj\n  856   0001:00068560       ?empty@?$ImVector@PEAX@@QEBA_NXZ 0000000140069560 f i fall.obj\n  857:  0001:00068560       ?empty@?$ImVector@UImGuiPopupRef@@@@QEBA_NXZ 0000000140069560 f i fall.obj\n  858   0001:00068560       ?empty@?$ImVector@PEAUImDrawList@@@@QEBA_NXZ 0000000140069560 f i fall.obj\n  859   0001:00068560       ?empty@?$ImVector@G@@QEBA_NXZ 0000000140069560 f i fall.obj\n  860:  0001:00068560       ?empty@?$ImVector@UImGuiIniData@@@@QEBA_NXZ 0000000140069560 f i fall.obj\n  861   0001:00068560       ?empty@?$ImVector@M@@QEBA_NXZ 0000000140069560 f i fall.obj\n  862   0001:00068560       ?empty@?$ImVector@UImDrawCmd@@@@QEBA_NXZ 0000000140069560 f i fall.obj\n  863   0001:00068560       ?empty@?$ImVector@UImDrawVert@@@@QEBA_NXZ 0000000140069560 f i fall.obj\n  864   0001:00068560       ?empty@?$ImVector@_N@@QEBA_NXZ 0000000140069560 f i fall.obj\n  865:  0001:00068560       ?empty@?$ImVector@UTextRange@ImGuiTextFilter@@@@QEBA_NXZ 0000000140069560 f i fall.obj\n  866   0001:00068560       ?empty@?$ImVector@UImFontConfig@@@@QEBA_NXZ 0000000140069560 f i fall.obj\n  867:  0001:00068560       ?empty@?$ImVector@PEAUImGuiWindow@@@@QEBA_NXZ 0000000140069560 f i fall.obj\n  868   0001:00068560       ?empty@?$ImVector@UGlyph@ImFont@@@@QEBA_NXZ 0000000140069560 f i fall.obj\n  869:  0001:00068560       ?empty@?$ImVector@UImGuiGroupData@@@@QEBA_NXZ 0000000140069560 f i fall.obj\n  870   0001:00068560       ?empty@?$ImVector@PEAUImFont@@@@QEBA_NXZ 0000000140069560 f i fall.obj\n  871:  0001:00068590       ?empty@TextRange@ImGuiTextFilter@@QEBA_NXZ 0000000140069590 f i fall.obj\n  872   0001:000685d0       ?end@?$ImVector@UImDrawCmd@@@@QEAAPEAUImDrawCmd@@XZ 00000001400695d0 f i fall.obj\n  873:  0001:000685f0       ?end@?$ImVector@UPair@ImGuiStorage@@@@QEAAPEAUPair@ImGuiStorage@@XZ 00000001400695f0 f i fall.obj\n  874:  0001:000685f0       ?end@?$ImVector@UPair@ImGuiStorage@@@@QEBAPEBUPair@ImGuiStorage@@XZ 00000001400695f0 f i fall.obj\n  875:  0001:00068610       ?end@TextRange@ImGuiTextFilter@@QEBAPEBDXZ 0000000140069610 f i fall.obj\n  876:  0001:00068610       ?begin@?$ImVector@UPair@ImGuiStorage@@@@QEAAPEAUPair@ImGuiStorage@@XZ 0000000140069610 f i fall.obj\n  877:  0001:00068610       ?begin@?$ImVector@PEAUImGuiWindow@@@@QEAAPEAPEAUImGuiWindow@@XZ 0000000140069610 f i fall.obj\n  878   0001:00068610       ?begin@?$ImVector@UImDrawCmd@@@@QEAAPEAUImDrawCmd@@XZ 0000000140069610 f i fall.obj\n  879   0001:00068610       ?begin@?$ImVector@D@@QEAAPEADXZ 0000000140069610 f i fall.obj\n  880:  0001:00068620       ?erase@?$ImVector@PEAUImGuiWindow@@@@QEAAPEAPEAUImGuiWindow@@PEBQEAU2@@Z 0000000140069620 f i fall.obj\n  881   0001:00068710       ?front@?$ImVector@D@@QEBAAEBDXZ 0000000140069710 f i fall.obj\n  882:  0001:00068760       ?front@TextRange@ImGuiTextFilter@@QEBADXZ 0000000140069760 f i fall.obj\n  883:  0001:00068780       ?insert@?$ImVector@PEAUImGuiWindow@@@@QEAAPEAPEAUImGuiWindow@@PEBQEAU2@AEBQEAU2@@Z 0000000140069780 f i fall.obj\n  884:  0001:000688e0       ?insert@?$ImVector@UPair@ImGuiStorage@@@@QEAAPEAUPair@ImGuiStorage@@PEBU23@AEBU23@@Z 00000001400698e0 f i fall.obj\n  885:  0001:00068a40       ?is_blank@TextRange@ImGuiTextFilter@@SA_ND@Z 0000000140069a40 f i fall.obj\n  886:  0001:00068a80       ?pop_back@?$ImVector@UImGuiStyleMod@@@@QEAAXXZ 0000000140069a80 f i fall.obj\n  887:  0001:00068a80       ?pop_back@?$ImVector@UImGuiGroupData@@@@QEAAXXZ 0000000140069a80 f i fall.obj\n  888:  0001:00068a80       ?pop_back@?$ImVector@PEAUImGuiWindow@@@@QEAAXXZ 0000000140069a80 f i fall.obj\n  889   0001:00068a80       ?pop_back@?$ImVector@PEAX@@QEAAXXZ 0000000140069a80 f i fall.obj\n  890   0001:00068a80       ?pop_back@?$ImVector@UImVec4@@@@QEAAXXZ 0000000140069a80 f i fall.obj\n  891:  0001:00068a80       ?pop_back@?$ImVector@UImGuiColMod@@@@QEAAXXZ 0000000140069a80 f i fall.obj\n  892   0001:00068a80       ?pop_back@?$ImVector@_N@@QEAAXXZ 0000000140069a80 f i fall.obj\n  893   0001:00068a80       ?pop_back@?$ImVector@M@@QEAAXXZ 0000000140069a80 f i fall.obj\n  894:  0001:00068a80       ?pop_back@?$ImVector@UImGuiPopupRef@@@@QEAAXXZ 0000000140069a80 f i fall.obj\n  895   0001:00068a80       ?pop_back@?$ImVector@PEAUImFont@@@@QEAAXXZ 0000000140069a80 f i fall.obj\n  896   0001:00068a80       ?pop_back@?$ImVector@UImDrawCmd@@@@QEAAXXZ 0000000140069a80 f i fall.obj\n  ...\n  903   0001:00068c40       ?push_back@?$ImVector@PEAX@@QEAAXAEBQEAX@Z 0000000140069c40 f i fall.obj\n  904   0001:00068c40       ?push_back@?$ImVector@PEAUImDrawList@@@@QEAAXAEBQEAUImDrawList@@@Z 0000000140069c40 f i fall.obj\n  905:  0001:00068c40       ?push_back@?$ImVector@PEAUImGuiWindow@@@@QEAAXAEBQEAUImGuiWindow@@@Z 0000000140069c40 f i fall.obj\n  906   0001:00068cc0       ?push_back@?$ImVector@UImDrawCmd@@@@QEAAXAEBUImDrawCmd@@@Z 0000000140069cc0 f i fall.obj\n  907   0001:00068d40       ?push_back@?$ImVector@UImFontConfig@@@@QEAAXAEBUImFontConfig@@@Z 0000000140069d40 f i fall.obj\n  908:  0001:00068dc0       ?push_back@?$ImVector@UImGuiColMod@@@@QEAAXAEBUImGuiColMod@@@Z 0000000140069dc0 f i fall.obj\n  909:  0001:00068e40       ?push_back@?$ImVector@UImGuiPopupRef@@@@QEAAXAEBUImGuiPopupRef@@@Z 0000000140069e40 f i fall.obj\n  910:  0001:00068ec0       ?push_back@?$ImVector@UImGuiStyleMod@@@@QEAAXAEBUImGuiStyleMod@@@Z 0000000140069ec0 f i fall.obj\n  911   0001:00068f40       ?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z 0000000140069f40 f i fall.obj\n  912:  0001:00068fc0       ?push_back@?$ImVector@UTextRange@ImGuiTextFilter@@@@QEAAXAEBUTextRange@ImGuiTextFilter@@@Z 0000000140069fc0 f i fall.obj\n  913   0001:00068fc0       ?push_back@?$ImVector@Ustbrp_rect@@@@QEAAXAEBUstbrp_rect@@@Z 0000000140069fc0 f i fall.obj\n  914   0001:00068fc0       ?push_back@?$ImVector@UImVec4@@@@QEAAXAEBUImVec4@@@Z 0000000140069fc0 f i fall.obj\n  ...\n  918   0001:00069160       ?reserve@?$ImVector@I@@QEAAXH@Z 000000014006a160 f i fall.obj\n  919   0001:00069160       ?reserve@?$ImVector@M@@QEAAXH@Z 000000014006a160 f i fall.obj\n  920:  0001:00069160       ?reserve@?$ImVector@UImGuiColumnData@@@@QEAAXH@Z 000000014006a160 f i fall.obj\n  921   0001:000691f0       ?reserve@?$ImVector@PEAUImFont@@@@QEAAXH@Z 000000014006a1f0 f i fall.obj\n  922:  0001:000691f0       ?reserve@?$ImVector@PEAUImGuiWindow@@@@QEAAXH@Z 000000014006a1f0 f i fall.obj\n  923   0001:000691f0       ?reserve@?$ImVector@UImVec2@@@@QEAAXH@Z 000000014006a1f0 f i fall.obj\n  924   0001:000691f0       ?reserve@?$ImVector@PEAUImDrawList@@@@QEAAXH@Z 000000014006a1f0 f i fall.obj\n  ...\n  927   0001:00069310       ?reserve@?$ImVector@UImDrawCmd@@@@QEAAXH@Z 000000014006a310 f i fall.obj\n  928   0001:000693a0       ?reserve@?$ImVector@UImFontConfig@@@@QEAAXH@Z 000000014006a3a0 f i fall.obj\n  929:  0001:00069430       ?reserve@?$ImVector@UImGuiColMod@@@@QEAAXH@Z 000000014006a430 f i fall.obj\n  930   0001:00069430       ?reserve@?$ImVector@UImDrawVert@@@@QEAAXH@Z 000000014006a430 f i fall.obj\n  931:  0001:000694c0       ?reserve@?$ImVector@UImGuiGroupData@@@@QEAAXH@Z 000000014006a4c0 f i fall.obj\n  932:  0001:00069550       ?reserve@?$ImVector@UImGuiIniData@@@@QEAAXH@Z 000000014006a550 f i fall.obj\n  933:  0001:000695e0       ?reserve@?$ImVector@UImGuiPopupRef@@@@QEAAXH@Z 000000014006a5e0 f i fall.obj\n  934   0001:000695e0       ?reserve@?$ImVector@UImDrawChannel@@@@QEAAXH@Z 000000014006a5e0 f i fall.obj\n  935:  0001:00069670       ?reserve@?$ImVector@UImGuiStyleMod@@@@QEAAXH@Z 000000014006a670 f i fall.obj\n  936:  0001:00069700       ?reserve@?$ImVector@UPair@ImGuiStorage@@@@QEAAXH@Z 000000014006a700 f i fall.obj\n  937   0001:00069700       ?reserve@?$ImVector@Ustbrp_rect@@@@QEAAXH@Z 000000014006a700 f i fall.obj\n  938:  0001:00069700       ?reserve@?$ImVector@UTextRange@ImGuiTextFilter@@@@QEAAXH@Z 000000014006a700 f i fall.obj\n  939   0001:00069700       ?reserve@?$ImVector@UImVec4@@@@QEAAXH@Z 000000014006a700 f i fall.obj\n  940   0001:00069790       ?resize@?$ImVector@D@@QEAAXH@Z 000000014006a790 f i fall.obj\n  941   0001:00069790       ?resize@?$ImVector@_N@@QEAAXH@Z 000000014006a790 f i fall.obj\n  942   0001:000697e0       ?resize@?$ImVector@G@@QEAAXH@Z 000000014006a7e0 f i fall.obj\n  943:  0001:00069830       ?resize@?$ImVector@UImGuiColumnData@@@@QEAAXH@Z 000000014006a830 f i fall.obj\n  944   0001:00069830       ?resize@?$ImVector@M@@QEAAXH@Z 000000014006a830 f i fall.obj\n  945   0001:00069830       ?resize@?$ImVector@I@@QEAAXH@Z 000000014006a830 f i fall.obj\n  ...\n  947   0001:000698d0       ?resize@?$ImVector@UImDrawCmd@@@@QEAAXH@Z 000000014006a8d0 f i fall.obj\n  948   0001:00069920       ?resize@?$ImVector@UImDrawVert@@@@QEAAXH@Z 000000014006a920 f i fall.obj\n  949:  0001:00069970       ?resize@?$ImVector@UImGuiGroupData@@@@QEAAXH@Z 000000014006a970 f i fall.obj\n  950:  0001:000699c0       ?resize@?$ImVector@UImGuiIniData@@@@QEAAXH@Z 000000014006a9c0 f i fall.obj\n  951   0001:00069a10       ?resize@?$ImVector@UImDrawChannel@@@@QEAAXH@Z 000000014006aa10 f i fall.obj\n  952:  0001:00069a10       ?resize@?$ImVector@UImGuiPopupRef@@@@QEAAXH@Z 000000014006aa10 f i fall.obj\n  953:  0001:00069a60       ?resize@?$ImVector@PEAUImGuiWindow@@@@QEAAXH@Z 000000014006aa60 f i fall.obj\n  954   0001:00069a60       ?resize@?$ImVector@PEAUImDrawList@@@@QEAAXH@Z 000000014006aa60 f i fall.obj\n  955   0001:00069a60       ?resize@?$ImVector@PEAX@@QEAAXH@Z 000000014006aa60 f i fall.obj\n  956   0001:00069a60       ?resize@?$ImVector@UImVec2@@@@QEAAXH@Z 000000014006aa60 f i fall.obj\n  957   0001:00069ab0       ?resize@?$ImVector@UImVec4@@@@QEAAXH@Z 000000014006aab0 f i fall.obj\n  958:  0001:00069ab0       ?resize@?$ImVector@UTextRange@ImGuiTextFilter@@@@QEAAXH@Z 000000014006aab0 f i fall.obj\n  959:  0001:00069b00       ?size@ImGuiTextBuffer@@QEBAHXZ 000000014006ab00 f i fall.obj\n  960   0001:00069b10       ?strchr@@YAPEADQEADH@Z     000000014006ab10 f i fall.obj\n  961:  0001:00069b30       ?swap@?$ImVector@PEAUImGuiWindow@@@@QEAAXAEAV1@@Z 000000014006ab30 f i fall.obj\n  962   0001:00069b30       ?swap@?$ImVector@UImDrawVert@@@@QEAAXAEAV1@@Z 000000014006ab30 f i fall.obj\n  963:  0001:00069bc0       ?trim_blanks@TextRange@ImGuiTextFilter@@QEAAXXZ 000000014006abc0 f i fall.obj\n  964   0001:00069c50       _MallocaComputeSize        000000014006ac50 f i fall.obj\n  965   0001:00069c90       _MarkAllocaS               000000014006ac90 f i fall.obj\n  ...\n 2799   0002:000209e8       __IMPORT_DESCRIPTOR_KERNEL32 00000001400b39e8     kernel32:KERNEL32.dll\n 2800   0002:000209fc       __NULL_IMPORT_DESCRIPTOR   00000001400b39fc     user32:USER32.dll\n 2801:  0003:00000000       ?GImGui@@3PEAUImGuiContext@@EA 00000001400b5000     fall.obj\n 2802   0003:00000284       stbi_write_tga_with_rle    00000001400b5284     fall.obj\n 2803   0003:0000083c       __scrt_native_dllmain_reason 00000001400b583c     LIBCMT:utility.obj\n ....\n 3127   0001:00032500       ?GetDefaultFont@@YAPEAUImFont@@XZ 0000000140033500 f   fall.obj\n 3128   0001:00032570       ?SetCurrentFont@@YAXPEAUImFont@@@Z 0000000140033570 f   fall.obj\n 3129:  0001:000326b0       ?SetCurrentWindow@@YAXPEAUImGuiWindow@@@Z 00000001400336b0 f   fall.obj\n 3130:  0001:00032700       ?SetWindowScrollY@@YAXPEAUImGuiWindow@@M@Z 0000000140033700 f   fall.obj\n 3131:  0001:00032770       ?SetWindowPos@@YAXPEAUImGuiWindow@@AEBUImVec2@@H@Z 0000000140033770 f   fall.obj\n 3132:  0001:00032890       ?SetWindowSize@@YAXPEAUImGuiWindow@@AEBUImVec2@@H@Z 0000000140033890 f   fall.obj\n 3133:  0001:00032990       ?SetWindowCollapsed@@YAXPEAUImGuiWindow@@_NH@Z 0000000140033990 f   fall.obj\n 3134:  0001:000329f0       ?FindHoveredWindow@@YAPEAUImGuiWindow@@UImVec2@@_N@Z 00000001400339f0 f   fall.obj\n 3135:  0001:00032b30       ?CreateNewWindow@@YAPEAUImGuiWindow@@PEBDUImVec2@@H@Z 0000000140033b30 f   fall.obj\n 3136:  0001:00032ea0       ?IsWindowContentHoverable@@YA_NPEAUImGuiWindow@@@Z 0000000140033ea0 f   fall.obj\n 3137   0001:00032f30       ?ClearSetNextWindowData@@YAXXZ 0000000140033f30 f   fall.obj\n 3138:  0001:00032fa0       ?CheckStacksSize@@YAXPEAUImGuiWindow@@_N@Z 0000000140033fa0 f   fall.obj\n 3139:  0001:00033280       ?Scrollbar@@YAXPEAUImGuiWindow@@_N@Z 0000000140034280 f   fall.obj\n 3140   0001:00033e20       ?AddDrawListToRenderList@@YAXAEAV?$ImVector@PEAUImDrawList@@@@PEAUImDrawList@@@Z 0000000140034e20 f   fall.obj\n 3141:  0001:00033fe0       ?AddWindowToRenderList@@YAXAEAV?$ImVector@PEAUImDrawList@@@@PEAUImGuiWindow@@@Z 0000000140034fe0 f   fall.obj\n 3142:  0001:000340a0       ?AddWindowToSortedBuffer@@YAXAEAV?$ImVector@PEAUImGuiWindow@@@@PEAUImGuiWindow@@@Z 00000001400350a0 f   fall.obj\n 3143:  0001:00034190       ?FindWindowSettings@@YAPEAUImGuiIniData@@PEBD@Z 0000000140035190 f   fall.obj\n 3144:  0001:00034220       ?AddWindowSettings@@YAPEAUImGuiIniData@@PEBD@Z 0000000140035220 f   fall.obj\n 3145   0001:000342f0       ?LoadIniSettingsFromDisk@@YAXPEBD@Z 00000001400352f0 f   fall.obj\n 3146   0001:000345d0       ?SaveIniSettingsToDisk@@YAXPEBD@Z 00000001400355d0 f   fall.obj\n ....\n 3153   0001:00034df0       ?ClosePopup@@YAXI@Z        0000000140035df0 f   fall.obj\n 3154   0001:00034e40       ?IsPopupOpen@@YA_NI@Z      0000000140035e40 f   fall.obj\n 3155:  0001:00034ec0       ?GetFrontMostModalRootWindow@@YAPEAUImGuiWindow@@XZ 0000000140035ec0 f   fall.obj\n 3156   0001:00034f40       ?FindBestPopupWindowPos@@YA?AUImVec2@@AEBU1@0PEAHAEBUImRect@@@Z 0000000140035f40 f   fall.obj\n 3157:  0001:000353b0       ?InputTextFilterCharacter@@YA_NPEAIHP6AHPEAUImGuiTextEditCallbackData@@@ZPEAX@Z 00000001400363b0 f   fall.obj\n 3158   0001:00035620       ?InputTextCalcTextLenAndLineCount@@YAHPEBDPEAPEBD@Z 0000000140036620 f   fall.obj\n 3159   0001:000356e0       ?InputTextCalcTextSizeW@@YA?AUImVec2@@PEBG0PEAPEBGPEAU1@_N@Z 00000001400366e0 f   fall.obj\n 3160:  0001:000358d0       ?DataTypeFormatString@@YAXW4ImGuiDataType@@PEAXPEBDPEADH@Z 00000001400368d0 f   fall.obj\n 3161:  0001:00035950       ?DataTypeFormatString@@YAXW4ImGuiDataType@@PEAXHPEADH@Z 0000000140036950 f   fall.obj\n 3162:  0001:00035a30       ?DataTypeApplyOp@@YAXW4ImGuiDataType@@HPEAXPEBX@Z 0000000140036a30 f   fall.obj\n 3163:  0001:00035ae0       ?DataTypeApplyOpFromText@@YA_NPEBD0W4ImGuiDataType@@PEAX0@Z 0000000140036ae0 f   fall.obj\n 3164   0001:00035eb0       ?GetClipboardTextFn_DefaultImpl@@YAPEBDPEAX@Z 0000000140036eb0 f   fall.obj\n 3165   0001:00035fd0       ?SetClipboardTextFn_DefaultImpl@@YAXPEAXPEBD@Z 0000000140036fd0 f   fall.obj\n ....\n 3167   0001:00036170       ?ImTextCharToUtf8@@YAHPEADHI@Z 0000000140037170 f   fall.obj\n 3168   0001:00036340       ?ImTextCountUtf8BytesFromChar@@YAHI@Z 0000000140037340 f   fall.obj\n 3169:  0001:000363b0       ?LowerBound@@YAPEAUPair@ImGuiStorage@@AEAV?$ImVector@UPair@ImGuiStorage@@@@I@Z 00000001400373b0 f   fall.obj\n 3170   0001:00036480       ?SetCursorPosYAndSetupDummyPrevLine@@YAXMM@Z 0000000140037480 f   fall.obj\n 3171   0001:00036520       ?ChildWindowComparer@@YAHPEBX0@Z 0000000140037520 f   fall.obj\n 3172   0001:000365f0       ?BeginChildEx@@YA_NPEBDIAEBUImVec2@@_NH@Z 00000001400375f0 f   fall.obj\n 3173:  0001:00036820       ?ApplySizeFullWithConstraint@@YAXPEAUImGuiWindow@@UImVec2@@@Z 0000000140037820 f   fall.obj\n 3174:  0001:00036a10       ?GetStyleVarInfo@@YAPEBUImGuiStyleVarInfo@@H@Z 0000000140037a10 f   fall.obj\n 3175   0001:00036a60       ?SliderBehaviorCalcRatioFromValue@@YAMMMMMM@Z 0000000140037a60 f   fall.obj\n 3176   0001:00036c70       ?Plot_ArrayGetter@@YAMPEAXH@Z 0000000140037c70 f   fall.obj\n 3177:  0001:00036cc0       ?STB_TEXTEDIT_STRINGLEN@ImGuiStb@@YAHPEBUImGuiTextEditState@@@Z 0000000140037cc0 f   fall.obj\n 3178:  0001:00036ce0       ?STB_TEXTEDIT_GETCHAR@ImGuiStb@@YAGPEBUImGuiTextEditState@@H@Z 0000000140037ce0 f   fall.obj\n 3179:  0001:00036d10       ?STB_TEXTEDIT_GETWIDTH@ImGuiStb@@YAMPEAUImGuiTextEditState@@HH@Z 0000000140037d10 f   fall.obj\n 3180:  0001:00036db0       ?STB_TEXTEDIT_KEYTOTEXT@ImGuiStb@@YAHH@Z 0000000140037db0 f   fall.obj\n 3181:  0001:00036de0       ?STB_TEXTEDIT_LAYOUTROW@ImGuiStb@@YAXPEAUStbTexteditRow@1@PEAUImGuiTextEditState@@H@Z 0000000140037de0 f   fall.obj\n 3182:  0001:00036ed0       ?is_separator@ImGuiStb@@YA_NI@Z 0000000140037ed0 f   fall.obj\n 3183:  0001:00036f50       ?is_word_boundary_from_right@ImGuiStb@@YAHPEAUImGuiTextEditState@@H@Z 0000000140037f50 f   fall.obj\n 3184:  0001:00036ff0       ?STB_TEXTEDIT_MOVEWORDLEFT_IMPL@ImGuiStb@@YAHPEAUImGuiTextEditState@@H@Z 0000000140037ff0 f   fall.obj\n 3185:  0001:00037060       ?STB_TEXTEDIT_MOVEWORDRIGHT_IMPL@ImGuiStb@@YAHPEAUImGuiTextEditState@@H@Z 0000000140038060 f   fall.obj\n 3186:  0001:000370e0       ?STB_TEXTEDIT_DELETECHARS@ImGuiStb@@YAXPEAUImGuiTextEditState@@HH@Z 00000001400380e0 f   fall.obj\n 3187:  0001:000371d0       ?STB_TEXTEDIT_INSERTCHARS@ImGuiStb@@YA_NPEAUImGuiTextEditState@@HPEBGH@Z 00000001400381d0 f   fall.obj\n 3188:  0001:00037360       ?stb_text_locate_coord@ImGuiStb@@YAHPEAUImGuiTextEditState@@MM@Z 0000000140038360 f   fall.obj\n 3189:  0001:000375b0       ?stb_textedit_click@ImGuiStb@@YAXPEAUImGuiTextEditState@@PEAUSTB_TexteditState@1@MM@Z 00000001400385b0 f   fall.obj\n 3190:  0001:00037620       ?stb_textedit_drag@ImGuiStb@@YAXPEAUImGuiTextEditState@@PEAUSTB_TexteditState@1@MM@Z 0000000140038620 f   fall.obj\n 3191:  0001:000376a0       ?stb_text_undo@ImGuiStb@@YAXPEAUImGuiTextEditState@@PEAUSTB_TexteditState@1@@Z 00000001400386a0 f   fall.obj\n 3192:  0001:00037970       ?stb_text_redo@ImGuiStb@@YAXPEAUImGuiTextEditState@@PEAUSTB_TexteditState@1@@Z 0000000140038970 f   fall.obj\n 3193:  0001:00037bf0       ?stb_text_makeundo_delete@ImGuiStb@@YAXPEAUImGuiTextEditState@@PEAUSTB_TexteditState@1@HH@Z 0000000140038bf0 f   fall.obj\n 3194:  0001:00037c90       ?stb_text_makeundo_insert@ImGuiStb@@YAXPEAUSTB_TexteditState@1@HH@Z 0000000140038c90 f   fall.obj\n 3195:  0001:00037cd0       ?stb_text_makeundo_replace@ImGuiStb@@YAXPEAUImGuiTextEditState@@PEAUSTB_TexteditState@1@HHH@Z 0000000140038cd0 f   fall.obj\n 3196:  0001:00037d70       ?stb_textedit_find_charpos@ImGuiStb@@YAXPEAUStbFindState@1@PEAUImGuiTextEditState@@HH@Z 0000000140038d70 f   fall.obj\n 3197:  0001:00037ff0       ?stb_textedit_clamp@ImGuiStb@@YAXPEAUImGuiTextEditState@@PEAUSTB_TexteditState@1@@Z 0000000140038ff0 f   fall.obj\n 3198:  0001:000380a0       ?stb_textedit_delete@ImGuiStb@@YAXPEAUImGuiTextEditState@@PEAUSTB_TexteditState@1@HH@Z 00000001400390a0 f   fall.obj\n 3199:  0001:00038100       ?stb_textedit_delete_selection@ImGuiStb@@YAXPEAUImGuiTextEditState@@PEAUSTB_TexteditState@1@@Z 0000000140039100 f   fall.obj\n 3200:  0001:00038200       ?stb_textedit_sortselection@ImGuiStb@@YAXPEAUSTB_TexteditState@1@@Z 0000000140039200 f   fall.obj\n 3201:  0001:00038250       ?stb_textedit_move_to_first@ImGuiStb@@YAXPEAUSTB_TexteditState@1@@Z 0000000140039250 f   fall.obj\n 3202:  0001:000382b0       ?stb_textedit_move_to_last@ImGuiStb@@YAXPEAUImGuiTextEditState@@PEAUSTB_TexteditState@1@@Z 00000001400392b0 f   fall.obj\n 3203:  0001:00038320       ?stb_textedit_prep_selection_at_cursor@ImGuiStb@@YAXPEAUSTB_TexteditState@1@@Z 0000000140039320 f   fall.obj\n 3204:  0001:00038370       ?stb_textedit_cut@ImGuiStb@@YAHPEAUImGuiTextEditState@@PEAUSTB_TexteditState@1@@Z 0000000140039370 f   fall.obj\n 3205:  0001:000383c0       ?stb_textedit_paste@ImGuiStb@@YAHPEAUImGuiTextEditState@@PEAUSTB_TexteditState@1@PEBGH@Z 00000001400393c0 f   fall.obj\n 3206:  0001:000384a0       ?stb_textedit_key@ImGuiStb@@YAXPEAUImGuiTextEditState@@PEAUSTB_TexteditState@1@H@Z 00000001400394a0 f   fall.obj\n 3207   0001:00039450       $LN101                     000000014003a450     fall.obj\n 3208   0001:00039488       $LN100                     000000014003a488     fall.obj\n 3209:  0001:000394d0       ?stb_textedit_flush_redo@ImGuiStb@@YAXPEAUStbUndoState@1@@Z 000000014003a4d0 f   fall.obj\n 3210:  0001:00039500       ?stb_textedit_discard_undo@ImGuiStb@@YAXPEAUStbUndoState@1@@Z 000000014003a500 f   fall.obj\n 3211:  0001:00039680       ?stb_textedit_discard_redo@ImGuiStb@@YAXPEAUStbUndoState@1@@Z 000000014003a680 f   fall.obj\n 3212:  0001:00039870       ?stb_text_create_undo_record@ImGuiStb@@YAPEAUStbUndoRecord@1@PEAUStbUndoState@1@H@Z 000000014003a870 f   fall.obj\n 3213:  0001:00039940       ?stb_text_createundo@ImGuiStb@@YAPEAGPEAUStbUndoState@1@HHH@Z 000000014003a940 f   fall.obj\n 3214:  0001:00039a20       ?stb_textedit_clear_state@ImGuiStb@@YAXPEAUSTB_TexteditState@1@H@Z 000000014003aa20 f   fall.obj\n 3215:  0001:00039ad0       ?stb_textedit_initialize_state@ImGuiStb@@YAXPEAUSTB_TexteditState@1@H@Z 000000014003aad0 f   fall.obj\n 3216   0001:00039b00       ?Items_ArrayGetter@@YA_NPEAXHPEAPEBD@Z 000000014003ab00 f   fall.obj\n 3217   0001:00039b50       ?Items_SingleStringGetter@@YA_NPEAXHPEAPEBD@Z 000000014003ab50 f   fall.obj\n ....\n 3310   0001:00046590       ?stb_decompress_token@@YAPEAEPEAE@Z 0000000140047590 f   fall.obj\n 3311   0001:00046a90       ?stb_adler32@@YAIIPEAEI@Z  0000000140047a90 f   fall.obj\n 3312:  0001:00047470       ?ImGui_ImplSdlGL3_GetClipboardText@@YAPEBDPEAX@Z 0000000140048470 f   fall.obj\n 3313:  0001:00047490       ?ImGui_ImplSdlGL3_SetClipboardText@@YAXPEAXPEBD@Z 0000000140048490 f   fall.obj\n 3314   0001:000475e0       ?stbi__cpuid3@@YAHXZ       00000001400485e0 f   fall.obj\n 3315   0001:00047640       ?stbi__sse2_available@@YAHXZ 0000000140048640 f   fall.obj\n ....\n 3502   0001:0006422c       $LN52                      000000014006522c     fall.obj\n 3503   0001:00064248       $LN51                      0000000140065248     fall.obj\n 3504:  0001:00067110       ?NodeDrawList@Funcs@?4??ShowMetricsWindow@ImGui@@YAXPEA_N@Z@SAXPEAUImDrawList@@PEBD@Z 0000000140068110 f   fall.obj\n 3505:  0001:00067860       ?NodeWindow@Funcs@?4??ShowMetricsWindow@ImGui@@YAXPEA_N@Z@SAXPEAUImGuiWindow@@PEBD@Z 0000000140068860 f   fall.obj\n 3506:  0001:00067a20       ?NodeWindows@Funcs@?4??ShowMetricsWindow@ImGui@@YAXPEA_N@Z@SAXAEAV?$ImVector@PEAUImGuiWindow@@@@PEBD@Z 0000000140068a20 f   fall.obj\n 3507   0001:0006a78c       capture_current_context    000000014006b78c f   LIBCMT:gs_report.obj\n 3508   0001:0006a7fc       capture_previous_context   000000014006b7fc f   LIBCMT:gs_report.obj\n ....\n 4173   0002:00008a10       $SG124450                  000000014009ba10     fall.obj\n 4174   0002:00008ab0       $SG137765                  000000014009bab0     fall.obj\n 4175:  0002:00008ac0       ?GStyleVarInfo@@3QBUImGuiStyleVarInfo@@B 000000014009bac0     fall.obj\n 4176   0002:00008b20       $SG120360                  000000014009bb20     fall.obj\n 4177   0002:00008b50       $SG124458                  000000014009bb50     fall.obj\n ....\n 4624   0002:0000e718       $SG122862                  00000001400a1718     fall.obj\n 4625   0002:0000e738       $SG126975                  00000001400a1738     fall.obj\n 4626:  0002:0000e7f0       ?min_steps@?1??RoundScalar@ImGui@@YAMMH@Z@4QBMB 00000001400a17f0     fall.obj\n 4627   0002:0000e9fc       ?ranges@?1??GetGlyphRangesDefault@ImFontAtlas@@QEAAPEBGXZ@4QBGB 00000001400a19fc     fall.obj\n 4628   0002:0000ea08       ?ranges@?1??GetGlyphRangesKorean@ImFontAtlas@@QEAAPEBGXZ@4QBGB 00000001400a1a08     fall.obj\n ....\n 4887   0002:0001bcb8       __flag_x_nan               00000001400aecb8     libucrt:log10.obj\n 4888   0002:0001d1c0       $unwind$fabsf              00000001400b01c0     fall.obj\n 4889:  0002:0001d1c8       $unwind$??0ImGuiListClipper@@QEAA@HM@Z 00000001400b01c8     fall.obj\n 4890   0002:0001d1c8       $unwind$vfprintf           00000001400b01c8     fall.obj\n 4891   0002:0001d1d0       $unwind$sscanf             00000001400b01d0     fall.obj\n ....\n 4901   0002:0001d1d0       $unwind$_vfprintf_l        00000001400b01d0     fall.obj\n 4902   0002:0001d1d0       $unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z 00000001400b01d0     fall.obj\n 4903:  0002:0001d1d8       $unwind$?insert@?$ImVector@PEAUImGuiWindow@@@@QEAAPEAPEAUImGuiWindow@@PEBQEAU2@AEBQEAU2@@Z 00000001400b01d8     fall.obj\n 4904   0002:0001d1d8       $unwind$_vscprintf_l       00000001400b01d8     fall.obj\n 4905   0002:0001d1d8       $unwind$?StringCbLengthA@@YAJPEBD_KPEA_K@Z 00000001400b01d8     fall.obj\n 4906   0002:0001d1e0       $unwind$WinMain            00000001400b01e0     fall.obj\n 4907:  0002:0001d1f4       $unwind$?GetDrawData@ImGui@@YAPEAUImDrawData@@XZ 00000001400b01f4     fall.obj\n 4908:  0002:0001d1fc       $unwind$?NewFrame@ImGui@@YAXXZ 00000001400b01fc     fall.obj\n 4909:  0002:0001d204       $unwind$?Render@ImGui@@YAXXZ 00000001400b0204     fall.obj\n 4910:  0002:0001d20c       $unwind$?Shutdown@ImGui@@YAXXZ 00000001400b020c     fall.obj\n 4911:  0002:0001d214       $unwind$?ShowMetricsWindow@ImGui@@YAXPEA_N@Z 00000001400b0214     fall.obj\n 4912:  0002:0001d21c       $unwind$?Begin@ImGui@@YA_NPEBDPEA_NH@Z 00000001400b021c     fall.obj\n 4913:  0002:0001d224       $unwind$?Begin@ImGui@@YA_NPEBDPEA_NAEBUImVec2@@MH@Z 00000001400b0224     fall.obj\n 4914:  0002:0001d230       $unwind$?End@ImGui@@YAXXZ  00000001400b0230     fall.obj\n 4915:  0002:0001d238       $unwind$?BeginChild@ImGui@@YA_NPEBDAEBUImVec2@@_NH@Z 00000001400b0238     fall.obj\n 4916:  0002:0001d240       $unwind$?BeginChild@ImGui@@YA_NIAEBUImVec2@@_NH@Z 00000001400b0240     fall.obj\n 4917:  0002:0001d248       $unwind$?EndChild@ImGui@@YAXXZ 00000001400b0248     fall.obj\n 4918:  0002:0001d250       $unwind$?GetContentRegionMax@ImGui@@YA?AUImVec2@@XZ 00000001400b0250     fall.obj\n 4919:  0002:0001d258       $unwind$?GetContentRegionAvail@ImGui@@YA?AUImVec2@@XZ 00000001400b0258     fall.obj\n 4920:  0002:0001d260       $unwind$?GetContentRegionAvailWidth@ImGui@@YAMXZ 00000001400b0260     fall.obj\n 4921:  0002:0001d268       $unwind$?GetWindowContentRegionMin@ImGui@@YA?AUImVec2@@XZ 00000001400b0268     fall.obj\n 4922:  0002:0001d270       $unwind$?GetWindowContentRegionMax@ImGui@@YA?AUImVec2@@XZ 00000001400b0270     fall.obj\n 4923:  0002:0001d278       $unwind$?GetWindowContentRegionWidth@ImGui@@YAMXZ 00000001400b0278     fall.obj\n 4924:  0002:0001d280       $unwind$?GetWindowDrawList@ImGui@@YAPEAUImDrawList@@XZ 00000001400b0280     fall.obj\n 4925:  0002:0001d288       $unwind$?GetWindowPos@ImGui@@YA?AUImVec2@@XZ 00000001400b0288     fall.obj\n 4926:  0002:0001d290       $unwind$?GetWindowSize@ImGui@@YA?AUImVec2@@XZ 00000001400b0290     fall.obj\n 4927:  0002:0001d298       $unwind$?GetWindowWidth@ImGui@@YAMXZ 00000001400b0298     fall.obj\n 4928:  0002:0001d2a0       $unwind$?GetWindowHeight@ImGui@@YAMXZ 00000001400b02a0     fall.obj\n 4929:  0002:0001d2a8       $unwind$?SetWindowFontScale@ImGui@@YAXM@Z 00000001400b02a8     fall.obj\n 4930:  0002:0001d2b0       $unwind$?SetNextWindowPos@ImGui@@YAXAEBUImVec2@@H@Z 00000001400b02b0     fall.obj\n 4931:  0002:0001d2b8       $unwind$?SetNextWindowPosCenter@ImGui@@YAXH@Z 00000001400b02b8     fall.obj\n 4932:  0002:0001d2c0       $unwind$?SetNextWindowSize@ImGui@@YAXAEBUImVec2@@H@Z 00000001400b02c0     fall.obj\n 4933:  0002:0001d2c8       $unwind$?SetNextWindowSizeConstraints@ImGui@@YAXAEBUImVec2@@0P6AXPEAUImGuiSizeConstraintCallbackData@@@ZPEAX@Z 00000001400b02c8     fall.obj\n 4934:  0002:0001d2d4       $unwind$?SetNextWindowContentSize@ImGui@@YAXAEBUImVec2@@@Z 00000001400b02d4     fall.obj\n 4935:  0002:0001d2dc       $unwind$?SetNextWindowContentWidth@ImGui@@YAXM@Z 00000001400b02dc     fall.obj\n 4936:  0002:0001d2e4       $unwind$?SetNextWindowCollapsed@ImGui@@YAX_NH@Z 00000001400b02e4     fall.obj\n 4937:  0002:0001d2ec       $unwind$?SetNextWindowFocus@ImGui@@YAXXZ 00000001400b02ec     fall.obj\n 4938:  0002:0001d2f4       $unwind$?SetWindowPos@ImGui@@YAXAEBUImVec2@@H@Z 00000001400b02f4     fall.obj\n 4939:  0002:0001d2fc       $unwind$?SetWindowSize@ImGui@@YAXAEBUImVec2@@H@Z 00000001400b02fc     fall.obj\n 4940:  0002:0001d304       $unwind$?SetWindowCollapsed@ImGui@@YAX_NH@Z 00000001400b0304     fall.obj\n 4941:  0002:0001d30c       $unwind$?SetWindowFocus@ImGui@@YAXXZ 00000001400b030c     fall.obj\n 4942:  0002:0001d314       $unwind$?SetWindowPos@ImGui@@YAXPEBDAEBUImVec2@@H@Z 00000001400b0314     fall.obj\n 4943:  0002:0001d31c       $unwind$?SetWindowSize@ImGui@@YAXPEBDAEBUImVec2@@H@Z 00000001400b031c     fall.obj\n 4944:  0002:0001d324       $unwind$?SetWindowCollapsed@ImGui@@YAXPEBD_NH@Z 00000001400b0324     fall.obj\n 4945:  0002:0001d32c       $unwind$?SetWindowFocus@ImGui@@YAXPEBD@Z 00000001400b032c     fall.obj\n 4946:  0002:0001d334       $unwind$?GetScrollMaxX@ImGui@@YAMXZ 00000001400b0334     fall.obj\n 4947:  0002:0001d33c       $unwind$?GetScrollMaxY@ImGui@@YAMXZ 00000001400b033c     fall.obj\n 4948:  0002:0001d344       $unwind$?SetScrollX@ImGui@@YAXM@Z 00000001400b0344     fall.obj\n 4949:  0002:0001d34c       $unwind$?SetScrollY@ImGui@@YAXM@Z 00000001400b034c     fall.obj\n 4950:  0002:0001d354       $unwind$?SetScrollHere@ImGui@@YAXM@Z 00000001400b0354     fall.obj\n 4951:  0002:0001d35c       $unwind$?SetScrollFromPosY@ImGui@@YAXMM@Z 00000001400b035c     fall.obj\n 4952:  0002:0001d364       $unwind$?SetKeyboardFocusHere@ImGui@@YAXH@Z 00000001400b0364     fall.obj\n 4953:  0002:0001d36c       $unwind$?SetStateStorage@ImGui@@YAXPEAUImGuiStorage@@@Z 00000001400b036c     fall.obj\n 4954:  0002:0001d374       $unwind$?GetStateStorage@ImGui@@YAPEAUImGuiStorage@@XZ 00000001400b0374     fall.obj\n 4955:  0002:0001d37c       $unwind$?PushFont@ImGui@@YAXPEAUImFont@@@Z 00000001400b037c     fall.obj\n 4956:  0002:0001d384       $unwind$?PopFont@ImGui@@YAXXZ 00000001400b0384     fall.obj\n 4957:  0002:0001d38c       $unwind$?PushStyleColor@ImGui@@YAXHAEBUImVec4@@@Z 00000001400b038c     fall.obj\n 4958:  0002:0001d398       $unwind$?PopStyleColor@ImGui@@YAXH@Z 00000001400b0398     fall.obj\n 4959:  0002:0001d3a4       $unwind$?PushStyleVar@ImGui@@YAXHM@Z 00000001400b03a4     fall.obj\n 4960:  0002:0001d3ac       $unwind$?PushStyleVar@ImGui@@YAXHAEBUImVec2@@@Z 00000001400b03ac     fall.obj\n 4961:  0002:0001d3b4       $unwind$?PopStyleVar@ImGui@@YAXH@Z 00000001400b03b4     fall.obj\n 4962:  0002:0001d3bc       $unwind$?GetColorU32@ImGui@@YAIHM@Z 00000001400b03bc     fall.obj\n 4963:  0002:0001d3c8       $unwind$?GetColorU32@ImGui@@YAIAEBUImVec4@@@Z 00000001400b03c8     fall.obj\n 4964:  0002:0001d3d4       $unwind$?PushItemWidth@ImGui@@YAXM@Z 00000001400b03d4     fall.obj\n 4965:  0002:0001d3dc       $unwind$?PopItemWidth@ImGui@@YAXXZ 00000001400b03dc     fall.obj\n 4966:  0002:0001d3e4       $unwind$?CalcItemWidth@ImGui@@YAMXZ 00000001400b03e4     fall.obj\n 4967:  0002:0001d3ec       $unwind$?PushTextWrapPos@ImGui@@YAXM@Z 00000001400b03ec     fall.obj\n 4968:  0002:0001d3f4       $unwind$?PopTextWrapPos@ImGui@@YAXXZ 00000001400b03f4     fall.obj\n 4969:  0002:0001d3fc       $unwind$?PushAllowKeyboardFocus@ImGui@@YAX_N@Z 00000001400b03fc     fall.obj\n 4970:  0002:0001d404       $unwind$?PopAllowKeyboardFocus@ImGui@@YAXXZ 00000001400b0404     fall.obj\n 4971:  0002:0001d40c       $unwind$?PushButtonRepeat@ImGui@@YAX_N@Z 00000001400b040c     fall.obj\n 4972:  0002:0001d414       $unwind$?PopButtonRepeat@ImGui@@YAXXZ 00000001400b0414     fall.obj\n 4973:  0002:0001d41c       $unwind$?Separator@ImGui@@YAXXZ 00000001400b041c     fall.obj\n 4974:  0002:0001d424       $unwind$?SameLine@ImGui@@YAXMM@Z 00000001400b0424     fall.obj\n 4975:  0002:0001d42c       $unwind$?NewLine@ImGui@@YAXXZ 00000001400b042c     fall.obj\n 4976:  0002:0001d434       $unwind$?Spacing@ImGui@@YAXXZ 00000001400b0434     fall.obj\n 4977:  0002:0001d43c       $unwind$?Dummy@ImGui@@YAXAEBUImVec2@@@Z 00000001400b043c     fall.obj\n 4978:  0002:0001d444       $unwind$?Indent@ImGui@@YAXM@Z 00000001400b0444     fall.obj\n 4979:  0002:0001d44c       $unwind$?Unindent@ImGui@@YAXM@Z 00000001400b044c     fall.obj\n 4980:  0002:0001d454       $unwind$?BeginGroup@ImGui@@YAXXZ 00000001400b0454     fall.obj\n 4981:  0002:0001d45c       $unwind$?EndGroup@ImGui@@YAXXZ 00000001400b045c     fall.obj\n 4982:  0002:0001d464       $unwind$?GetCursorPos@ImGui@@YA?AUImVec2@@XZ 00000001400b0464     fall.obj\n 4983:  0002:0001d46c       $unwind$?GetCursorPosX@ImGui@@YAMXZ 00000001400b046c     fall.obj\n 4984:  0002:0001d474       $unwind$?GetCursorPosY@ImGui@@YAMXZ 00000001400b0474     fall.obj\n 4985:  0002:0001d47c       $unwind$?SetCursorPos@ImGui@@YAXAEBUImVec2@@@Z 00000001400b047c     fall.obj\n 4986:  0002:0001d484       $unwind$?SetCursorPosX@ImGui@@YAXM@Z 00000001400b0484     fall.obj\n 4987:  0002:0001d48c       $unwind$?SetCursorPosY@ImGui@@YAXM@Z 00000001400b048c     fall.obj\n 4988:  0002:0001d494       $unwind$?GetCursorStartPos@ImGui@@YA?AUImVec2@@XZ 00000001400b0494     fall.obj\n 4989:  0002:0001d49c       $unwind$?GetCursorScreenPos@ImGui@@YA?AUImVec2@@XZ 00000001400b049c     fall.obj\n 4990:  0002:0001d4a4       $unwind$?SetCursorScreenPos@ImGui@@YAXAEBUImVec2@@@Z 00000001400b04a4     fall.obj\n 4991:  0002:0001d4ac       $unwind$?AlignFirstTextHeightToWidgets@ImGui@@YAXXZ 00000001400b04ac     fall.obj\n 4992:  0002:0001d4b4       $unwind$?GetTextLineHeight@ImGui@@YAMXZ 00000001400b04b4     fall.obj\n 4993:  0002:0001d4bc       $unwind$?GetTextLineHeightWithSpacing@ImGui@@YAMXZ 00000001400b04bc     fall.obj\n 4994:  0002:0001d4c4       $unwind$?GetItemsLineHeightWithSpacing@ImGui@@YAMXZ 00000001400b04c4     fall.obj\n 4995:  0002:0001d4cc       $unwind$?Columns@ImGui@@YAXHPEBD_N@Z 00000001400b04cc     fall.obj\n 4996:  0002:0001d4d4       $unwind$?NextColumn@ImGui@@YAXXZ 00000001400b04d4     fall.obj\n 4997:  0002:0001d4dc       $unwind$?GetColumnIndex@ImGui@@YAHXZ 00000001400b04dc     fall.obj\n 4998:  0002:0001d4e4       $unwind$?GetColumnOffset@ImGui@@YAMH@Z 00000001400b04e4     fall.obj\n 4999:  0002:0001d4ec       $unwind$?SetColumnOffset@ImGui@@YAXHM@Z 00000001400b04ec     fall.obj\n 5000:  0002:0001d4f4       $unwind$?GetColumnWidth@ImGui@@YAMH@Z 00000001400b04f4     fall.obj\n 5001:  0002:0001d4fc       $unwind$?GetColumnsCount@ImGui@@YAHXZ 00000001400b04fc     fall.obj\n 5002:  0002:0001d504       $unwind$?PushID@ImGui@@YAXPEBD@Z 00000001400b0504     fall.obj\n 5003:  0002:0001d50c       $unwind$?PushID@ImGui@@YAXPEBD0@Z 00000001400b050c     fall.obj\n 5004:  0002:0001d514       $unwind$?PushID@ImGui@@YAXPEBX@Z 00000001400b0514     fall.obj\n 5005:  0002:0001d51c       $unwind$?PushID@ImGui@@YAXH@Z 00000001400b051c     fall.obj\n 5006:  0002:0001d524       $unwind$?PopID@ImGui@@YAXXZ 00000001400b0524     fall.obj\n 5007:  0002:0001d52c       $unwind$?GetID@ImGui@@YAIPEBD@Z 00000001400b052c     fall.obj\n 5008:  0002:0001d534       $unwind$?GetID@ImGui@@YAIPEBD0@Z 00000001400b0534     fall.obj\n 5009:  0002:0001d53c       $unwind$?GetID@ImGui@@YAIPEBX@Z 00000001400b053c     fall.obj\n 5010:  0002:0001d544       $unwind$?Text@ImGui@@YAXPEBDZZ 00000001400b0544     fall.obj\n 5011:  0002:0001d54c       $unwind$?TextV@ImGui@@YAXPEBDPEAD@Z 00000001400b054c     fall.obj\n 5012:  0002:0001d554       $unwind$?TextColored@ImGui@@YAXAEBUImVec4@@PEBDZZ 00000001400b0554     fall.obj\n 5013:  0002:0001d55c       $unwind$?TextColoredV@ImGui@@YAXAEBUImVec4@@PEBDPEAD@Z 00000001400b055c     fall.obj\n 5014:  0002:0001d564       $unwind$?TextDisabled@ImGui@@YAXPEBDZZ 00000001400b0564     fall.obj\n 5015:  0002:0001d56c       $unwind$?TextDisabledV@ImGui@@YAXPEBDPEAD@Z 00000001400b056c     fall.obj\n 5016:  0002:0001d574       $unwind$?TextWrapped@ImGui@@YAXPEBDZZ 00000001400b0574     fall.obj\n 5017:  0002:0001d57c       $unwind$?TextWrappedV@ImGui@@YAXPEBDPEAD@Z 00000001400b057c     fall.obj\n 5018:  0002:0001d584       $unwind$?TextUnformatted@ImGui@@YAXPEBD0@Z 00000001400b0584     fall.obj\n 5019:  0002:0001d590       $unwind$?LabelText@ImGui@@YAXPEBD0ZZ 00000001400b0590     fall.obj\n 5020:  0002:0001d598       $unwind$?LabelTextV@ImGui@@YAXPEBD0PEAD@Z 00000001400b0598     fall.obj\n 5021:  0002:0001d5a0       $unwind$?Bullet@ImGui@@YAXXZ 00000001400b05a0     fall.obj\n 5022:  0002:0001d5a8       $unwind$?BulletText@ImGui@@YAXPEBDZZ 00000001400b05a8     fall.obj\n 5023:  0002:0001d5b0       $unwind$?BulletTextV@ImGui@@YAXPEBDPEAD@Z 00000001400b05b0     fall.obj\n 5024:  0002:0001d5b8       $unwind$?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z 00000001400b05b8     fall.obj\n 5025:  0002:0001d5c0       $unwind$?SmallButton@ImGui@@YA_NPEBD@Z 00000001400b05c0     fall.obj\n 5026:  0002:0001d5c8       $unwind$?InvisibleButton@ImGui@@YA_NPEBDAEBUImVec2@@@Z 00000001400b05c8     fall.obj\n 5027:  0002:0001d5d0       $unwind$?Image@ImGui@@YAXPEAXAEBUImVec2@@11AEBUImVec4@@2@Z 00000001400b05d0     fall.obj\n 5028:  0002:0001d5d8       $unwind$?ImageButton@ImGui@@YA_NPEAXAEBUImVec2@@11HAEBUImVec4@@2@Z 00000001400b05d8     fall.obj\n 5029:  0002:0001d5e0       $unwind$?Checkbox@ImGui@@YA_NPEBDPEA_N@Z 00000001400b05e0     fall.obj\n 5030:  0002:0001d5ec       $unwind$?CheckboxFlags@ImGui@@YA_NPEBDPEAII@Z 00000001400b05ec     fall.obj\n 5031:  0002:0001d5f4       $unwind$?RadioButton@ImGui@@YA_NPEBD_N@Z 00000001400b05f4     fall.obj\n 5032:  0002:0001d600       $unwind$?RadioButton@ImGui@@YA_NPEBDPEAHH@Z 00000001400b0600     fall.obj\n 5033:  0002:0001d608       $unwind$?Combo@ImGui@@YA_NPEBDPEAHPEBQEBDHH@Z 00000001400b0608     fall.obj\n 5034:  0002:0001d610       $unwind$?Combo@ImGui@@YA_NPEBDPEAH0H@Z 00000001400b0610     fall.obj\n 5035:  0002:0001d618       $unwind$?Combo@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z 00000001400b0618     fall.obj\n 5036:  0002:0001d620       $unwind$?ColorButton@ImGui@@YA_NAEBUImVec4@@_N1@Z 00000001400b0620     fall.obj\n 5037:  0002:0001d628       $unwind$?ColorEdit3@ImGui@@YA_NPEBDQEAM@Z 00000001400b0628     fall.obj\n 5038:  0002:0001d638       $unwind$?ColorEdit4@ImGui@@YA_NPEBDQEAM_N@Z 00000001400b0638     fall.obj\n 5039:  0002:0001d648       $unwind$?ColorEditMode@ImGui@@YAXH@Z 00000001400b0648     fall.obj\n 5040:  0002:0001d650       $unwind$?PlotLines@ImGui@@YAXPEBDPEBMHH0MMUImVec2@@H@Z 00000001400b0650     fall.obj\n 5041:  0002:0001d658       $unwind$?PlotLines@ImGui@@YAXPEBDP6AMPEAXH@Z1HH0MMUImVec2@@@Z 00000001400b0658     fall.obj\n 5042:  0002:0001d660       $unwind$?PlotHistogram@ImGui@@YAXPEBDPEBMHH0MMUImVec2@@H@Z 00000001400b0660     fall.obj\n 5043:  0002:0001d668       $unwind$?PlotHistogram@ImGui@@YAXPEBDP6AMPEAXH@Z1HH0MMUImVec2@@@Z 00000001400b0668     fall.obj\n 5044:  0002:0001d670       $unwind$?ProgressBar@ImGui@@YAXMAEBUImVec2@@PEBD@Z 00000001400b0670     fall.obj\n 5045:  0002:0001d680       $unwind$?DragFloat@ImGui@@YA_NPEBDPEAMMMM0M@Z 00000001400b0680     fall.obj\n 5046:  0002:0001d690       $unwind$?DragFloat2@ImGui@@YA_NPEBDQEAMMMM0M@Z 00000001400b0690     fall.obj\n 5047:  0002:0001d698       $unwind$?DragFloat3@ImGui@@YA_NPEBDQEAMMMM0M@Z 00000001400b0698     fall.obj\n 5048:  0002:0001d6a0       $unwind$?DragFloat4@ImGui@@YA_NPEBDQEAMMMM0M@Z 00000001400b06a0     fall.obj\n 5049:  0002:0001d6a8       $unwind$?DragFloatRange2@ImGui@@YA_NPEBDPEAM1MMM00M@Z 00000001400b06a8     fall.obj\n 5050:  0002:0001d6b0       $unwind$?DragInt@ImGui@@YA_NPEBDPEAHMHH0@Z 00000001400b06b0     fall.obj\n 5051:  0002:0001d6b8       $unwind$?DragInt2@ImGui@@YA_NPEBDQEAHMHH0@Z 00000001400b06b8     fall.obj\n 5052:  0002:0001d6c0       $unwind$?DragInt3@ImGui@@YA_NPEBDQEAHMHH0@Z 00000001400b06c0     fall.obj\n 5053:  0002:0001d6c8       $unwind$?DragInt4@ImGui@@YA_NPEBDQEAHMHH0@Z 00000001400b06c8     fall.obj\n 5054:  0002:0001d6d0       $unwind$?DragIntRange2@ImGui@@YA_NPEBDPEAH1MHH00@Z 00000001400b06d0     fall.obj\n 5055:  0002:0001d6d8       $unwind$?InputText@ImGui@@YA_NPEBDPEAD_KHP6AHPEAUImGuiTextEditCallbackData@@@ZPEAX@Z 00000001400b06d8     fall.obj\n 5056:  0002:0001d6e0       $unwind$?InputTextMultiline@ImGui@@YA_NPEBDPEAD_KAEBUImVec2@@HP6AHPEAUImGuiTextEditCallbackData@@@ZPEAX@Z 00000001400b06e0     fall.obj\n 5057:  0002:0001d6e8       $unwind$?InputFloat@ImGui@@YA_NPEBDPEAMMMHH@Z 00000001400b06e8     fall.obj\n 5058:  0002:0001d6f8       $unwind$?InputFloat2@ImGui@@YA_NPEBDQEAMHH@Z 00000001400b06f8     fall.obj\n 5059:  0002:0001d700       $unwind$?InputFloat3@ImGui@@YA_NPEBDQEAMHH@Z 00000001400b0700     fall.obj\n 5060:  0002:0001d708       $unwind$?InputFloat4@ImGui@@YA_NPEBDQEAMHH@Z 00000001400b0708     fall.obj\n 5061:  0002:0001d710       $unwind$?InputInt@ImGui@@YA_NPEBDPEAHHHH@Z 00000001400b0710     fall.obj\n 5062:  0002:0001d718       $unwind$?InputInt2@ImGui@@YA_NPEBDQEAHH@Z 00000001400b0718     fall.obj\n 5063:  0002:0001d720       $unwind$?InputInt3@ImGui@@YA_NPEBDQEAHH@Z 00000001400b0720     fall.obj\n 5064:  0002:0001d728       $unwind$?InputInt4@ImGui@@YA_NPEBDQEAHH@Z 00000001400b0728     fall.obj\n 5065:  0002:0001d730       $unwind$?SliderFloat@ImGui@@YA_NPEBDPEAMMM0M@Z 00000001400b0730     fall.obj\n 5066:  0002:0001d740       $unwind$?SliderFloat2@ImGui@@YA_NPEBDQEAMMM0M@Z 00000001400b0740     fall.obj\n 5067:  0002:0001d748       $unwind$?SliderFloat3@ImGui@@YA_NPEBDQEAMMM0M@Z 00000001400b0748     fall.obj\n 5068:  0002:0001d750       $unwind$?SliderFloat4@ImGui@@YA_NPEBDQEAMMM0M@Z 00000001400b0750     fall.obj\n 5069:  0002:0001d758       $unwind$?SliderAngle@ImGui@@YA_NPEBDPEAMMM@Z 00000001400b0758     fall.obj\n 5070:  0002:0001d760       $unwind$?SliderInt@ImGui@@YA_NPEBDPEAHHH0@Z 00000001400b0760     fall.obj\n 5071:  0002:0001d768       $unwind$?SliderInt2@ImGui@@YA_NPEBDQEAHHH0@Z 00000001400b0768     fall.obj\n 5072:  0002:0001d770       $unwind$?SliderInt3@ImGui@@YA_NPEBDQEAHHH0@Z 00000001400b0770     fall.obj\n 5073:  0002:0001d778       $unwind$?SliderInt4@ImGui@@YA_NPEBDQEAHHH0@Z 00000001400b0778     fall.obj\n 5074:  0002:0001d780       $unwind$?VSliderFloat@ImGui@@YA_NPEBDAEBUImVec2@@PEAMMM0M@Z 00000001400b0780     fall.obj\n 5075:  0002:0001d790       $unwind$?VSliderInt@ImGui@@YA_NPEBDAEBUImVec2@@PEAHHH0@Z 00000001400b0790     fall.obj\n 5076:  0002:0001d798       $unwind$?TreeNode@ImGui@@YA_NPEBD@Z 00000001400b0798     fall.obj\n 5077:  0002:0001d7a0       $unwind$?TreeNode@ImGui@@YA_NPEBD0ZZ 00000001400b07a0     fall.obj\n 5078:  0002:0001d7a8       $unwind$?TreeNode@ImGui@@YA_NPEBXPEBDZZ 00000001400b07a8     fall.obj\n 5079:  0002:0001d7b0       $unwind$?TreeNodeV@ImGui@@YA_NPEBD0PEAD@Z 00000001400b07b0     fall.obj\n 5080:  0002:0001d7b8       $unwind$?TreeNodeV@ImGui@@YA_NPEBXPEBDPEAD@Z 00000001400b07b8     fall.obj\n 5081:  0002:0001d7c0       $unwind$?TreeNodeEx@ImGui@@YA_NPEBDH@Z 00000001400b07c0     fall.obj\n 5082:  0002:0001d7c8       $unwind$?TreeNodeEx@ImGui@@YA_NPEBDH0ZZ 00000001400b07c8     fall.obj\n 5083:  0002:0001d7d0       $unwind$?TreeNodeEx@ImGui@@YA_NPEBXHPEBDZZ 00000001400b07d0     fall.obj\n 5084:  0002:0001d7d8       $unwind$?TreeNodeExV@ImGui@@YA_NPEBDH0PEAD@Z 00000001400b07d8     fall.obj\n 5085:  0002:0001d7e0       $unwind$?TreeNodeExV@ImGui@@YA_NPEBXHPEBDPEAD@Z 00000001400b07e0     fall.obj\n 5086:  0002:0001d7e8       $unwind$?TreePush@ImGui@@YAXPEBD@Z 00000001400b07e8     fall.obj\n 5087:  0002:0001d7f0       $unwind$?TreePush@ImGui@@YAXPEBX@Z 00000001400b07f0     fall.obj\n 5088:  0002:0001d7f8       $unwind$?TreePop@ImGui@@YAXXZ 00000001400b07f8     fall.obj\n 5089:  0002:0001d800       $unwind$?TreeAdvanceToLabelPos@ImGui@@YAXXZ 00000001400b0800     fall.obj\n 5090:  0002:0001d808       $unwind$?GetTreeNodeToLabelSpacing@ImGui@@YAMXZ 00000001400b0808     fall.obj\n 5091:  0002:0001d810       $unwind$?SetNextTreeNodeOpen@ImGui@@YAX_NH@Z 00000001400b0810     fall.obj\n 5092:  0002:0001d818       $unwind$?CollapsingHeader@ImGui@@YA_NPEBDH@Z 00000001400b0818     fall.obj\n 5093:  0002:0001d820       $unwind$?CollapsingHeader@ImGui@@YA_NPEBDPEA_NH@Z 00000001400b0820     fall.obj\n 5094:  0002:0001d828       $unwind$?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z 00000001400b0828     fall.obj\n 5095:  0002:0001d830       $unwind$?Selectable@ImGui@@YA_NPEBDPEA_NHAEBUImVec2@@@Z 00000001400b0830     fall.obj\n 5096:  0002:0001d838       $unwind$?ListBox@ImGui@@YA_NPEBDPEAHPEBQEBDHH@Z 00000001400b0838     fall.obj\n 5097:  0002:0001d840       $unwind$?ListBox@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z 00000001400b0840     fall.obj\n 5098:  0002:0001d848       $unwind$?ListBoxHeader@ImGui@@YA_NPEBDAEBUImVec2@@@Z 00000001400b0848     fall.obj\n 5099:  0002:0001d854       $unwind$?ListBoxHeader@ImGui@@YA_NPEBDHH@Z 00000001400b0854     fall.obj\n 5100:  0002:0001d85c       $unwind$?ListBoxFooter@ImGui@@YAXXZ 00000001400b085c     fall.obj\n 5101:  0002:0001d868       $unwind$?Value@ImGui@@YAXPEBD_N@Z 00000001400b0868     fall.obj\n 5102:  0002:0001d870       $unwind$?Value@ImGui@@YAXPEBDH@Z 00000001400b0870     fall.obj\n 5103:  0002:0001d878       $unwind$?Value@ImGui@@YAXPEBDI@Z 00000001400b0878     fall.obj\n 5104:  0002:0001d880       $unwind$?Value@ImGui@@YAXPEBDM0@Z 00000001400b0880     fall.obj\n 5105:  0002:0001d890       $unwind$?ValueColor@ImGui@@YAXPEBDAEBUImVec4@@@Z 00000001400b0890     fall.obj\n 5106:  0002:0001d898       $unwind$?ValueColor@ImGui@@YAXPEBDI@Z 00000001400b0898     fall.obj\n 5107:  0002:0001d8a0       $unwind$?SetTooltip@ImGui@@YAXPEBDZZ 00000001400b08a0     fall.obj\n 5108:  0002:0001d8a8       $unwind$?SetTooltipV@ImGui@@YAXPEBDPEAD@Z 00000001400b08a8     fall.obj\n 5109:  0002:0001d8b0       $unwind$?BeginTooltip@ImGui@@YAXXZ 00000001400b08b0     fall.obj\n 5110:  0002:0001d8b8       $unwind$?EndTooltip@ImGui@@YAXXZ 00000001400b08b8     fall.obj\n 5111:  0002:0001d8c0       $unwind$?BeginMainMenuBar@ImGui@@YA_NXZ 00000001400b08c0     fall.obj\n 5112:  0002:0001d8c8       $unwind$?EndMainMenuBar@ImGui@@YAXXZ 00000001400b08c8     fall.obj\n 5113:  0002:0001d8d0       $unwind$?BeginMenuBar@ImGui@@YA_NXZ 00000001400b08d0     fall.obj\n 5114:  0002:0001d8d8       $unwind$?EndMenuBar@ImGui@@YAXXZ 00000001400b08d8     fall.obj\n 5115:  0002:0001d8e0       $unwind$?BeginMenu@ImGui@@YA_NPEBD_N@Z 00000001400b08e0     fall.obj\n 5116:  0002:0001d8e8       $unwind$?EndMenu@ImGui@@YAXXZ 00000001400b08e8     fall.obj\n 5117:  0002:0001d8f0       $unwind$?MenuItem@ImGui@@YA_NPEBD0_N1@Z 00000001400b08f0     fall.obj\n 5118:  0002:0001d8f8       $unwind$?MenuItem@ImGui@@YA_NPEBD0PEA_N_N@Z 00000001400b08f8     fall.obj\n 5119:  0002:0001d900       $unwind$?OpenPopup@ImGui@@YAXPEBD@Z 00000001400b0900     fall.obj\n 5120:  0002:0001d908       $unwind$?BeginPopup@ImGui@@YA_NPEBD@Z 00000001400b0908     fall.obj\n 5121:  0002:0001d910       $unwind$?BeginPopupModal@ImGui@@YA_NPEBDPEA_NH@Z 00000001400b0910     fall.obj\n 5122:  0002:0001d918       $unwind$?BeginPopupContextItem@ImGui@@YA_NPEBDH@Z 00000001400b0918     fall.obj\n 5123:  0002:0001d920       $unwind$?BeginPopupContextWindow@ImGui@@YA_N_NPEBDH@Z 00000001400b0920     fall.obj\n 5124:  0002:0001d928       $unwind$?BeginPopupContextVoid@ImGui@@YA_NPEBDH@Z 00000001400b0928     fall.obj\n 5125:  0002:0001d930       $unwind$?EndPopup@ImGui@@YAXXZ 00000001400b0930     fall.obj\n 5126:  0002:0001d938       $unwind$?CloseCurrentPopup@ImGui@@YAXXZ 00000001400b0938     fall.obj\n 5127:  0002:0001d940       $unwind$?LogToTTY@ImGui@@YAXH@Z 00000001400b0940     fall.obj\n 5128:  0002:0001d948       $unwind$?LogToFile@ImGui@@YAXHPEBD@Z 00000001400b0948     fall.obj\n 5129:  0002:0001d950       $unwind$?LogToClipboard@ImGui@@YAXH@Z 00000001400b0950     fall.obj\n 5130:  0002:0001d958       $unwind$?LogFinish@ImGui@@YAXXZ 00000001400b0958     fall.obj\n 5131:  0002:0001d960       $unwind$?LogButtons@ImGui@@YAXXZ 00000001400b0960     fall.obj\n 5132:  0002:0001d968       $unwind$?LogText@ImGui@@YAXPEBDZZ 00000001400b0968     fall.obj\n 5133:  0002:0001d970       $unwind$?PushClipRect@ImGui@@YAXAEBUImVec2@@0_N@Z 00000001400b0970     fall.obj\n 5134:  0002:0001d97c       $unwind$?PopClipRect@ImGui@@YAXXZ 00000001400b097c     fall.obj\n 5135:  0002:0001d988       $unwind$?IsItemHovered@ImGui@@YA_NXZ 00000001400b0988     fall.obj\n 5136:  0002:0001d990       $unwind$?IsItemHoveredRect@ImGui@@YA_NXZ 00000001400b0990     fall.obj\n 5137:  0002:0001d998       $unwind$?IsItemActive@ImGui@@YA_NXZ 00000001400b0998     fall.obj\n 5138:  0002:0001d9a0       $unwind$?IsItemClicked@ImGui@@YA_NH@Z 00000001400b09a0     fall.obj\n 5139:  0002:0001d9a8       $unwind$?IsItemVisible@ImGui@@YA_NXZ 00000001400b09a8     fall.obj\n 5140:  0002:0001d9b4       $unwind$?IsAnyItemHovered@ImGui@@YA_NXZ 00000001400b09b4     fall.obj\n 5141:  0002:0001d9bc       $unwind$?IsAnyItemActive@ImGui@@YA_NXZ 00000001400b09bc     fall.obj\n 5142:  0002:0001d9c4       $unwind$?GetItemRectMin@ImGui@@YA?AUImVec2@@XZ 00000001400b09c4     fall.obj\n 5143:  0002:0001d9cc       $unwind$?GetItemRectMax@ImGui@@YA?AUImVec2@@XZ 00000001400b09cc     fall.obj\n 5144:  0002:0001d9d4       $unwind$?GetItemRectSize@ImGui@@YA?AUImVec2@@XZ 00000001400b09d4     fall.obj\n 5145:  0002:0001d9dc       $unwind$?SetItemAllowOverlap@ImGui@@YAXXZ 00000001400b09dc     fall.obj\n 5146:  0002:0001d9e4       $unwind$?IsWindowHovered@ImGui@@YA_NXZ 00000001400b09e4     fall.obj\n 5147:  0002:0001d9ec       $unwind$?IsWindowFocused@ImGui@@YA_NXZ 00000001400b09ec     fall.obj\n 5148:  0002:0001d9f4       $unwind$?IsRootWindowFocused@ImGui@@YA_NXZ 00000001400b09f4     fall.obj\n 5149:  0002:0001d9fc       $unwind$?IsRootWindowOrAnyChildFocused@ImGui@@YA_NXZ 00000001400b09fc     fall.obj\n 5150:  0002:0001da04       $unwind$?IsRootWindowOrAnyChildHovered@ImGui@@YA_NXZ 00000001400b0a04     fall.obj\n 5151:  0002:0001da0c       $unwind$?IsRectVisible@ImGui@@YA_NAEBUImVec2@@@Z 00000001400b0a0c     fall.obj\n 5152:  0002:0001da14       $unwind$?IsRectVisible@ImGui@@YA_NAEBUImVec2@@0@Z 00000001400b0a14     fall.obj\n 5153:  0002:0001da1c       $unwind$?IsPosHoveringAnyWindow@ImGui@@YA_NAEBUImVec2@@@Z 00000001400b0a1c     fall.obj\n 5154:  0002:0001da24       $unwind$?GetStyleColName@ImGui@@YAPEBDH@Z 00000001400b0a24     fall.obj\n 5155:  0002:0001da2c       $unwind$?CalcItemRectClosestPoint@ImGui@@YA?AUImVec2@@AEBU2@_NM@Z 00000001400b0a2c     fall.obj\n 5156:  0002:0001da38       $unwind$?CalcTextSize@ImGui@@YA?AUImVec2@@PEBD0_NM@Z 00000001400b0a38     fall.obj\n 5157:  0002:0001da40       $unwind$?CalcListClipping@ImGui@@YAXHMPEAH0@Z 00000001400b0a40     fall.obj\n 5158:  0002:0001da48       $unwind$?BeginChildFrame@ImGui@@YA_NIAEBUImVec2@@H@Z 00000001400b0a48     fall.obj\n 5159:  0002:0001da50       $unwind$?EndChildFrame@ImGui@@YAXXZ 00000001400b0a50     fall.obj\n 5160:  0002:0001da58       $unwind$?ColorConvertU32ToFloat4@ImGui@@YA?AUImVec4@@I@Z 00000001400b0a58     fall.obj\n 5161:  0002:0001da60       $unwind$?ColorConvertFloat4ToU32@ImGui@@YAIAEBUImVec4@@@Z 00000001400b0a60     fall.obj\n 5162:  0002:0001da68       $unwind$?ColorConvertRGBtoHSV@ImGui@@YAXMMMAEAM00@Z 00000001400b0a68     fall.obj\n 5163:  0002:0001da70       $unwind$?ColorConvertHSVtoRGB@ImGui@@YAXMMMAEAM00@Z 00000001400b0a70     fall.obj\n 5164:  0002:0001da78       $unwind$?GetKeyIndex@ImGui@@YAHH@Z 00000001400b0a78     fall.obj\n 5165:  0002:0001da80       $unwind$?IsKeyDown@ImGui@@YA_NH@Z 00000001400b0a80     fall.obj\n 5166:  0002:0001da88       $unwind$?IsKeyPressed@ImGui@@YA_NH_N@Z 00000001400b0a88     fall.obj\n 5167:  0002:0001da90       $unwind$?IsKeyReleased@ImGui@@YA_NH@Z 00000001400b0a90     fall.obj\n 5168:  0002:0001da98       $unwind$?IsMouseDown@ImGui@@YA_NH@Z 00000001400b0a98     fall.obj\n 5169:  0002:0001daa0       $unwind$?IsMouseClicked@ImGui@@YA_NH_N@Z 00000001400b0aa0     fall.obj\n 5170:  0002:0001daa8       $unwind$?IsMouseDoubleClicked@ImGui@@YA_NH@Z 00000001400b0aa8     fall.obj\n 5171:  0002:0001dab0       $unwind$?IsMouseReleased@ImGui@@YA_NH@Z 00000001400b0ab0     fall.obj\n 5172:  0002:0001dab8       $unwind$?IsMouseHoveringWindow@ImGui@@YA_NXZ 00000001400b0ab8     fall.obj\n 5173:  0002:0001dac0       $unwind$?IsMouseHoveringAnyWindow@ImGui@@YA_NXZ 00000001400b0ac0     fall.obj\n 5174:  0002:0001dac8       $unwind$?IsMouseHoveringRect@ImGui@@YA_NAEBUImVec2@@0_N@Z 00000001400b0ac8     fall.obj\n 5175:  0002:0001dad0       $unwind$?IsMouseDragging@ImGui@@YA_NHM@Z 00000001400b0ad0     fall.obj\n 5176:  0002:0001dad8       $unwind$?GetMousePosOnOpeningCurrentPopup@ImGui@@YA?AUImVec2@@XZ 00000001400b0ad8     fall.obj\n 5177:  0002:0001dae0       $unwind$?GetMouseDragDelta@ImGui@@YA?AUImVec2@@HM@Z 00000001400b0ae0     fall.obj\n 5178:  0002:0001dae8       $unwind$?ResetMouseDragDelta@ImGui@@YAXH@Z 00000001400b0ae8     fall.obj\n 5179:  0002:0001daf0       $unwind$?CaptureKeyboardFromApp@ImGui@@YAX_N@Z 00000001400b0af0     fall.obj\n 5180:  0002:0001daf8       $unwind$?CaptureMouseFromApp@ImGui@@YAX_N@Z 00000001400b0af8     fall.obj\n 5181:  0002:0001db00       $unwind$?MemAlloc@ImGui@@YAPEAX_K@Z 00000001400b0b00     fall.obj\n 5182:  0002:0001db08       $unwind$?MemFree@ImGui@@YAXPEAX@Z 00000001400b0b08     fall.obj\n 5183:  0002:0001db10       $unwind$?GetClipboardText@ImGui@@YAPEBDXZ 00000001400b0b10     fall.obj\n 5184:  0002:0001db18       $unwind$?SetClipboardText@ImGui@@YAXPEBD@Z 00000001400b0b18     fall.obj\n 5185:  0002:0001db20       $unwind$?CreateContext@ImGui@@YAPEAUImGuiContext@@P6APEAX_K@ZP6AXPEAX@Z@Z 00000001400b0b20     fall.obj\n 5186:  0002:0001db28       $unwind$?DestroyContext@ImGui@@YAXPEAUImGuiContext@@@Z 00000001400b0b28     fall.obj\n 5187:  0002:0001db30       $unwind$??0ImGuiStyle@@QEAA@XZ 00000001400b0b30     fall.obj\n 5188:  0002:0001db3c       $unwind$?AddInputCharacter@ImGuiIO@@QEAAXG@Z 00000001400b0b3c     fall.obj\n 5189:  0002:0001db44       $unwind$?AddInputCharactersUTF8@ImGuiIO@@QEAAXPEBD@Z 00000001400b0b44     fall.obj\n 5190:  0002:0001db54       $unwind$??0ImGuiIO@@QEAA@XZ 00000001400b0b54     fall.obj\n 5191:  0002:0001db5c       $unwind$?split@TextRange@ImGuiTextFilter@@QEAAXDAEAV?$ImVector@UTextRange@ImGuiTextFilter@@@@@Z 00000001400b0b5c     fall.obj\n 5192:  0002:0001db64       $unwind$??0ImGuiTextFilter@@QEAA@PEBD@Z 00000001400b0b64     fall.obj\n 5193:  0002:0001db6c       $unwind$?Draw@ImGuiTextFilter@@QEAA_NPEBDM@Z 00000001400b0b6c     fall.obj\n 5194:  0002:0001db74       $unwind$?PassFilter@ImGuiTextFilter@@QEBA_NPEBD0@Z 00000001400b0b74     fall.obj\n 5195:  0002:0001db7c       $unwind$?Build@ImGuiTextFilter@@QEAAXXZ 00000001400b0b7c     fall.obj\n 5196:  0002:0001db84       $unwind$?append@ImGuiTextBuffer@@QEAAXPEBDZZ 00000001400b0b84     fall.obj\n 5197:  0002:0001db8c       $unwind$?appendv@ImGuiTextBuffer@@QEAAXPEBDPEAD@Z 00000001400b0b8c     fall.obj\n 5198:  0002:0001db94       $unwind$?Clear@ImGuiStorage@@QEAAXXZ 00000001400b0b94     fall.obj\n 5199:  0002:0001db9c       $unwind$?GetInt@ImGuiStorage@@QEBAHIH@Z 00000001400b0b9c     fall.obj\n 5200:  0002:0001dba4       $unwind$?SetInt@ImGuiStorage@@QEAAXIH@Z 00000001400b0ba4     fall.obj\n 5201:  0002:0001dbac       $unwind$?GetBool@ImGuiStorage@@QEBA_NI_N@Z 00000001400b0bac     fall.obj\n 5202:  0002:0001dbb4       $unwind$?SetBool@ImGuiStorage@@QEAAXI_N@Z 00000001400b0bb4     fall.obj\n 5203:  0002:0001dbbc       $unwind$?GetFloat@ImGuiStorage@@QEBAMIM@Z 00000001400b0bbc     fall.obj\n 5204:  0002:0001dbc4       $unwind$?SetFloat@ImGuiStorage@@QEAAXIM@Z 00000001400b0bc4     fall.obj\n 5205:  0002:0001dbcc       $unwind$?GetVoidPtr@ImGuiStorage@@QEBAPEAXI@Z 00000001400b0bcc     fall.obj\n 5206:  0002:0001dbd4       $unwind$?SetVoidPtr@ImGuiStorage@@QEAAXIPEAX@Z 00000001400b0bd4     fall.obj\n 5207:  0002:0001dbdc       $unwind$?GetIntRef@ImGuiStorage@@QEAAPEAHIH@Z 00000001400b0bdc     fall.obj\n 5208:  0002:0001dbe4       $unwind$?GetBoolRef@ImGuiStorage@@QEAAPEA_NI_N@Z 00000001400b0be4     fall.obj\n 5209:  0002:0001dbec       $unwind$?GetFloatRef@ImGuiStorage@@QEAAPEAMIM@Z 00000001400b0bec     fall.obj\n 5210:  0002:0001dbf4       $unwind$?GetVoidPtrRef@ImGuiStorage@@QEAAPEAPEAXIPEAX@Z 00000001400b0bf4     fall.obj\n 5211:  0002:0001dbfc       $unwind$?SetAllInt@ImGuiStorage@@QEAAXH@Z 00000001400b0bfc     fall.obj\n 5212:  0002:0001dc04       $unwind$?DeleteChars@ImGuiTextEditCallbackData@@QEAAXHH@Z 00000001400b0c04     fall.obj\n 5213:  0002:0001dc0c       $unwind$?InsertChars@ImGuiTextEditCallbackData@@QEAAXHPEBD0@Z 00000001400b0c0c     fall.obj\n 5214:  0002:0001dc14       $unwind$?Step@ImGuiListClipper@@QEAA_NXZ 00000001400b0c14     fall.obj\n 5215:  0002:0001dc1c       $unwind$?Begin@ImGuiListClipper@@QEAAXHM@Z 00000001400b0c1c     fall.obj\n 5216:  0002:0001dc24       $unwind$?End@ImGuiListClipper@@QEAAXXZ 00000001400b0c24     fall.obj\n 5217   0002:0001dc2c       $unwind$?PushClipRect@ImDrawList@@QEAAXUImVec2@@0_N@Z 00000001400b0c2c     fall.obj\n 5218   0002:0001dc38       $unwind$?PushClipRectFullScreen@ImDrawList@@QEAAXXZ 00000001400b0c38     fall.obj\n ....\n 5286   0002:0001ded0       $unwind$?GrowIndex@ImFont@@QEAAXH@Z 00000001400b0ed0     fall.obj\n 5287   0002:0001ded8       $unwind$?AddRemapChar@ImFont@@QEAAXGG_N@Z 00000001400b0ed8     fall.obj\n 5288:  0002:0001dee0       $unwind$?ImGui_ImplSdlGL3_Init@@YA_NPEAUSDL_Window@@@Z 00000001400b0ee0     fall.obj\n 5289:  0002:0001dee8       $unwind$?ImGui_ImplSdlGL3_Shutdown@@YAXXZ 00000001400b0ee8     fall.obj\n 5290:  0002:0001def0       $unwind$?ImGui_ImplSdlGL3_NewFrame@@YAXPEAUSDL_Window@@@Z 00000001400b0ef0     fall.obj\n 5291:  0002:0001def8       $unwind$?ImGui_ImplSdlGL3_ProcessEvent@@YA_NPEATSDL_Event@@@Z 00000001400b0ef8     fall.obj\n 5292:  0002:0001df00       $unwind$?ImGui_ImplSdlGL3_InvalidateDeviceObjects@@YAXXZ 00000001400b0f00     fall.obj\n 5293:  0002:0001df08       $unwind$?ImGui_ImplSdlGL3_CreateDeviceObjects@@YA_NXZ 00000001400b0f08     fall.obj\n 5294   0002:0001df10       $unwind$?was_pressed@@YAIUButtonInput@@@Z 00000001400b0f10     fall.obj\n 5295   0002:0001df18       $unwind$?was_released@@YAIUButtonInput@@@Z 00000001400b0f18     fall.obj\n ....\n 5345   0002:0001e150       $unwind$stbi_zlib_decode_noheader_malloc 00000001400b1150     fall.obj\n 5346   0002:0001e160       $unwind$stbi_zlib_decode_noheader_buffer 00000001400b1160     fall.obj\n 5347:  0002:0001e170       $unwind$?Image@ImGui@@YAXUPlatformTexture@@@Z 00000001400b1170     fall.obj\n 5348   0002:0001e178       $unwind$?ImTextStrToUtf8@@YAHPEADHPEBG1@Z 00000001400b1178     fall.obj\n 5349   0002:0001e180       $unwind$?ImTextCharFromUtf8@@YAHPEAIPEBD1@Z 00000001400b1180     fall.obj\n ....\n 5381   0002:0001e280       $unwind$?ImInvLength@@YAMAEBUImVec2@@M@Z 00000001400b1280     fall.obj\n 5382   0002:0001e288       $unwind$?ImFloor@@YA?AUImVec2@@U1@@Z 00000001400b1288     fall.obj\n 5383:  0002:0001e290       $unwind$??0ImGuiSimpleColumns@@QEAA@XZ 00000001400b1290     fall.obj\n 5384:  0002:0001e298       $unwind$?Update@ImGuiSimpleColumns@@QEAAXHM_N@Z 00000001400b1298     fall.obj\n 5385:  0002:0001e2a0       $unwind$?DeclColumns@ImGuiSimpleColumns@@QEAAMMMM@Z 00000001400b12a0     fall.obj\n 5386:  0002:0001e2a8       $unwind$?CalcExtraSpace@ImGuiSimpleColumns@@QEAAMM@Z 00000001400b12a8     fall.obj\n 5387:  0002:0001e2b0       $unwind$?OnKeyPressed@ImGuiTextEditState@@QEAAXH@Z 00000001400b12b0     fall.obj\n 5388:  0002:0001e2b8       $unwind$??0ImGuiWindow@@QEAA@PEBD@Z 00000001400b12b8     fall.obj\n 5389:  0002:0001e2c0       $unwind$??1ImGuiWindow@@QEAA@XZ 00000001400b12c0     fall.obj\n 5390:  0002:0001e2c8       $unwind$?GetID@ImGuiWindow@@QEAAIPEBD0@Z 00000001400b12c8     fall.obj\n 5391:  0002:0001e2d0       $unwind$?GetID@ImGuiWindow@@QEAAIPEBX@Z 00000001400b12d0     fall.obj\n 5392:  0002:0001e2d8       $unwind$?GetIDNoKeepAlive@ImGuiWindow@@QEAAIPEBD0@Z 00000001400b12d8     fall.obj\n 5393:  0002:0001e2e0       $unwind$?GetParentWindow@ImGui@@YAPEAUImGuiWindow@@XZ 00000001400b12e0     fall.obj\n 5394:  0002:0001e2e8       $unwind$?FindWindowByName@ImGui@@YAPEAUImGuiWindow@@PEBD@Z 00000001400b12e8     fall.obj\n 5395:  0002:0001e2f0       $unwind$?FocusWindow@ImGui@@YAXPEAUImGuiWindow@@@Z 00000001400b12f0     fall.obj\n 5396:  0002:0001e2f8       $unwind$?EndFrame@ImGui@@YAXXZ 00000001400b12f8     fall.obj\n 5397:  0002:0001e300       $unwind$?SetActiveID@ImGui@@YAXIPEAUImGuiWindow@@@Z 00000001400b1300     fall.obj\n 5398:  0002:0001e308       $unwind$?ClearActiveID@ImGui@@YAXXZ 00000001400b1308     fall.obj\n 5399:  0002:0001e310       $unwind$?SetHoveredID@ImGui@@YAXI@Z 00000001400b1310     fall.obj\n 5400:  0002:0001e318       $unwind$?KeepAliveID@ImGui@@YAXI@Z 00000001400b1318     fall.obj\n 5401:  0002:0001e320       $unwind$?ItemSize@ImGui@@YAXAEBUImVec2@@M@Z 00000001400b1320     fall.obj\n 5402:  0002:0001e328       $unwind$?ItemSize@ImGui@@YAXAEBUImRect@@M@Z 00000001400b1328     fall.obj\n 5403:  0002:0001e330       $unwind$?ItemAdd@ImGui@@YA_NAEBUImRect@@PEBI@Z 00000001400b1330     fall.obj\n 5404:  0002:0001e33c       $unwind$?IsClippedEx@ImGui@@YA_NAEBUImRect@@PEBI_N@Z 00000001400b133c     fall.obj\n 5405:  0002:0001e344       $unwind$?IsHovered@ImGui@@YA_NAEBUImRect@@I_N@Z 00000001400b1344     fall.obj\n 5406:  0002:0001e34c       $unwind$?FocusableItemRegister@ImGui@@YA_NPEAUImGuiWindow@@_N1@Z 00000001400b134c     fall.obj\n 5407:  0002:0001e354       $unwind$?CalcItemSize@ImGui@@YA?AUImVec2@@U2@MM@Z 00000001400b1354     fall.obj\n 5408:  0002:0001e35c       $unwind$?CalcWrapWidthForPos@ImGui@@YAMAEBUImVec2@@M@Z 00000001400b135c     fall.obj\n 5409:  0002:0001e364       $unwind$?OpenPopupEx@ImGui@@YAXPEBD_N@Z 00000001400b1364     fall.obj\n 5410:  0002:0001e370       $unwind$?RenderText@ImGui@@YAXUImVec2@@PEBD1_N@Z 00000001400b1370     fall.obj\n 5411:  0002:0001e378       $unwind$?RenderTextWrapped@ImGui@@YAXUImVec2@@PEBD1M@Z 00000001400b1378     fall.obj\n 5412:  0002:0001e380       $unwind$?RenderTextClipped@ImGui@@YAXAEBUImVec2@@0PEBD1PEBU2@0PEBUImRect@@@Z 00000001400b1380     fall.obj\n 5413:  0002:0001e388       $unwind$?RenderFrame@ImGui@@YAXUImVec2@@0I_NM@Z 00000001400b1388     fall.obj\n 5414:  0002:0001e390       $unwind$?RenderCollapseTriangle@ImGui@@YAXUImVec2@@_NM@Z 00000001400b1390     fall.obj\n 5415:  0002:0001e398       $unwind$?RenderBullet@ImGui@@YAXUImVec2@@@Z 00000001400b1398     fall.obj\n 5416:  0002:0001e3a0       $unwind$?RenderCheckMark@ImGui@@YAXUImVec2@@I@Z 00000001400b13a0     fall.obj\n 5417:  0002:0001e3a8       $unwind$?FindRenderedTextEnd@ImGui@@YAPEBDPEBD0@Z 00000001400b13a8     fall.obj\n 5418:  0002:0001e3b0       $unwind$?ButtonBehavior@ImGui@@YA_NAEBUImRect@@IPEA_N1H@Z 00000001400b13b0     fall.obj\n 5419:  0002:0001e3b8       $unwind$?ButtonEx@ImGui@@YA_NPEBDAEBUImVec2@@H@Z 00000001400b13b8     fall.obj\n 5420:  0002:0001e3c0       $unwind$?CloseButton@ImGui@@YA_NIAEBUImVec2@@M@Z 00000001400b13c0     fall.obj\n 5421:  0002:0001e3c8       $unwind$?SliderBehavior@ImGui@@YA_NAEBUImRect@@IPEAMMMMHH@Z 00000001400b13c8     fall.obj\n 5422:  0002:0001e3d4       $unwind$?SliderFloatN@ImGui@@YA_NPEBDPEAMHMM0M@Z 00000001400b13d4     fall.obj\n 5423:  0002:0001e3dc       $unwind$?SliderIntN@ImGui@@YA_NPEBDPEAHHHH0@Z 00000001400b13dc     fall.obj\n 5424:  0002:0001e3e4       $unwind$?DragBehavior@ImGui@@YA_NAEBUImRect@@IPEAMMMMHM@Z 00000001400b13e4     fall.obj\n 5425:  0002:0001e3ec       $unwind$?DragFloatN@ImGui@@YA_NPEBDPEAMHMMM0M@Z 00000001400b13ec     fall.obj\n 5426:  0002:0001e3f4       $unwind$?DragIntN@ImGui@@YA_NPEBDPEAHHMHH0@Z 00000001400b13f4     fall.obj\n 5427:  0002:0001e3fc       $unwind$?InputTextEx@ImGui@@YA_NPEBDPEADHAEBUImVec2@@HP6AHPEAUImGuiTextEditCallbackData@@@ZPEAX@Z 00000001400b13fc     fall.obj\n 5428:  0002:0001e404       $unwind$?InputFloatN@ImGui@@YA_NPEBDPEAMHHH@Z 00000001400b1404     fall.obj\n 5429:  0002:0001e40c       $unwind$?InputIntN@ImGui@@YA_NPEBDPEAHHH@Z 00000001400b140c     fall.obj\n 5430:  0002:0001e414       $unwind$?InputScalarEx@ImGui@@YA_NPEBDW4ImGuiDataType@@PEAX220H@Z 00000001400b1414     fall.obj\n 5431:  0002:0001e424       $unwind$?InputScalarAsWidgetReplacement@ImGui@@YA_NAEBUImRect@@PEBDW4ImGuiDataType@@PEAXIH@Z 00000001400b1424     fall.obj\n 5432:  0002:0001e434       $unwind$?TreeNodeBehavior@ImGui@@YA_NIHPEBD0@Z 00000001400b1434     fall.obj\n 5433:  0002:0001e440       $unwind$?TreeNodeBehaviorIsOpen@ImGui@@YA_NIH@Z 00000001400b1440     fall.obj\n 5434:  0002:0001e448       $unwind$?TreePushRawID@ImGui@@YAXI@Z 00000001400b1448     fall.obj\n 5435:  0002:0001e450       $unwind$?PlotEx@ImGui@@YAXW4ImGuiPlotType@@PEBDP6AMPEAXH@Z2HH1MMUImVec2@@@Z 00000001400b1450     fall.obj\n 5436:  0002:0001e458       $unwind$?ParseFormatPrecision@ImGui@@YAHPEBDH@Z 00000001400b1458     fall.obj\n 5437:  0002:0001e460       $unwind$?RoundScalar@ImGui@@YAMMH@Z 00000001400b1460     fall.obj\n 5438   0002:0001e468       $unwind$?LogRenderedText@@YAXAEBUImVec2@@PEBD1@Z 00000001400b1468     fall.obj\n 5439   0002:0001e470       $unwind$?PushMultiItemsWidths@@YAXHM@Z 00000001400b1470     fall.obj\n ....\n 5442   0002:0001e488       $unwind$?GetDefaultFont@@YAPEAUImFont@@XZ 00000001400b1488     fall.obj\n 5443   0002:0001e490       $unwind$?SetCurrentFont@@YAXPEAUImFont@@@Z 00000001400b1490     fall.obj\n 5444:  0002:0001e498       $unwind$?SetCurrentWindow@@YAXPEAUImGuiWindow@@@Z 00000001400b1498     fall.obj\n 5445:  0002:0001e4a0       $unwind$?SetWindowPos@@YAXPEAUImGuiWindow@@AEBUImVec2@@H@Z 00000001400b14a0     fall.obj\n 5446:  0002:0001e4a8       $unwind$?FindHoveredWindow@@YAPEAUImGuiWindow@@UImVec2@@_N@Z 00000001400b14a8     fall.obj\n 5447:  0002:0001e4b0       $unwind$?CreateNewWindow@@YAPEAUImGuiWindow@@PEBDUImVec2@@H@Z 00000001400b14b0     fall.obj\n 5448:  0002:0001e4b8       $unwind$?IsWindowContentHoverable@@YA_NPEAUImGuiWindow@@@Z 00000001400b14b8     fall.obj\n 5449   0002:0001e4c0       $unwind$?ClearSetNextWindowData@@YAXXZ 00000001400b14c0     fall.obj\n 5450:  0002:0001e4c8       $unwind$?CheckStacksSize@@YAXPEAUImGuiWindow@@_N@Z 00000001400b14c8     fall.obj\n 5451:  0002:0001e4d0       $unwind$?Scrollbar@@YAXPEAUImGuiWindow@@_N@Z 00000001400b14d0     fall.obj\n 5452   0002:0001e4dc       $unwind$?AddDrawListToRenderList@@YAXAEAV?$ImVector@PEAUImDrawList@@@@PEAUImDrawList@@@Z 00000001400b14dc     fall.obj\n 5453:  0002:0001e4e4       $unwind$?AddWindowToRenderList@@YAXAEAV?$ImVector@PEAUImDrawList@@@@PEAUImGuiWindow@@@Z 00000001400b14e4     fall.obj\n 5454:  0002:0001e4ec       $unwind$?AddWindowToSortedBuffer@@YAXAEAV?$ImVector@PEAUImGuiWindow@@@@PEAUImGuiWindow@@@Z 00000001400b14ec     fall.obj\n 5455:  0002:0001e4f4       $unwind$?FindWindowSettings@@YAPEAUImGuiIniData@@PEBD@Z 00000001400b14f4     fall.obj\n 5456:  0002:0001e4fc       $unwind$?AddWindowSettings@@YAPEAUImGuiIniData@@PEBD@Z 00000001400b14fc     fall.obj\n 5457   0002:0001e504       $unwind$?LoadIniSettingsFromDisk@@YAXPEBD@Z 00000001400b1504     fall.obj\n 5458   0002:0001e514       $unwind$?SaveIniSettingsToDisk@@YAXPEBD@Z 00000001400b1514     fall.obj\n ....\n 5465   0002:0001e554       $unwind$?ClosePopup@@YAXI@Z 00000001400b1554     fall.obj\n 5466   0002:0001e55c       $unwind$?IsPopupOpen@@YA_NI@Z 00000001400b155c     fall.obj\n 5467:  0002:0001e564       $unwind$?GetFrontMostModalRootWindow@@YAPEAUImGuiWindow@@XZ 00000001400b1564     fall.obj\n 5468   0002:0001e56c       $unwind$?FindBestPopupWindowPos@@YA?AUImVec2@@AEBU1@0PEAHAEBUImRect@@@Z 00000001400b156c     fall.obj\n 5469:  0002:0001e574       $unwind$?InputTextFilterCharacter@@YA_NPEAIHP6AHPEAUImGuiTextEditCallbackData@@@ZPEAX@Z 00000001400b1574     fall.obj\n 5470   0002:0001e57c       $unwind$?InputTextCalcTextLenAndLineCount@@YAHPEBDPEAPEBD@Z 00000001400b157c     fall.obj\n 5471   0002:0001e584       $unwind$?InputTextCalcTextSizeW@@YA?AUImVec2@@PEBG0PEAPEBGPEAU1@_N@Z 00000001400b1584     fall.obj\n 5472:  0002:0001e58c       $unwind$?DataTypeFormatString@@YAXW4ImGuiDataType@@PEAXPEBDPEADH@Z 00000001400b158c     fall.obj\n 5473:  0002:0001e594       $unwind$?DataTypeFormatString@@YAXW4ImGuiDataType@@PEAXHPEADH@Z 00000001400b1594     fall.obj\n 5474:  0002:0001e59c       $unwind$?DataTypeApplyOpFromText@@YA_NPEBD0W4ImGuiDataType@@PEAX0@Z 00000001400b159c     fall.obj\n 5475   0002:0001e5a4       $unwind$?GetClipboardTextFn_DefaultImpl@@YAPEBDPEAX@Z 00000001400b15a4     fall.obj\n 5476   0002:0001e5ac       $unwind$?SetClipboardTextFn_DefaultImpl@@YAXPEAXPEBD@Z 00000001400b15ac     fall.obj\n 5477   0002:0001e5b4       $unwind$?ImeSetInputScreenPosFn_DefaultImpl@@YAXHH@Z 00000001400b15b4     fall.obj\n 5478   0002:0001e5c4       $unwind$?ImStrncpy@@YAXPEADPEBDH@Z 00000001400b15c4     fall.obj\n 5479:  0002:0001e5cc       $unwind$?LowerBound@@YAPEAUPair@ImGuiStorage@@AEAV?$ImVector@UPair@ImGuiStorage@@@@I@Z 00000001400b15cc     fall.obj\n 5480   0002:0001e5d4       $unwind$?SetCursorPosYAndSetupDummyPrevLine@@YAXMM@Z 00000001400b15d4     fall.obj\n 5481   0002:0001e5dc       $unwind$?ChildWindowComparer@@YAHPEBX0@Z 00000001400b15dc     fall.obj\n 5482   0002:0001e5e4       $unwind$?BeginChildEx@@YA_NPEBDIAEBUImVec2@@_NH@Z 00000001400b15e4     fall.obj\n 5483:  0002:0001e5f4       $unwind$?ApplySizeFullWithConstraint@@YAXPEAUImGuiWindow@@UImVec2@@@Z 00000001400b15f4     fall.obj\n 5484:  0002:0001e600       $unwind$?GetStyleVarInfo@@YAPEBUImGuiStyleVarInfo@@H@Z 00000001400b1600     fall.obj\n 5485   0002:0001e608       $unwind$?SliderBehaviorCalcRatioFromValue@@YAMMMMMM@Z 00000001400b1608     fall.obj\n 5486   0002:0001e610       $unwind$?Plot_ArrayGetter@@YAMPEAXH@Z 00000001400b1610     fall.obj\n 5487:  0002:0001e618       $unwind$?STB_TEXTEDIT_GETCHAR@ImGuiStb@@YAGPEBUImGuiTextEditState@@H@Z 00000001400b1618     fall.obj\n 5488:  0002:0001e620       $unwind$?STB_TEXTEDIT_GETWIDTH@ImGuiStb@@YAMPEAUImGuiTextEditState@@HH@Z 00000001400b1620     fall.obj\n 5489:  0002:0001e628       $unwind$?STB_TEXTEDIT_KEYTOTEXT@ImGuiStb@@YAHH@Z 00000001400b1628     fall.obj\n 5490:  0002:0001e630       $unwind$?STB_TEXTEDIT_LAYOUTROW@ImGuiStb@@YAXPEAUStbTexteditRow@1@PEAUImGuiTextEditState@@H@Z 00000001400b1630     fall.obj\n 5491:  0002:0001e638       $unwind$?is_separator@ImGuiStb@@YA_NI@Z 00000001400b1638     fall.obj\n 5492:  0002:0001e640       $unwind$?is_word_boundary_from_right@ImGuiStb@@YAHPEAUImGuiTextEditState@@H@Z 00000001400b1640     fall.obj\n 5493:  0002:0001e648       $unwind$?STB_TEXTEDIT_MOVEWORDLEFT_IMPL@ImGuiStb@@YAHPEAUImGuiTextEditState@@H@Z 00000001400b1648     fall.obj\n 5494:  0002:0001e650       $unwind$?STB_TEXTEDIT_MOVEWORDRIGHT_IMPL@ImGuiStb@@YAHPEAUImGuiTextEditState@@H@Z 00000001400b1650     fall.obj\n 5495:  0002:0001e658       $unwind$?STB_TEXTEDIT_DELETECHARS@ImGuiStb@@YAXPEAUImGuiTextEditState@@HH@Z 00000001400b1658     fall.obj\n 5496:  0002:0001e660       $unwind$?STB_TEXTEDIT_INSERTCHARS@ImGuiStb@@YA_NPEAUImGuiTextEditState@@HPEBGH@Z 00000001400b1660     fall.obj\n 5497:  0002:0001e668       $unwind$?stb_text_locate_coord@ImGuiStb@@YAHPEAUImGuiTextEditState@@MM@Z 00000001400b1668     fall.obj\n 5498:  0002:0001e678       $unwind$?stb_textedit_click@ImGuiStb@@YAXPEAUImGuiTextEditState@@PEAUSTB_TexteditState@1@MM@Z 00000001400b1678     fall.obj\n 5499:  0002:0001e680       $unwind$?stb_textedit_drag@ImGuiStb@@YAXPEAUImGuiTextEditState@@PEAUSTB_TexteditState@1@MM@Z 00000001400b1680     fall.obj\n 5500:  0002:0001e688       $unwind$?stb_text_undo@ImGuiStb@@YAXPEAUImGuiTextEditState@@PEAUSTB_TexteditState@1@@Z 00000001400b1688     fall.obj\n 5501:  0002:0001e69c       $unwind$?stb_text_redo@ImGuiStb@@YAXPEAUImGuiTextEditState@@PEAUSTB_TexteditState@1@@Z 00000001400b169c     fall.obj\n 5502:  0002:0001e6b0       $unwind$?stb_text_makeundo_delete@ImGuiStb@@YAXPEAUImGuiTextEditState@@PEAUSTB_TexteditState@1@HH@Z 00000001400b16b0     fall.obj\n 5503:  0002:0001e6b8       $unwind$?stb_text_makeundo_insert@ImGuiStb@@YAXPEAUSTB_TexteditState@1@HH@Z 00000001400b16b8     fall.obj\n 5504:  0002:0001e6c0       $unwind$?stb_text_makeundo_replace@ImGuiStb@@YAXPEAUImGuiTextEditState@@PEAUSTB_TexteditState@1@HHH@Z 00000001400b16c0     fall.obj\n 5505:  0002:0001e6c8       $unwind$?stb_textedit_find_charpos@ImGuiStb@@YAXPEAUStbFindState@1@PEAUImGuiTextEditState@@HH@Z 00000001400b16c8     fall.obj\n 5506:  0002:0001e6d8       $unwind$?stb_textedit_clamp@ImGuiStb@@YAXPEAUImGuiTextEditState@@PEAUSTB_TexteditState@1@@Z 00000001400b16d8     fall.obj\n 5507:  0002:0001e6e0       $unwind$?stb_textedit_delete@ImGuiStb@@YAXPEAUImGuiTextEditState@@PEAUSTB_TexteditState@1@HH@Z 00000001400b16e0     fall.obj\n 5508:  0002:0001e6e8       $unwind$?stb_textedit_delete_selection@ImGuiStb@@YAXPEAUImGuiTextEditState@@PEAUSTB_TexteditState@1@@Z 00000001400b16e8     fall.obj\n 5509:  0002:0001e6f0       $unwind$?stb_textedit_sortselection@ImGuiStb@@YAXPEAUSTB_TexteditState@1@@Z 00000001400b16f0     fall.obj\n 5510:  0002:0001e6f8       $unwind$?stb_textedit_move_to_first@ImGuiStb@@YAXPEAUSTB_TexteditState@1@@Z 00000001400b16f8     fall.obj\n 5511:  0002:0001e700       $unwind$?stb_textedit_move_to_last@ImGuiStb@@YAXPEAUImGuiTextEditState@@PEAUSTB_TexteditState@1@@Z 00000001400b1700     fall.obj\n 5512:  0002:0001e708       $unwind$?stb_textedit_cut@ImGuiStb@@YAHPEAUImGuiTextEditState@@PEAUSTB_TexteditState@1@@Z 00000001400b1708     fall.obj\n 5513:  0002:0001e710       $unwind$?stb_textedit_paste@ImGuiStb@@YAHPEAUImGuiTextEditState@@PEAUSTB_TexteditState@1@PEBGH@Z 00000001400b1710     fall.obj\n 5514:  0002:0001e718       $unwind$?stb_textedit_key@ImGuiStb@@YAXPEAUImGuiTextEditState@@PEAUSTB_TexteditState@1@H@Z 00000001400b1718     fall.obj\n 5515:  0002:0001e728       $unwind$?stb_textedit_discard_undo@ImGuiStb@@YAXPEAUStbUndoState@1@@Z 00000001400b1728     fall.obj\n 5516:  0002:0001e730       $unwind$?stb_textedit_discard_redo@ImGuiStb@@YAXPEAUStbUndoState@1@@Z 00000001400b1730     fall.obj\n 5517:  0002:0001e738       $unwind$?stb_text_create_undo_record@ImGuiStb@@YAPEAUStbUndoRecord@1@PEAUStbUndoState@1@H@Z 00000001400b1738     fall.obj\n 5518:  0002:0001e740       $unwind$?stb_text_createundo@ImGuiStb@@YAPEAGPEAUStbUndoState@1@HHH@Z 00000001400b1740     fall.obj\n 5519:  0002:0001e748       $unwind$?stb_textedit_initialize_state@ImGuiStb@@YAXPEAUSTB_TexteditState@1@H@Z 00000001400b1748     fall.obj\n 5520   0002:0001e750       $unwind$?Items_ArrayGetter@@YA_NPEAXHPEAPEBD@Z 00000001400b1750     fall.obj\n 5521   0002:0001e758       $unwind$?Items_SingleStringGetter@@YA_NPEAXHPEAPEBD@Z 00000001400b1758     fall.obj\n ....\n 5599   0002:0001ea44       $unwind$?stb_decompress_token@@YAPEAEPEAE@Z 00000001400b1a44     fall.obj\n 5600   0002:0001ea4c       $unwind$?stb_adler32@@YAIIPEAEI@Z 00000001400b1a4c     fall.obj\n 5601:  0002:0001ea54       $unwind$?ImGui_ImplSdlGL3_RenderDrawLists@@YAXPEAUImDrawData@@@Z 00000001400b1a54     fall.obj\n 5602:  0002:0001ea64       $unwind$?ImGui_ImplSdlGL3_GetClipboardText@@YAPEBDPEAX@Z 00000001400b1a64     fall.obj\n 5603:  0002:0001ea6c       $unwind$?ImGui_ImplSdlGL3_SetClipboardText@@YAXPEAXPEBD@Z 00000001400b1a6c     fall.obj\n 5604:  0002:0001ea74       $unwind$?ImGui_ImplSdlGL3_CreateFontsTexture@@YAXXZ 00000001400b1a74     fall.obj\n 5605   0002:0001ea7c       $unwind$?stbi__cpuid3@@YAHXZ 00000001400b1a7c     fall.obj\n 5606   0002:0001ea8c       $unwind$?stbi__sse2_available@@YAHXZ 00000001400b1a8c     fall.obj\n ....\n 5796   0002:0001f14c       $unwind$?use_program_begin@@YAXPEAUOpenGLProgramBase@@@Z 00000001400b214c     fall.obj\n 5797   0002:0001f154       $unwind$?use_program_end@@YAXPEAUOpenGLProgramBase@@@Z 00000001400b2154     fall.obj\n 5798:  0002:0001f15c       $unwind$?is_blank@TextRange@ImGuiTextFilter@@SA_ND@Z 00000001400b215c     fall.obj\n 5799   0002:0001f164       $unwind$_putwch_nolock     00000001400b2164     libucrt:putwch.obj\n 5800:  0002:0001f164       $unwind$??0ImGuiTextBuffer@@QEAA@XZ 00000001400b2164     fall.obj\n 5801   0002:0001f164       $unwind$__report_gsfailure 00000001400b2164     LIBCMT:gs_report.obj\n 5802:  0002:0001f164       $unwind$?TitleBarHeight@ImGuiWindow@@QEBAMXZ 00000001400b2164     fall.obj\n 5803:  0002:0001f164       $unwind$?MenuBarHeight@ImGuiWindow@@QEBAMXZ 00000001400b2164     fall.obj\n 5804   0002:0001f164       $unwind$_freea             00000001400b2164     fall.obj\n 5805:  0002:0001f164       $unwind$?clear@ImGuiTextBuffer@@QEAAXXZ 00000001400b2164     fall.obj\n 5806:  0002:0001f16c       $unwind$?insert@?$ImVector@UPair@ImGuiStorage@@@@QEAAPEAUPair@ImGuiStorage@@PEBU23@AEBU23@@Z 00000001400b216c     fall.obj\n 5807   0002:0001f178       $unwind$??0ImColor@@QEAA@HHHH@Z 00000001400b2178     fall.obj\n 5808   0002:0001f180       $unwind$??BImColor@@QEBA?AUImVec4@@XZ 00000001400b2180     fall.obj\n ....\n 5814   0002:0001f188       $unwind$?_grow_capacity@?$ImVector@PEAUImFont@@@@QEAAHH@Z 00000001400b2188     fall.obj\n 5815   0002:0001f188       $unwind$?_grow_capacity@?$ImVector@UImFontConfig@@@@QEAAHH@Z 00000001400b2188     fall.obj\n 5816:  0002:0001f188       $unwind$?_grow_capacity@?$ImVector@UImGuiColMod@@@@QEAAHH@Z 00000001400b2188     fall.obj\n 5817   0002:0001f188       $unwind$?_grow_capacity@?$ImVector@UImVec4@@@@QEAAHH@Z 00000001400b2188     fall.obj\n 5818   0002:0001f188       $unwind$?_grow_capacity@?$ImVector@Ustbrp_rect@@@@QEAAHH@Z 00000001400b2188     fall.obj\n 5819   0002:0001f188       $unwind$?_grow_capacity@?$ImVector@I@@QEAAHH@Z 00000001400b2188     fall.obj\n 5820   0002:0001f188       $unwind$?_grow_capacity@?$ImVector@PEAX@@QEAAHH@Z 00000001400b2188     fall.obj\n 5821:  0002:0001f188       $unwind$?_grow_capacity@?$ImVector@PEAUImGuiWindow@@@@QEAAHH@Z 00000001400b2188     fall.obj\n 5822:  0002:0001f188       $unwind$?_grow_capacity@?$ImVector@UImGuiPopupRef@@@@QEAAHH@Z 00000001400b2188     fall.obj\n 5823:  0002:0001f188       $unwind$?_grow_capacity@?$ImVector@UImGuiColumnData@@@@QEAAHH@Z 00000001400b2188     fall.obj\n 5824:  0002:0001f188       $unwind$?_grow_capacity@?$ImVector@UTextRange@ImGuiTextFilter@@@@QEAAHH@Z 00000001400b2188     fall.obj\n 5825:  0002:0001f188       $unwind$?_grow_capacity@?$ImVector@UImGuiGroupData@@@@QEAAHH@Z 00000001400b2188     fall.obj\n 5826   0002:0001f188       $unwind$?_grow_capacity@?$ImVector@PEAUImDrawList@@@@QEAAHH@Z 00000001400b2188     fall.obj\n 5827   0002:0001f188       $unwind$?_grow_capacity@?$ImVector@UGlyph@ImFont@@@@QEAAHH@Z 00000001400b2188     fall.obj\n 5828:  0002:0001f188       $unwind$?_grow_capacity@?$ImVector@UImGuiStyleMod@@@@QEAAHH@Z 00000001400b2188     fall.obj\n 5829   0002:0001f188       $unwind$?_grow_capacity@?$ImVector@UImDrawCmd@@@@QEAAHH@Z 00000001400b2188     fall.obj\n 5830:  0002:0001f188       $unwind$?_grow_capacity@?$ImVector@UImGuiIniData@@@@QEAAHH@Z 00000001400b2188     fall.obj\n 5831   0002:0001f188       $unwind$?_grow_capacity@?$ImVector@M@@QEAAHH@Z 00000001400b2188     fall.obj\n 5832   0002:0001f188       $unwind$?_grow_capacity@?$ImVector@UImVec2@@@@QEAAHH@Z 00000001400b2188     fall.obj\n ....\n 5844   0002:0001f190       $unwind$?push_back@?$ImVector@_N@@QEAAXAEB_N@Z 00000001400b2190     fall.obj\n 5845   0002:0001f190       $unwind$?GetTR@ImRect@@QEBA?AUImVec2@@XZ 00000001400b2190     fall.obj\n 5846:  0002:0001f190       $unwind$?push_back@?$ImVector@PEAUImGuiWindow@@@@QEAAXAEBQEAUImGuiWindow@@@Z 00000001400b2190     fall.obj\n 5847   0002:0001f190       $unwind$?push_back@?$ImVector@PEAUImFont@@@@QEAAXAEBQEAUImFont@@@Z 00000001400b2190     fall.obj\n 5848   0002:0001f190       $unwind$?push_back@?$ImVector@PEAUImDrawList@@@@QEAAXAEBQEAUImDrawList@@@Z 00000001400b2190     fall.obj\n 5849   0002:0001f198       $unwind$?reserve@?$ImVector@UImDrawChannel@@@@QEAAXH@Z 00000001400b2198     fall.obj\n 5850:  0002:0001f198       $unwind$?reserve@?$ImVector@UImGuiPopupRef@@@@QEAAXH@Z 00000001400b2198     fall.obj\n 5851:  0002:0001f198       $unwind$?reserve@?$ImVector@PEAUImGuiWindow@@@@QEAAXH@Z 00000001400b2198     fall.obj\n 5852:  0002:0001f198       $unwind$?reserve@?$ImVector@UPair@ImGuiStorage@@@@QEAAXH@Z 00000001400b2198     fall.obj\n 5853:  0002:0001f198       $unwind$?reserve@?$ImVector@UImGuiGroupData@@@@QEAAXH@Z 00000001400b2198     fall.obj\n 5854   0002:0001f198       $unwind$?reserve@?$ImVector@_N@@QEAAXH@Z 00000001400b2198     fall.obj\n 5855:  0002:0001f198       $unwind$?reserve@?$ImVector@UImGuiColumnData@@@@QEAAXH@Z 00000001400b2198     fall.obj\n 5856   0002:0001f198       $unwind$?reserve@?$ImVector@UImDrawCmd@@@@QEAAXH@Z 00000001400b2198     fall.obj\n 5857:  0002:0001f198       $unwind$?reserve@?$ImVector@UImGuiIniData@@@@QEAAXH@Z 00000001400b2198     fall.obj\n 5858   0002:0001f198       $unwind$?reserve@?$ImVector@UImFontConfig@@@@QEAAXH@Z 00000001400b2198     fall.obj\n 5859   0002:0001f198       $unwind$?reserve@?$ImVector@G@@QEAAXH@Z 00000001400b2198     fall.obj\n 5860   0002:0001f198       $unwind$?PathFillConvex@ImDrawList@@QEAAXI@Z 00000001400b2198     fall.obj\n 5861   0002:0001f198       $unwind$?reserve@?$ImVector@UImDrawVert@@@@QEAAXH@Z 00000001400b2198     fall.obj\n 5862:  0002:0001f198       $unwind$?reserve@?$ImVector@UImGuiColMod@@@@QEAAXH@Z 00000001400b2198     fall.obj\n 5863   0002:0001f198       $unwind$?reserve@?$ImVector@UGlyph@ImFont@@@@QEAAXH@Z 00000001400b2198     fall.obj\n 5864   0002:0001f198       $unwind$?reserve@?$ImVector@UImVec2@@@@QEAAXH@Z 00000001400b2198     fall.obj\n ....\n 5866   0002:0001f198       $unwind$?reserve@?$ImVector@UImVec4@@@@QEAAXH@Z 00000001400b2198     fall.obj\n 5867   0002:0001f198       $unwind$?reserve@?$ImVector@D@@QEAAXH@Z 00000001400b2198     fall.obj\n 5868:  0002:0001f198       $unwind$?reserve@?$ImVector@UTextRange@ImGuiTextFilter@@@@QEAAXH@Z 00000001400b2198     fall.obj\n 5869   0002:0001f198       $unwind$?reserve@?$ImVector@PEAUImDrawList@@@@QEAAXH@Z 00000001400b2198     fall.obj\n 5870   0002:0001f198       $unwind$?reserve@?$ImVector@PEAX@@QEAAXH@Z 00000001400b2198     fall.obj\n 5871   0002:0001f198       $unwind$?reserve@?$ImVector@I@@QEAAXH@Z 00000001400b2198     fall.obj\n 5872   0002:0001f198       $unwind$?reserve@?$ImVector@M@@QEAAXH@Z 00000001400b2198     fall.obj\n 5873:  0002:0001f198       $unwind$?reserve@?$ImVector@UImGuiStyleMod@@@@QEAAXH@Z 00000001400b2198     fall.obj\n 5874   0002:0001f198       $unwind$?reserve@?$ImVector@PEAUImFont@@@@QEAAXH@Z 00000001400b2198     fall.obj\n 5875   0002:0001f1a0       $unwind$_vsnprintf_l       00000001400b21a0     fall.obj\n ....\n 5878   0002:0001f1a0       $unwind$?StringCbVPrintfA@@YAJPEAD_KPEBD0@Z 00000001400b21a0     fall.obj\n 5879   0002:0001f1a8       $unwind$?back@?$ImVector@UGlyph@ImFont@@@@QEAAAEAUGlyph@ImFont@@XZ 00000001400b21a8     fall.obj\n 5880:  0002:0001f1a8       $unwind$??1ImGuiTextEditState@@QEAA@XZ 00000001400b21a8     fall.obj\n 5881:  0002:0001f1a8       $unwind$?clear@?$ImVector@UImGuiStyleMod@@@@QEAAXXZ 00000001400b21a8     fall.obj\n 5882:  0002:0001f1a8       $unwind$?pop_back@?$ImVector@UImGuiStyleMod@@@@QEAAXXZ 00000001400b21a8     fall.obj\n 5883   0002:0001f1a8       $unwind$??1?$ImVector@PEAUImFont@@@@QEAA@XZ 00000001400b21a8     fall.obj\n 5884:  0002:0001f1a8       $unwind$??1?$ImVector@UImGuiStyleMod@@@@QEAA@XZ 00000001400b21a8     fall.obj\n 5885   0002:0001f1a8       $unwind$?clear@?$ImVector@UGlyph@ImFont@@@@QEAAXXZ 00000001400b21a8     fall.obj\n 5886:  0002:0001f1a8       $unwind$??0ImGuiMouseCursorData@@QEAA@XZ 00000001400b21a8     fall.obj\n 5887   0002:0001f1a8       $unwind$?back@?$ImVector@PEAX@@QEAAAEAPEAXXZ 00000001400b21a8     fall.obj\n 5888   0002:0001f1a8       $unwind$?clear@?$ImVector@PEAX@@QEAAXXZ 00000001400b21a8     fall.obj\n 5889:  0002:0001f1a8       $unwind$?pop_back@?$ImVector@UImGuiColMod@@@@QEAAXXZ 00000001400b21a8     fall.obj\n 5890:  0002:0001f1a8       $unwind$??0ImGuiTextEditState@@QEAA@XZ 00000001400b21a8     fall.obj\n 5891   0002:0001f1a8       $unwind$??1?$ImVector@PEAX@@QEAA@XZ 00000001400b21a8     fall.obj\n 5892   0002:0001f1a8       $unwind$?pop_back@?$ImVector@UImVec4@@@@QEAAXXZ 00000001400b21a8     fall.obj\n 5893   0002:0001f1a8       $unwind$?back@?$ImVector@M@@QEAAAEAMXZ 00000001400b21a8     fall.obj\n 5894:  0002:0001f1a8       $unwind$?clear@?$ImVector@PEAUImGuiWindow@@@@QEAAXXZ 00000001400b21a8     fall.obj\n 5895   0002:0001f1a8       $unwind$?pop_back@?$ImVector@I@@QEAAXXZ 00000001400b21a8     fall.obj\n 5896:  0002:0001f1a8       $unwind$??1?$ImVector@UImGuiPopupRef@@@@QEAA@XZ 00000001400b21a8     fall.obj\n 5897:  0002:0001f1a8       $unwind$?back@?$ImVector@UImGuiStyleMod@@@@QEAAAEAUImGuiStyleMod@@XZ 00000001400b21a8     fall.obj\n 5898:  0002:0001f1a8       $unwind$??1ImGuiContext@@QEAA@XZ 00000001400b21a8     fall.obj\n 5899   0002:0001f1a8       $unwind$?clear@?$ImVector@M@@QEAAXXZ 00000001400b21a8     fall.obj\n 5900   0002:0001f1a8       $unwind$?back@?$ImVector@I@@QEAAAEAIXZ 00000001400b21a8     fall.obj\n 5901   0002:0001f1a8       $unwind$?pop_back@?$ImVector@M@@QEAAXXZ 00000001400b21a8     fall.obj\n 5902:  0002:0001f1a8       $unwind$?clear@?$ImVector@UPair@ImGuiStorage@@@@QEAAXXZ 00000001400b21a8     fall.obj\n 5903   0002:0001f1a8       $unwind$??1?$ImVector@I@@QEAA@XZ 00000001400b21a8     fall.obj\n 5904   0002:0001f1a8       $unwind$?back@?$ImVector@UImVec4@@@@QEAAAEAUImVec4@@XZ 00000001400b21a8     fall.obj\n 5905   0002:0001f1a8       $unwind$?clear@?$ImVector@UImVec2@@@@QEAAXXZ 00000001400b21a8     fall.obj\n 5906   0002:0001f1a8       $unwind$??1?$ImVector@UImVec4@@@@QEAA@XZ 00000001400b21a8     fall.obj\n 5907:  0002:0001f1a8       $unwind$?trim_blanks@TextRange@ImGuiTextFilter@@QEAAXXZ 00000001400b21a8     fall.obj\n 5908   0002:0001f1a8       $unwind$?PathClear@ImDrawList@@QEAAXXZ 00000001400b21a8     fall.obj\n 5909   0002:0001f1a8       $unwind$??1?$ImVector@Ustbrp_rect@@@@QEAA@XZ 00000001400b21a8     fall.obj\n 5910:  0002:0001f1a8       $unwind$?back@?$ImVector@UImGuiColMod@@@@QEAAAEAUImGuiColMod@@XZ 00000001400b21a8     fall.obj\n 5911   0002:0001f1a8       $unwind$??1?$ImVector@UImDrawChannel@@@@QEAA@XZ 00000001400b21a8     fall.obj\n 5912   0002:0001f1a8       $unwind$?clear@?$ImVector@UImDrawVert@@@@QEAAXXZ 00000001400b21a8     fall.obj\n ....\n 5918   0002:0001f1a8       $unwind$??1?$ImVector@PEAUImDrawList@@@@QEAA@XZ 00000001400b21a8     fall.obj\n 5919   0002:0001f1a8       $unwind$?back@?$ImVector@_N@@QEAAAEA_NXZ 00000001400b21a8     fall.obj\n 5920:  0002:0001f1a8       $unwind$??1ImGuiDrawContext@@QEAA@XZ 00000001400b21a8     fall.obj\n 5921   0002:0001f1a8       $unwind$??1?$ImVector@UImVec2@@@@QEAA@XZ 00000001400b21a8     fall.obj\n 5922:  0002:0001f1a8       $unwind$?clear@?$ImVector@UImGuiColMod@@@@QEAAXXZ 00000001400b21a8     fall.obj\n 5923   0002:0001f1a8       $unwind$?clear@?$ImVector@G@@QEAAXXZ 00000001400b21a8     fall.obj\n 5924   0002:0001f1a8       $unwind$?front@?$ImVector@D@@QEBAAEBDXZ 00000001400b21a8     fall.obj\n 5925:  0002:0001f1a8       $unwind$??0ImGuiStorage@@QEAA@XZ 00000001400b21a8     fall.obj\n 5926:  0002:0001f1a8       $unwind$?clear@?$ImVector@UImGuiPopupRef@@@@QEAAXXZ 00000001400b21a8     fall.obj\n 5927   0002:0001f1a8       $unwind$??0ImRect@@QEAA@XZ 00000001400b21a8     fall.obj\n 5928   0002:0001f1a8       $unwind$??1?$ImVector@G@@QEAA@XZ 00000001400b21a8     fall.obj\n 5929:  0002:0001f1a8       $unwind$??1?$ImVector@UImGuiColMod@@@@QEAA@XZ 00000001400b21a8     fall.obj\n 5930   0002:0001f1a8       $unwind$?pop_back@?$ImVector@UImDrawCmd@@@@QEAAXXZ 00000001400b21a8     fall.obj\n 5931   0002:0001f1a8       $unwind$?clear@?$ImVector@UImDrawChannel@@@@QEAAXXZ 00000001400b21a8     fall.obj\n 5932:  0002:0001f1a8       $unwind$?CursorClamp@ImGuiTextEditState@@QEAAXXZ 00000001400b21a8     fall.obj\n 5933:  0002:0001f1a8       $unwind$??1?$ImVector@PEAUImGuiWindow@@@@QEAA@XZ 00000001400b21a8     fall.obj\n 5934:  0002:0001f1a8       $unwind$?pop_back@?$ImVector@UImGuiPopupRef@@@@QEAAXXZ 00000001400b21a8     fall.obj\n 5935   0002:0001f1a8       $unwind$?clear@?$ImVector@UImVec4@@@@QEAAXXZ 00000001400b21a8     fall.obj\n 5936   0002:0001f1a8       $unwind$?back@?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@XZ 00000001400b21a8     fall.obj\n 5937   0002:0001f1a8       $unwind$?clear@?$ImVector@UImDrawCmd@@@@QEAAXXZ 00000001400b21a8     fall.obj\n 5938   0002:0001f1a8       $unwind$?clear@?$ImVector@PEAUImFont@@@@QEAAXXZ 00000001400b21a8     fall.obj\n 5939:  0002:0001f1a8       $unwind$??1ImGuiStorage@@QEAA@XZ 00000001400b21a8     fall.obj\n 5940   0002:0001f1a8       $unwind$??1ImDrawList@@QEAA@XZ 00000001400b21a8     fall.obj\n 5941:  0002:0001f1a8       $unwind$?back@?$ImVector@UImGuiIniData@@@@QEAAAEAUImGuiIniData@@XZ 00000001400b21a8     fall.obj\n 5942   0002:0001f1a8       $unwind$??1?$ImVector@UImDrawCmd@@@@QEAA@XZ 00000001400b21a8     fall.obj\n 5943   0002:0001f1a8       $unwind$?back@?$ImVector@UImFontConfig@@@@QEAAAEAUImFontConfig@@XZ 00000001400b21a8     fall.obj\n ....\n 5945   0002:0001f1a8       $unwind$?pop_back@?$ImVector@_N@@QEAAXXZ 00000001400b21a8     fall.obj\n 5946   0002:0001f1a8       $unwind$?clear@?$ImVector@UImFontConfig@@@@QEAAXXZ 00000001400b21a8     fall.obj\n 5947:  0002:0001f1a8       $unwind$?clear@?$ImVector@UImGuiIniData@@@@QEAAXXZ 00000001400b21a8     fall.obj\n 5948:  0002:0001f1a8       $unwind$??1?$ImVector@UImGuiGroupData@@@@QEAA@XZ 00000001400b21a8     fall.obj\n 5949   0002:0001f1a8       $unwind$?back@?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@XZ 00000001400b21a8     fall.obj\n 5950:  0002:0001f1a8       $unwind$?back@?$ImVector@UImGuiGroupData@@@@QEAAAEAUImGuiGroupData@@XZ 00000001400b21a8     fall.obj\n 5951   0002:0001f1a8       $unwind$??1?$ImVector@D@@QEAA@XZ 00000001400b21a8     fall.obj\n 5952   0002:0001f1a8       $unwind$??1?$ImVector@UImFontConfig@@@@QEAA@XZ 00000001400b21a8     fall.obj\n 5953:  0002:0001f1a8       $unwind$??1ImGuiListClipper@@QEAA@XZ 00000001400b21a8     fall.obj\n 5954:  0002:0001f1a8       $unwind$??1?$ImVector@UImGuiIniData@@@@QEAA@XZ 00000001400b21a8     fall.obj\n 5955:  0002:0001f1a8       $unwind$??1?$ImVector@UPair@ImGuiStorage@@@@QEAA@XZ 00000001400b21a8     fall.obj\n 5956:  0002:0001f1a8       $unwind$??0ImGuiColMod@@QEAA@XZ 00000001400b21a8     fall.obj\n 5957:  0002:0001f1a8       $unwind$?pop_back@?$ImVector@PEAUImGuiWindow@@@@QEAAXXZ 00000001400b21a8     fall.obj\n 5958   0002:0001f1a8       $unwind$?pop_back@?$ImVector@PEAUImFont@@@@QEAAXXZ 00000001400b21a8     fall.obj\n 5959   0002:0001f1a8       $unwind$??1?$ImVector@M@@QEAA@XZ 00000001400b21a8     fall.obj\n 5960   0002:0001f1a8       $unwind$??0ImDrawList@@QEAA@XZ 00000001400b21a8     fall.obj\n 5961   0002:0001f1a8       $unwind$?clear@?$ImVector@D@@QEAAXXZ 00000001400b21a8     fall.obj\n 5962:  0002:0001f1a8       $unwind$?begin@ImGuiTextBuffer@@QEBAPEBDXZ 00000001400b21a8     fall.obj\n 5963:  0002:0001f1a8       $unwind$?pop_back@?$ImVector@UImGuiGroupData@@@@QEAAXXZ 00000001400b21a8     fall.obj\n 5964:  0002:0001f1a8       $unwind$?back@?$ImVector@PEAUImGuiWindow@@@@QEAAAEAPEAUImGuiWindow@@XZ 00000001400b21a8     fall.obj\n 5965   0002:0001f1a8       $unwind$?clear@?$ImVector@PEAUImDrawList@@@@QEAAXXZ 00000001400b21a8     fall.obj\n 5966:  0002:0001f1a8       $unwind$??1?$ImVector@UImGuiColumnData@@@@QEAA@XZ 00000001400b21a8     fall.obj\n 5967   0002:0001f1a8       $unwind$?back@?$ImVector@UImVec2@@@@QEAAAEAUImVec2@@XZ 00000001400b21a8     fall.obj\n 5968:  0002:0001f1a8       $unwind$??0ImGuiSizeConstraintCallbackData@@QEAA@XZ 00000001400b21a8     fall.obj\n 5969:  0002:0001f1a8       $unwind$??1ImGuiTextBuffer@@QEAA@XZ 00000001400b21a8     fall.obj\n 5970:  0002:0001f1b0       $unwind$?resize@?$ImVector@UImGuiGroupData@@@@QEAAXH@Z 00000001400b21b0     fall.obj\n 5971   0002:0001f1b0       $unwind$??A?$ImVector@D@@QEAAAEADH@Z 00000001400b21b0     fall.obj\n 5972   0002:0001f1b0       $unwind$??A?$ImVector@UImFontConfig@@@@QEAAAEAUImFontConfig@@H@Z 00000001400b21b0     fall.obj\n 5973:  0002:0001f1b0       $unwind$?resize@?$ImVector@UImGuiColumnData@@@@QEAAXH@Z 00000001400b21b0     fall.obj\n 5974   0002:0001f1b0       $unwind$??A?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@H@Z 00000001400b21b0     fall.obj\n 5975   0002:0001f1b0       $unwind$??A?$ImVector@UImDrawCmd@@@@QEBAAEBUImDrawCmd@@H@Z 00000001400b21b0     fall.obj\n ....\n 5981   0002:0001f1b0       $unwind$?resize@?$ImVector@G@@QEAAXH@Z 00000001400b21b0     fall.obj\n 5982   0002:0001f1b0       $unwind$??A?$ImVector@UImDrawVert@@@@QEAAAEAUImDrawVert@@H@Z 00000001400b21b0     fall.obj\n 5983:  0002:0001f1b0       $unwind$??_GImGuiContext@@QEAAPEAXI@Z 00000001400b21b0     fall.obj\n 5984   0002:0001f1b0       $unwind$?resize@?$ImVector@UImDrawVert@@@@QEAAXH@Z 00000001400b21b0     fall.obj\n 5985   0002:0001f1b0       $unwind$??A?$ImVector@Ustbrp_rect@@@@QEAAAEAUstbrp_rect@@H@Z 00000001400b21b0     fall.obj\n ....\n 5987   0002:0001f1b0       $unwind$?resize@?$ImVector@UImVec4@@@@QEAAXH@Z 00000001400b21b0     fall.obj\n 5988   0002:0001f1b0       $unwind$??A?$ImVector@UGlyph@ImFont@@@@QEAAAEAUGlyph@ImFont@@H@Z 00000001400b21b0     fall.obj\n 5989:  0002:0001f1b0       $unwind$?resize@?$ImVector@UTextRange@ImGuiTextFilter@@@@QEAAXH@Z 00000001400b21b0     fall.obj\n 5990   0002:0001f1b0       $unwind$?resize@?$ImVector@PEAX@@QEAAXH@Z 00000001400b21b0     fall.obj\n 5991   0002:0001f1b0       $unwind$?resize@?$ImVector@I@@QEAAXH@Z 00000001400b21b0     fall.obj\n 5992   0002:0001f1b0       $unwind$?resize@?$ImVector@PEAUImDrawList@@@@QEAAXH@Z 00000001400b21b0     fall.obj\n 5993:  0002:0001f1b0       $unwind$??A?$ImVector@UTextRange@ImGuiTextFilter@@@@QEBAAEBUTextRange@ImGuiTextFilter@@H@Z 00000001400b21b0     fall.obj\n 5994   0002:0001f1b0       $unwind$?resize@?$ImVector@UGlyph@ImFont@@@@QEAAXH@Z 00000001400b21b0     fall.obj\n 5995   0002:0001f1b0       $unwind$??A?$ImVector@PEAUImDrawList@@@@QEAAAEAPEAUImDrawList@@H@Z 00000001400b21b0     fall.obj\n 5996   0002:0001f1b0       $unwind$?resize@?$ImVector@UImVec2@@@@QEAAXH@Z 00000001400b21b0     fall.obj\n 5997:  0002:0001f1b0       $unwind$??A?$ImVector@UTextRange@ImGuiTextFilter@@@@QEAAAEAUTextRange@ImGuiTextFilter@@H@Z 00000001400b21b0     fall.obj\n 5998   0002:0001f1b0       $unwind$??A?$ImVector@UImDrawChannel@@@@QEAAAEAUImDrawChannel@@H@Z 00000001400b21b0     fall.obj\n 5999   0002:0001f1b0       $unwind$?resize@?$ImVector@UImDrawChannel@@@@QEAAXH@Z 00000001400b21b0     fall.obj\n 6000   0002:0001f1b0       $unwind$??A?$ImVector@M@@QEAAAEAMH@Z 00000001400b21b0     fall.obj\n 6001:  0002:0001f1b0       $unwind$?resize@?$ImVector@UImGuiPopupRef@@@@QEAAXH@Z 00000001400b21b0     fall.obj\n 6002   0002:0001f1b0       $unwind$?strchr@@YAPEADQEADH@Z 00000001400b21b0     fall.obj\n 6003   0002:0001f1b0       $unwind$??A?$ImVector@M@@QEBAAEBMH@Z 00000001400b21b0     fall.obj\n 6004:  0002:0001f1b0       $unwind$??A?$ImVector@UImGuiPopupRef@@@@QEAAAEAUImGuiPopupRef@@H@Z 00000001400b21b0     fall.obj\n 6005   0002:0001f1b0       $unwind$?resize@?$ImVector@M@@QEAAXH@Z 00000001400b21b0     fall.obj\n 6006:  0002:0001f1b0       $unwind$?resize@?$ImVector@UImGuiIniData@@@@QEAAXH@Z 00000001400b21b0     fall.obj\n 6007:  0002:0001f1b0       $unwind$??_GImGuiWindow@@QEAAPEAXI@Z 00000001400b21b0     fall.obj\n 6008:  0002:0001f1b0       $unwind$??A?$ImVector@UPair@ImGuiStorage@@@@QEAAAEAUPair@ImGuiStorage@@H@Z 00000001400b21b0     fall.obj\n 6009:  0002:0001f1b0       $unwind$??A?$ImVector@UImGuiIniData@@@@QEAAAEAUImGuiIniData@@H@Z 00000001400b21b0     fall.obj\n 6010   0002:0001f1b0       $unwind$??_GImDrawList@@QEAAPEAXI@Z 00000001400b21b0     fall.obj\n 6011   0002:0001f1b0       $unwind$??_GImFont@@QEAAPEAXI@Z 00000001400b21b0     fall.obj\n 6012:  0002:0001f1b0       $unwind$?resize@?$ImVector@PEAUImGuiWindow@@@@QEAAXH@Z 00000001400b21b0     fall.obj\n 6013:  0002:0001f1b0       $unwind$??A?$ImVector@PEAUImGuiWindow@@@@QEAAAEAPEAUImGuiWindow@@H@Z 00000001400b21b0     fall.obj\n 6014:  0002:0001f1b0       $unwind$??_GImGuiTextBuffer@@QEAAPEAXI@Z 00000001400b21b0     fall.obj\n 6015:  0002:0001f1b0       $unwind$??A?$ImVector@UImGuiColumnData@@@@QEAAAEAUImGuiColumnData@@H@Z 00000001400b21b0     fall.obj\n 6016   0002:0001f1b8       $unwind$?StringCbPrintfA@@YAJPEAD_KPEBDZZ 00000001400b21b8     fall.obj\n 6017   0002:0001f1c0       $unwind$??0ImRect@@QEAA@MMMM@Z 00000001400b21c0     fall.obj\n 6018   0002:0001f1c8       $unwind$?Contains@ImRect@@QEBA_NAEBUImVec2@@@Z 00000001400b21c8     fall.obj\n 6019:  0002:0001f1c8       $unwind$?swap@?$ImVector@PEAUImGuiWindow@@@@QEAAXAEAV1@@Z 00000001400b21c8     fall.obj\n 6020   0002:0001f1c8       $unwind$?swap@?$ImVector@UImDrawVert@@@@QEAAXAEAV1@@Z 00000001400b21c8     fall.obj\n 6021   0002:0001f1c8       $unwind$?Overlaps@ImRect@@QEBA_NAEBU1@@Z 00000001400b21c8     fall.obj\n 6022   0002:0001f1d0       $unwind$?GetClosestPoint@ImRect@@QEBA?AUImVec2@@U2@_N@Z 00000001400b21d0     fall.obj\n 6023   0002:0001f1d8       $unwind$?empty@?$ImVector@G@@QEBA_NXZ 00000001400b21d8     fall.obj\n 6024:  0002:0001f1d8       $unwind$?empty@?$ImVector@UTextRange@ImGuiTextFilter@@@@QEBA_NXZ 00000001400b21d8     fall.obj\n 6025   0002:0001f1d8       $unwind$?empty@?$ImVector@M@@QEBA_NXZ 00000001400b21d8     fall.obj\n 6026   0002:0001f1d8       $unwind$?empty@?$ImVector@PEAX@@QEBA_NXZ 00000001400b21d8     fall.obj\n 6027:  0002:0001f1d8       $unwind$?HasSelection@ImGuiTextEditState@@QEBA_NXZ 00000001400b21d8     fall.obj\n 6028   0002:0001f1d8       $unwind$?IsLoaded@ImFont@@QEBA_NXZ 00000001400b21d8     fall.obj\n 6029   0002:0001f1d8       $unwind$_MallocaComputeSize 00000001400b21d8     fall.obj\n 6030:  0002:0001f1d8       $unwind$?empty@?$ImVector@PEAUImGuiWindow@@@@QEBA_NXZ 00000001400b21d8     fall.obj\n 6031   0002:0001f1d8       $unwind$?empty@?$ImVector@_N@@QEBA_NXZ 00000001400b21d8     fall.obj\n 6032:  0002:0001f1d8       $unwind$?empty@?$ImVector@UImGuiPopupRef@@@@QEBA_NXZ 00000001400b21d8     fall.obj\n 6033   0002:0001f1d8       $unwind$?empty@?$ImVector@UGlyph@ImFont@@@@QEBA_NXZ 00000001400b21d8     fall.obj\n 6034:  0002:0001f1d8       $unwind$?empty@?$ImVector@UImGuiIniData@@@@QEBA_NXZ 00000001400b21d8     fall.obj\n 6035   0002:0001f1d8       $unwind$?empty@?$ImVector@UImDrawCmd@@@@QEBA_NXZ 00000001400b21d8     fall.obj\n 6036   0002:0001f1d8       $unwind$?empty@?$ImVector@PEAUImFont@@@@QEBA_NXZ 00000001400b21d8     fall.obj\n 6037   0002:0001f1d8       $unwind$?empty@?$ImVector@UImFontConfig@@@@QEBA_NXZ 00000001400b21d8     fall.obj\n 6038:  0002:0001f1d8       $unwind$?empty@?$ImVector@UImGuiGroupData@@@@QEBA_NXZ 00000001400b21d8     fall.obj\n 6039:  0002:0001f1d8       $unwind$?empty@TextRange@ImGuiTextFilter@@QEBA_NXZ 00000001400b21d8     fall.obj\n 6040   0002:0001f1d8       $unwind$?empty@?$ImVector@UImDrawVert@@@@QEBA_NXZ 00000001400b21d8     fall.obj\n 6041   0002:0001f1d8       $unwind$?empty@?$ImVector@PEAUImDrawList@@@@QEBA_NXZ 00000001400b21d8     fall.obj\n 6042:  0002:0001f1e0       $unwind$??0ImGuiPopupRef@@QEAA@IPEAUImGuiWindow@@IAEBUImVec2@@@Z 00000001400b21e0     fall.obj\n 6043   0002:0001f1e8       $unwind$?push_back@?$ImVector@Ustbrp_rect@@@@QEAAXAEBUstbrp_rect@@@Z 00000001400b21e8     fall.obj\n 6044   0002:0001f1e8       $unwind$?push_back@?$ImVector@UImDrawCmd@@@@QEAAXAEBUImDrawCmd@@@Z 00000001400b21e8     fall.obj\n 6045:  0002:0001f1e8       $unwind$?push_back@?$ImVector@UImGuiStyleMod@@@@QEAAXAEBUImGuiStyleMod@@@Z 00000001400b21e8     fall.obj\n 6046   0002:0001f1e8       $unwind$?push_back@?$ImVector@UImFontConfig@@@@QEAAXAEBUImFontConfig@@@Z 00000001400b21e8     fall.obj\n 6047:  0002:0001f1e8       $unwind$?push_back@?$ImVector@UImGuiColMod@@@@QEAAXAEBUImGuiColMod@@@Z 00000001400b21e8     fall.obj\n 6048:  0002:0001f1e8       $unwind$?push_back@?$ImVector@UImGuiPopupRef@@@@QEAAXAEBUImGuiPopupRef@@@Z 00000001400b21e8     fall.obj\n 6049   0002:0001f1e8       $unwind$?push_back@?$ImVector@UImVec4@@@@QEAAXAEBUImVec4@@@Z 00000001400b21e8     fall.obj\n 6050:  0002:0001f1e8       $unwind$?push_back@?$ImVector@UTextRange@ImGuiTextFilter@@@@QEAAXAEBUTextRange@ImGuiTextFilter@@@Z 00000001400b21e8     fall.obj\n 6051:  0002:0001f1f4       $unwind$??0ImGuiContext@@QEAA@XZ 00000001400b21f4     fall.obj\n 6052:  0002:0001f200       $unwind$??0ImGuiDrawContext@@QEAA@XZ 00000001400b2200     fall.obj\n 6053:  0002:0001f20c       $unwind$?erase@?$ImVector@PEAUImGuiWindow@@@@QEAAPEAPEAUImGuiWindow@@PEBQEAU2@@Z 00000001400b220c     fall.obj\n 6054   0002:0001f20c       $unwind$?GetCharAdvance@ImFont@@QEBAMG@Z 00000001400b220c     fall.obj\n 6055:  0002:0001f20c       $unwind$?TitleBarRect@ImGuiWindow@@QEBA?AUImRect@@XZ 00000001400b220c     fall.obj\n 6056:  0002:0001f20c       $unwind$?NodeWindows@Funcs@?4??ShowMetricsWindow@ImGui@@YAXPEA_N@Z@SAXAEAV?$ImVector@PEAUImGuiWindow@@@@PEBD@Z 00000001400b220c     fall.obj\n 6057:  0002:0001f20c       $unwind$?Rect@ImGuiWindow@@QEBA?AUImRect@@XZ 00000001400b220c     fall.obj\n 6058   0002:0001f214       $unwind$strrchr            00000001400b2214     libvcruntime:strrchr.obj\n 6059   0002:0001f214       $unwind$strchr             00000001400b2214     libvcruntime:strchr.obj\n 6060:  0002:0001f214       $unwind$?GetCurrentWindowRead@ImGui@@YAPEAUImGuiWindow@@XZ 00000001400b2214     fall.obj\n 6061:  0002:0001f214       $unwind$?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ 00000001400b2214     fall.obj\n 6062   0002:0001f214       $unwind$wcschr             00000001400b2214     libvcruntime:wcschr.obj\n 6063:  0002:0001f21c       $unwind$?NodeDrawList@Funcs@?4??ShowMetricsWindow@ImGui@@YAXPEA_N@Z@SAXPEAUImDrawList@@PEBD@Z 00000001400b221c     fall.obj\n 6064:  0002:0001f22c       $unwind$?MenuBarRect@ImGuiWindow@@QEBA?AUImRect@@XZ 00000001400b222c     fall.obj\n 6065:  0002:0001f22c       $unwind$?NodeWindow@Funcs@?4??ShowMetricsWindow@ImGui@@YAXPEA_N@Z@SAXPEAUImGuiWindow@@PEBD@Z 00000001400b222c     fall.obj\n 6066   0002:0001f234       $unwind$__scrt_is_nonwritable_in_current_image 00000001400b2234     LIBCMT:utility.obj\n 6067   0002:0001f254       $unwind$__scrt_is_nonwritable_in_current_image$filt$0 00000001400b2254     LIBCMT:utility.obj\n ....\n 6696   0003:00000010       ?stbi__h2l_gamma_i@@3MA    00000001400b5010     fall.obj\n 6697   0003:00000014       ?stbi__h2l_scale_i@@3MA    00000001400b5014     fall.obj\n 6698:  0003:00000018       ?STB_TEXTEDIT_NEWLINE@ImGuiStb@@3GA 00000001400b5018     fall.obj\n 6699   0003:00000020       ?stbi__zlength_base@@3PAHA 00000001400b5020     fall.obj\n 6700   0003:000000a0       ?stbi__zlength_extra@@3PAHA 00000001400b50a0     fall.obj\n ....\n 6706   0003:00000290       ?stbi__jpeg_dezigzag@@3PAEA 00000001400b5290     fall.obj\n 6707   0003:000002e0       ?stbi__depth_scale_table@@3PAEA 00000001400b52e0     fall.obj\n 6708:  0003:000002e9       ?show_clip_rects@?4??ShowMetricsWindow@ImGui@@YAXPEA_N@Z@4_NA 00000001400b52e9     fall.obj\n 6709   0003:000002f0       ?base_ranges@?1??GetGlyphRangesJapanese@ImFontAtlas@@QEAAPEBGXZ@4PAGA 00000001400b52f0     fall.obj\n 6710   0003:00000300       ?rgb@?BC@??stbi__process_frame_header@@YAHPEAUstbi__jpeg@@H@Z@4PAEA 00000001400b5300     fall.obj\n ....\n 6750   0003:000027b0       ?GImDefaultFontAtlas@@3UImFontAtlas@@A 00000001400b77b0     fall.obj\n 6751   0003:00002800       ?GNullClipRect@@3UImVec4@@B 00000001400b7800     fall.obj\n 6752:  0003:00002810       ?GImDefaultContext@@3UImGuiContext@@A 00000001400b7810     fall.obj\n 6753   0003:000061d0       ?stb__barrier@@3PEAEEA     00000001400bb1d0     fall.obj\n 6754   0003:000061d8       ?stb__barrier2@@3PEAEEA    00000001400bb1d8     fall.obj\n ....\n 6809   0004:00000018       $pdata$??__EGNullClipRect@@YAXXZ 00000001400bf018     fall.obj\n 6810   0004:00000024       $pdata$WinMain             00000001400bf024     fall.obj\n 6811:  0004:00000030       $pdata$?GetDrawData@ImGui@@YAPEAUImDrawData@@XZ 00000001400bf030     fall.obj\n 6812:  0004:0000003c       $pdata$?NewFrame@ImGui@@YAXXZ 00000001400bf03c     fall.obj\n 6813:  0004:00000048       $pdata$?Render@ImGui@@YAXXZ 00000001400bf048     fall.obj\n 6814:  0004:00000054       $pdata$?Shutdown@ImGui@@YAXXZ 00000001400bf054     fall.obj\n 6815:  0004:00000060       $pdata$?ShowMetricsWindow@ImGui@@YAXPEA_N@Z 00000001400bf060     fall.obj\n 6816:  0004:0000006c       $pdata$?Begin@ImGui@@YA_NPEBDPEA_NH@Z 00000001400bf06c     fall.obj\n 6817:  0004:00000078       $pdata$?Begin@ImGui@@YA_NPEBDPEA_NAEBUImVec2@@MH@Z 00000001400bf078     fall.obj\n 6818:  0004:00000084       $pdata$?End@ImGui@@YAXXZ   00000001400bf084     fall.obj\n 6819:  0004:00000090       $pdata$?BeginChild@ImGui@@YA_NPEBDAEBUImVec2@@_NH@Z 00000001400bf090     fall.obj\n 6820:  0004:0000009c       $pdata$?BeginChild@ImGui@@YA_NIAEBUImVec2@@_NH@Z 00000001400bf09c     fall.obj\n 6821:  0004:000000a8       $pdata$?EndChild@ImGui@@YAXXZ 00000001400bf0a8     fall.obj\n 6822:  0004:000000b4       $pdata$?GetContentRegionMax@ImGui@@YA?AUImVec2@@XZ 00000001400bf0b4     fall.obj\n 6823:  0004:000000c0       $pdata$?GetContentRegionAvail@ImGui@@YA?AUImVec2@@XZ 00000001400bf0c0     fall.obj\n 6824:  0004:000000cc       $pdata$?GetContentRegionAvailWidth@ImGui@@YAMXZ 00000001400bf0cc     fall.obj\n 6825:  0004:000000d8       $pdata$?GetWindowContentRegionMin@ImGui@@YA?AUImVec2@@XZ 00000001400bf0d8     fall.obj\n 6826:  0004:000000e4       $pdata$?GetWindowContentRegionMax@ImGui@@YA?AUImVec2@@XZ 00000001400bf0e4     fall.obj\n 6827:  0004:000000f0       $pdata$?GetWindowContentRegionWidth@ImGui@@YAMXZ 00000001400bf0f0     fall.obj\n 6828:  0004:000000fc       $pdata$?GetWindowDrawList@ImGui@@YAPEAUImDrawList@@XZ 00000001400bf0fc     fall.obj\n 6829:  0004:00000108       $pdata$?GetWindowPos@ImGui@@YA?AUImVec2@@XZ 00000001400bf108     fall.obj\n 6830:  0004:00000114       $pdata$?GetWindowSize@ImGui@@YA?AUImVec2@@XZ 00000001400bf114     fall.obj\n 6831:  0004:00000120       $pdata$?GetWindowWidth@ImGui@@YAMXZ 00000001400bf120     fall.obj\n 6832:  0004:0000012c       $pdata$?GetWindowHeight@ImGui@@YAMXZ 00000001400bf12c     fall.obj\n 6833:  0004:00000138       $pdata$?SetWindowFontScale@ImGui@@YAXM@Z 00000001400bf138     fall.obj\n 6834:  0004:00000144       $pdata$?SetNextWindowPos@ImGui@@YAXAEBUImVec2@@H@Z 00000001400bf144     fall.obj\n 6835:  0004:00000150       $pdata$?SetNextWindowPosCenter@ImGui@@YAXH@Z 00000001400bf150     fall.obj\n 6836:  0004:0000015c       $pdata$?SetNextWindowSize@ImGui@@YAXAEBUImVec2@@H@Z 00000001400bf15c     fall.obj\n 6837:  0004:00000168       $pdata$?SetNextWindowSizeConstraints@ImGui@@YAXAEBUImVec2@@0P6AXPEAUImGuiSizeConstraintCallbackData@@@ZPEAX@Z 00000001400bf168     fall.obj\n 6838:  0004:00000174       $pdata$?SetNextWindowContentSize@ImGui@@YAXAEBUImVec2@@@Z 00000001400bf174     fall.obj\n 6839:  0004:00000180       $pdata$?SetNextWindowContentWidth@ImGui@@YAXM@Z 00000001400bf180     fall.obj\n 6840:  0004:0000018c       $pdata$?SetNextWindowCollapsed@ImGui@@YAX_NH@Z 00000001400bf18c     fall.obj\n 6841:  0004:00000198       $pdata$?SetNextWindowFocus@ImGui@@YAXXZ 00000001400bf198     fall.obj\n 6842:  0004:000001a4       $pdata$?SetWindowPos@ImGui@@YAXAEBUImVec2@@H@Z 00000001400bf1a4     fall.obj\n 6843:  0004:000001b0       $pdata$?SetWindowSize@ImGui@@YAXAEBUImVec2@@H@Z 00000001400bf1b0     fall.obj\n 6844:  0004:000001bc       $pdata$?SetWindowCollapsed@ImGui@@YAX_NH@Z 00000001400bf1bc     fall.obj\n 6845:  0004:000001c8       $pdata$?SetWindowFocus@ImGui@@YAXXZ 00000001400bf1c8     fall.obj\n 6846:  0004:000001d4       $pdata$?SetWindowPos@ImGui@@YAXPEBDAEBUImVec2@@H@Z 00000001400bf1d4     fall.obj\n 6847:  0004:000001e0       $pdata$?SetWindowSize@ImGui@@YAXPEBDAEBUImVec2@@H@Z 00000001400bf1e0     fall.obj\n 6848:  0004:000001ec       $pdata$?SetWindowCollapsed@ImGui@@YAXPEBD_NH@Z 00000001400bf1ec     fall.obj\n 6849:  0004:000001f8       $pdata$?SetWindowFocus@ImGui@@YAXPEBD@Z 00000001400bf1f8     fall.obj\n 6850:  0004:00000204       $pdata$?GetScrollMaxX@ImGui@@YAMXZ 00000001400bf204     fall.obj\n 6851:  0004:00000210       $pdata$?GetScrollMaxY@ImGui@@YAMXZ 00000001400bf210     fall.obj\n 6852:  0004:0000021c       $pdata$?SetScrollX@ImGui@@YAXM@Z 00000001400bf21c     fall.obj\n 6853:  0004:00000228       $pdata$?SetScrollY@ImGui@@YAXM@Z 00000001400bf228     fall.obj\n 6854:  0004:00000234       $pdata$?SetScrollHere@ImGui@@YAXM@Z 00000001400bf234     fall.obj\n 6855:  0004:00000240       $pdata$?SetScrollFromPosY@ImGui@@YAXMM@Z 00000001400bf240     fall.obj\n 6856:  0004:0000024c       $pdata$?SetKeyboardFocusHere@ImGui@@YAXH@Z 00000001400bf24c     fall.obj\n 6857:  0004:00000258       $pdata$?SetStateStorage@ImGui@@YAXPEAUImGuiStorage@@@Z 00000001400bf258     fall.obj\n 6858:  0004:00000264       $pdata$?GetStateStorage@ImGui@@YAPEAUImGuiStorage@@XZ 00000001400bf264     fall.obj\n 6859:  0004:00000270       $pdata$?PushFont@ImGui@@YAXPEAUImFont@@@Z 00000001400bf270     fall.obj\n 6860:  0004:0000027c       $pdata$?PopFont@ImGui@@YAXXZ 00000001400bf27c     fall.obj\n 6861:  0004:00000288       $pdata$?PushStyleColor@ImGui@@YAXHAEBUImVec4@@@Z 00000001400bf288     fall.obj\n 6862:  0004:00000294       $pdata$?PopStyleColor@ImGui@@YAXH@Z 00000001400bf294     fall.obj\n 6863:  0004:000002a0       $pdata$?PushStyleVar@ImGui@@YAXHM@Z 00000001400bf2a0     fall.obj\n 6864:  0004:000002ac       $pdata$?PushStyleVar@ImGui@@YAXHAEBUImVec2@@@Z 00000001400bf2ac     fall.obj\n 6865:  0004:000002b8       $pdata$?PopStyleVar@ImGui@@YAXH@Z 00000001400bf2b8     fall.obj\n 6866:  0004:000002c4       $pdata$?GetColorU32@ImGui@@YAIHM@Z 00000001400bf2c4     fall.obj\n 6867:  0004:000002d0       $pdata$?GetColorU32@ImGui@@YAIAEBUImVec4@@@Z 00000001400bf2d0     fall.obj\n 6868:  0004:000002dc       $pdata$?PushItemWidth@ImGui@@YAXM@Z 00000001400bf2dc     fall.obj\n 6869:  0004:000002e8       $pdata$?PopItemWidth@ImGui@@YAXXZ 00000001400bf2e8     fall.obj\n 6870:  0004:000002f4       $pdata$?CalcItemWidth@ImGui@@YAMXZ 00000001400bf2f4     fall.obj\n 6871:  0004:00000300       $pdata$?PushTextWrapPos@ImGui@@YAXM@Z 00000001400bf300     fall.obj\n 6872:  0004:0000030c       $pdata$?PopTextWrapPos@ImGui@@YAXXZ 00000001400bf30c     fall.obj\n 6873:  0004:00000318       $pdata$?PushAllowKeyboardFocus@ImGui@@YAX_N@Z 00000001400bf318     fall.obj\n 6874:  0004:00000324       $pdata$?PopAllowKeyboardFocus@ImGui@@YAXXZ 00000001400bf324     fall.obj\n 6875:  0004:00000330       $pdata$?PushButtonRepeat@ImGui@@YAX_N@Z 00000001400bf330     fall.obj\n 6876:  0004:0000033c       $pdata$?PopButtonRepeat@ImGui@@YAXXZ 00000001400bf33c     fall.obj\n 6877:  0004:00000348       $pdata$?Separator@ImGui@@YAXXZ 00000001400bf348     fall.obj\n 6878:  0004:00000354       $pdata$?SameLine@ImGui@@YAXMM@Z 00000001400bf354     fall.obj\n 6879:  0004:00000360       $pdata$?NewLine@ImGui@@YAXXZ 00000001400bf360     fall.obj\n 6880:  0004:0000036c       $pdata$?Spacing@ImGui@@YAXXZ 00000001400bf36c     fall.obj\n 6881:  0004:00000378       $pdata$?Dummy@ImGui@@YAXAEBUImVec2@@@Z 00000001400bf378     fall.obj\n 6882:  0004:00000384       $pdata$?Indent@ImGui@@YAXM@Z 00000001400bf384     fall.obj\n 6883:  0004:00000390       $pdata$?Unindent@ImGui@@YAXM@Z 00000001400bf390     fall.obj\n 6884:  0004:0000039c       $pdata$?BeginGroup@ImGui@@YAXXZ 00000001400bf39c     fall.obj\n 6885:  0004:000003a8       $pdata$?EndGroup@ImGui@@YAXXZ 00000001400bf3a8     fall.obj\n 6886:  0004:000003b4       $pdata$?GetCursorPos@ImGui@@YA?AUImVec2@@XZ 00000001400bf3b4     fall.obj\n 6887:  0004:000003c0       $pdata$?GetCursorPosX@ImGui@@YAMXZ 00000001400bf3c0     fall.obj\n 6888:  0004:000003cc       $pdata$?GetCursorPosY@ImGui@@YAMXZ 00000001400bf3cc     fall.obj\n 6889:  0004:000003d8       $pdata$?SetCursorPos@ImGui@@YAXAEBUImVec2@@@Z 00000001400bf3d8     fall.obj\n 6890:  0004:000003e4       $pdata$?SetCursorPosX@ImGui@@YAXM@Z 00000001400bf3e4     fall.obj\n 6891:  0004:000003f0       $pdata$?SetCursorPosY@ImGui@@YAXM@Z 00000001400bf3f0     fall.obj\n 6892:  0004:000003fc       $pdata$?GetCursorStartPos@ImGui@@YA?AUImVec2@@XZ 00000001400bf3fc     fall.obj\n 6893:  0004:00000408       $pdata$?GetCursorScreenPos@ImGui@@YA?AUImVec2@@XZ 00000001400bf408     fall.obj\n 6894:  0004:00000414       $pdata$?SetCursorScreenPos@ImGui@@YAXAEBUImVec2@@@Z 00000001400bf414     fall.obj\n 6895:  0004:00000420       $pdata$?AlignFirstTextHeightToWidgets@ImGui@@YAXXZ 00000001400bf420     fall.obj\n 6896:  0004:0000042c       $pdata$?GetTextLineHeight@ImGui@@YAMXZ 00000001400bf42c     fall.obj\n 6897:  0004:00000438       $pdata$?GetTextLineHeightWithSpacing@ImGui@@YAMXZ 00000001400bf438     fall.obj\n 6898:  0004:00000444       $pdata$?GetItemsLineHeightWithSpacing@ImGui@@YAMXZ 00000001400bf444     fall.obj\n 6899:  0004:00000450       $pdata$?Columns@ImGui@@YAXHPEBD_N@Z 00000001400bf450     fall.obj\n 6900:  0004:0000045c       $pdata$?NextColumn@ImGui@@YAXXZ 00000001400bf45c     fall.obj\n 6901:  0004:00000468       $pdata$?GetColumnIndex@ImGui@@YAHXZ 00000001400bf468     fall.obj\n 6902:  0004:00000474       $pdata$?GetColumnOffset@ImGui@@YAMH@Z 00000001400bf474     fall.obj\n 6903:  0004:00000480       $pdata$?SetColumnOffset@ImGui@@YAXHM@Z 00000001400bf480     fall.obj\n 6904:  0004:0000048c       $pdata$?GetColumnWidth@ImGui@@YAMH@Z 00000001400bf48c     fall.obj\n 6905:  0004:00000498       $pdata$?GetColumnsCount@ImGui@@YAHXZ 00000001400bf498     fall.obj\n 6906:  0004:000004a4       $pdata$?PushID@ImGui@@YAXPEBD@Z 00000001400bf4a4     fall.obj\n 6907:  0004:000004b0       $pdata$?PushID@ImGui@@YAXPEBD0@Z 00000001400bf4b0     fall.obj\n 6908:  0004:000004bc       $pdata$?PushID@ImGui@@YAXPEBX@Z 00000001400bf4bc     fall.obj\n 6909:  0004:000004c8       $pdata$?PushID@ImGui@@YAXH@Z 00000001400bf4c8     fall.obj\n 6910:  0004:000004d4       $pdata$?PopID@ImGui@@YAXXZ 00000001400bf4d4     fall.obj\n 6911:  0004:000004e0       $pdata$?GetID@ImGui@@YAIPEBD@Z 00000001400bf4e0     fall.obj\n 6912:  0004:000004ec       $pdata$?GetID@ImGui@@YAIPEBD0@Z 00000001400bf4ec     fall.obj\n 6913:  0004:000004f8       $pdata$?GetID@ImGui@@YAIPEBX@Z 00000001400bf4f8     fall.obj\n 6914:  0004:00000504       $pdata$?Text@ImGui@@YAXPEBDZZ 00000001400bf504     fall.obj\n 6915:  0004:00000510       $pdata$?TextV@ImGui@@YAXPEBDPEAD@Z 00000001400bf510     fall.obj\n 6916:  0004:0000051c       $pdata$?TextColored@ImGui@@YAXAEBUImVec4@@PEBDZZ 00000001400bf51c     fall.obj\n 6917:  0004:00000528       $pdata$?TextColoredV@ImGui@@YAXAEBUImVec4@@PEBDPEAD@Z 00000001400bf528     fall.obj\n 6918:  0004:00000534       $pdata$?TextDisabled@ImGui@@YAXPEBDZZ 00000001400bf534     fall.obj\n 6919:  0004:00000540       $pdata$?TextDisabledV@ImGui@@YAXPEBDPEAD@Z 00000001400bf540     fall.obj\n 6920:  0004:0000054c       $pdata$?TextWrapped@ImGui@@YAXPEBDZZ 00000001400bf54c     fall.obj\n 6921:  0004:00000558       $pdata$?TextWrappedV@ImGui@@YAXPEBDPEAD@Z 00000001400bf558     fall.obj\n 6922:  0004:00000564       $pdata$?TextUnformatted@ImGui@@YAXPEBD0@Z 00000001400bf564     fall.obj\n 6923:  0004:00000570       $pdata$?LabelText@ImGui@@YAXPEBD0ZZ 00000001400bf570     fall.obj\n 6924:  0004:0000057c       $pdata$?LabelTextV@ImGui@@YAXPEBD0PEAD@Z 00000001400bf57c     fall.obj\n 6925:  0004:00000588       $pdata$?Bullet@ImGui@@YAXXZ 00000001400bf588     fall.obj\n 6926:  0004:00000594       $pdata$?BulletText@ImGui@@YAXPEBDZZ 00000001400bf594     fall.obj\n 6927:  0004:000005a0       $pdata$?BulletTextV@ImGui@@YAXPEBDPEAD@Z 00000001400bf5a0     fall.obj\n 6928:  0004:000005ac       $pdata$?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z 00000001400bf5ac     fall.obj\n 6929:  0004:000005b8       $pdata$?SmallButton@ImGui@@YA_NPEBD@Z 00000001400bf5b8     fall.obj\n 6930:  0004:000005c4       $pdata$?InvisibleButton@ImGui@@YA_NPEBDAEBUImVec2@@@Z 00000001400bf5c4     fall.obj\n 6931:  0004:000005d0       $pdata$?Image@ImGui@@YAXPEAXAEBUImVec2@@11AEBUImVec4@@2@Z 00000001400bf5d0     fall.obj\n 6932:  0004:000005dc       $pdata$?ImageButton@ImGui@@YA_NPEAXAEBUImVec2@@11HAEBUImVec4@@2@Z 00000001400bf5dc     fall.obj\n 6933:  0004:000005e8       $pdata$?Checkbox@ImGui@@YA_NPEBDPEA_N@Z 00000001400bf5e8     fall.obj\n 6934:  0004:000005f4       $pdata$?CheckboxFlags@ImGui@@YA_NPEBDPEAII@Z 00000001400bf5f4     fall.obj\n 6935:  0004:00000600       $pdata$?RadioButton@ImGui@@YA_NPEBD_N@Z 00000001400bf600     fall.obj\n 6936:  0004:0000060c       $pdata$?RadioButton@ImGui@@YA_NPEBDPEAHH@Z 00000001400bf60c     fall.obj\n 6937:  0004:00000618       $pdata$?Combo@ImGui@@YA_NPEBDPEAHPEBQEBDHH@Z 00000001400bf618     fall.obj\n 6938:  0004:00000624       $pdata$?Combo@ImGui@@YA_NPEBDPEAH0H@Z 00000001400bf624     fall.obj\n 6939:  0004:00000630       $pdata$?Combo@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z 00000001400bf630     fall.obj\n 6940:  0004:0000063c       $pdata$?ColorButton@ImGui@@YA_NAEBUImVec4@@_N1@Z 00000001400bf63c     fall.obj\n 6941:  0004:00000648       $pdata$?ColorEdit3@ImGui@@YA_NPEBDQEAM@Z 00000001400bf648     fall.obj\n 6942:  0004:00000654       $pdata$?ColorEdit4@ImGui@@YA_NPEBDQEAM_N@Z 00000001400bf654     fall.obj\n 6943:  0004:00000660       $pdata$?ColorEditMode@ImGui@@YAXH@Z 00000001400bf660     fall.obj\n 6944:  0004:0000066c       $pdata$?PlotLines@ImGui@@YAXPEBDPEBMHH0MMUImVec2@@H@Z 00000001400bf66c     fall.obj\n 6945:  0004:00000678       $pdata$?PlotLines@ImGui@@YAXPEBDP6AMPEAXH@Z1HH0MMUImVec2@@@Z 00000001400bf678     fall.obj\n 6946:  0004:00000684       $pdata$?PlotHistogram@ImGui@@YAXPEBDPEBMHH0MMUImVec2@@H@Z 00000001400bf684     fall.obj\n 6947:  0004:00000690       $pdata$?PlotHistogram@ImGui@@YAXPEBDP6AMPEAXH@Z1HH0MMUImVec2@@@Z 00000001400bf690     fall.obj\n 6948:  0004:0000069c       $pdata$?ProgressBar@ImGui@@YAXMAEBUImVec2@@PEBD@Z 00000001400bf69c     fall.obj\n 6949:  0004:000006a8       $pdata$?DragFloat@ImGui@@YA_NPEBDPEAMMMM0M@Z 00000001400bf6a8     fall.obj\n 6950:  0004:000006b4       $pdata$?DragFloat2@ImGui@@YA_NPEBDQEAMMMM0M@Z 00000001400bf6b4     fall.obj\n 6951:  0004:000006c0       $pdata$?DragFloat3@ImGui@@YA_NPEBDQEAMMMM0M@Z 00000001400bf6c0     fall.obj\n 6952:  0004:000006cc       $pdata$?DragFloat4@ImGui@@YA_NPEBDQEAMMMM0M@Z 00000001400bf6cc     fall.obj\n 6953:  0004:000006d8       $pdata$?DragFloatRange2@ImGui@@YA_NPEBDPEAM1MMM00M@Z 00000001400bf6d8     fall.obj\n 6954:  0004:000006e4       $pdata$?DragInt@ImGui@@YA_NPEBDPEAHMHH0@Z 00000001400bf6e4     fall.obj\n 6955:  0004:000006f0       $pdata$?DragInt2@ImGui@@YA_NPEBDQEAHMHH0@Z 00000001400bf6f0     fall.obj\n 6956:  0004:000006fc       $pdata$?DragInt3@ImGui@@YA_NPEBDQEAHMHH0@Z 00000001400bf6fc     fall.obj\n 6957:  0004:00000708       $pdata$?DragInt4@ImGui@@YA_NPEBDQEAHMHH0@Z 00000001400bf708     fall.obj\n 6958:  0004:00000714       $pdata$?DragIntRange2@ImGui@@YA_NPEBDPEAH1MHH00@Z 00000001400bf714     fall.obj\n 6959:  0004:00000720       $pdata$?InputText@ImGui@@YA_NPEBDPEAD_KHP6AHPEAUImGuiTextEditCallbackData@@@ZPEAX@Z 00000001400bf720     fall.obj\n 6960:  0004:0000072c       $pdata$?InputTextMultiline@ImGui@@YA_NPEBDPEAD_KAEBUImVec2@@HP6AHPEAUImGuiTextEditCallbackData@@@ZPEAX@Z 00000001400bf72c     fall.obj\n 6961:  0004:00000738       $pdata$?InputFloat@ImGui@@YA_NPEBDPEAMMMHH@Z 00000001400bf738     fall.obj\n 6962:  0004:00000744       $pdata$?InputFloat2@ImGui@@YA_NPEBDQEAMHH@Z 00000001400bf744     fall.obj\n 6963:  0004:00000750       $pdata$?InputFloat3@ImGui@@YA_NPEBDQEAMHH@Z 00000001400bf750     fall.obj\n 6964:  0004:0000075c       $pdata$?InputFloat4@ImGui@@YA_NPEBDQEAMHH@Z 00000001400bf75c     fall.obj\n 6965:  0004:00000768       $pdata$?InputInt@ImGui@@YA_NPEBDPEAHHHH@Z 00000001400bf768     fall.obj\n 6966:  0004:00000774       $pdata$?InputInt2@ImGui@@YA_NPEBDQEAHH@Z 00000001400bf774     fall.obj\n 6967:  0004:00000780       $pdata$?InputInt3@ImGui@@YA_NPEBDQEAHH@Z 00000001400bf780     fall.obj\n 6968:  0004:0000078c       $pdata$?InputInt4@ImGui@@YA_NPEBDQEAHH@Z 00000001400bf78c     fall.obj\n 6969:  0004:00000798       $pdata$?SliderFloat@ImGui@@YA_NPEBDPEAMMM0M@Z 00000001400bf798     fall.obj\n 6970:  0004:000007a4       $pdata$?SliderFloat2@ImGui@@YA_NPEBDQEAMMM0M@Z 00000001400bf7a4     fall.obj\n 6971:  0004:000007b0       $pdata$?SliderFloat3@ImGui@@YA_NPEBDQEAMMM0M@Z 00000001400bf7b0     fall.obj\n 6972:  0004:000007bc       $pdata$?SliderFloat4@ImGui@@YA_NPEBDQEAMMM0M@Z 00000001400bf7bc     fall.obj\n 6973:  0004:000007c8       $pdata$?SliderAngle@ImGui@@YA_NPEBDPEAMMM@Z 00000001400bf7c8     fall.obj\n 6974:  0004:000007d4       $pdata$?SliderInt@ImGui@@YA_NPEBDPEAHHH0@Z 00000001400bf7d4     fall.obj\n 6975:  0004:000007e0       $pdata$?SliderInt2@ImGui@@YA_NPEBDQEAHHH0@Z 00000001400bf7e0     fall.obj\n 6976:  0004:000007ec       $pdata$?SliderInt3@ImGui@@YA_NPEBDQEAHHH0@Z 00000001400bf7ec     fall.obj\n 6977:  0004:000007f8       $pdata$?SliderInt4@ImGui@@YA_NPEBDQEAHHH0@Z 00000001400bf7f8     fall.obj\n 6978:  0004:00000804       $pdata$?VSliderFloat@ImGui@@YA_NPEBDAEBUImVec2@@PEAMMM0M@Z 00000001400bf804     fall.obj\n 6979:  0004:00000810       $pdata$?VSliderInt@ImGui@@YA_NPEBDAEBUImVec2@@PEAHHH0@Z 00000001400bf810     fall.obj\n 6980:  0004:0000081c       $pdata$?TreeNode@ImGui@@YA_NPEBD@Z 00000001400bf81c     fall.obj\n 6981:  0004:00000828       $pdata$?TreeNode@ImGui@@YA_NPEBD0ZZ 00000001400bf828     fall.obj\n 6982:  0004:00000834       $pdata$?TreeNode@ImGui@@YA_NPEBXPEBDZZ 00000001400bf834     fall.obj\n 6983:  0004:00000840       $pdata$?TreeNodeV@ImGui@@YA_NPEBD0PEAD@Z 00000001400bf840     fall.obj\n 6984:  0004:0000084c       $pdata$?TreeNodeV@ImGui@@YA_NPEBXPEBDPEAD@Z 00000001400bf84c     fall.obj\n 6985:  0004:00000858       $pdata$?TreeNodeEx@ImGui@@YA_NPEBDH@Z 00000001400bf858     fall.obj\n 6986:  0004:00000864       $pdata$?TreeNodeEx@ImGui@@YA_NPEBDH0ZZ 00000001400bf864     fall.obj\n 6987:  0004:00000870       $pdata$?TreeNodeEx@ImGui@@YA_NPEBXHPEBDZZ 00000001400bf870     fall.obj\n 6988:  0004:0000087c       $pdata$?TreeNodeExV@ImGui@@YA_NPEBDH0PEAD@Z 00000001400bf87c     fall.obj\n 6989:  0004:00000888       $pdata$?TreeNodeExV@ImGui@@YA_NPEBXHPEBDPEAD@Z 00000001400bf888     fall.obj\n 6990:  0004:00000894       $pdata$?TreePush@ImGui@@YAXPEBD@Z 00000001400bf894     fall.obj\n 6991:  0004:000008a0       $pdata$?TreePush@ImGui@@YAXPEBX@Z 00000001400bf8a0     fall.obj\n 6992:  0004:000008ac       $pdata$?TreePop@ImGui@@YAXXZ 00000001400bf8ac     fall.obj\n 6993:  0004:000008b8       $pdata$?TreeAdvanceToLabelPos@ImGui@@YAXXZ 00000001400bf8b8     fall.obj\n 6994:  0004:000008c4       $pdata$?GetTreeNodeToLabelSpacing@ImGui@@YAMXZ 00000001400bf8c4     fall.obj\n 6995:  0004:000008d0       $pdata$?SetNextTreeNodeOpen@ImGui@@YAX_NH@Z 00000001400bf8d0     fall.obj\n 6996:  0004:000008dc       $pdata$?CollapsingHeader@ImGui@@YA_NPEBDH@Z 00000001400bf8dc     fall.obj\n 6997:  0004:000008e8       $pdata$?CollapsingHeader@ImGui@@YA_NPEBDPEA_NH@Z 00000001400bf8e8     fall.obj\n 6998:  0004:000008f4       $pdata$?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z 00000001400bf8f4     fall.obj\n 6999:  0004:00000900       $pdata$?Selectable@ImGui@@YA_NPEBDPEA_NHAEBUImVec2@@@Z 00000001400bf900     fall.obj\n 7000:  0004:0000090c       $pdata$?ListBox@ImGui@@YA_NPEBDPEAHPEBQEBDHH@Z 00000001400bf90c     fall.obj\n 7001:  0004:00000918       $pdata$?ListBox@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z 00000001400bf918     fall.obj\n 7002:  0004:00000924       $pdata$?ListBoxHeader@ImGui@@YA_NPEBDAEBUImVec2@@@Z 00000001400bf924     fall.obj\n 7003:  0004:00000930       $pdata$?ListBoxHeader@ImGui@@YA_NPEBDHH@Z 00000001400bf930     fall.obj\n 7004:  0004:0000093c       $pdata$?ListBoxFooter@ImGui@@YAXXZ 00000001400bf93c     fall.obj\n 7005:  0004:00000948       $pdata$?Value@ImGui@@YAXPEBD_N@Z 00000001400bf948     fall.obj\n 7006:  0004:00000954       $pdata$?Value@ImGui@@YAXPEBDH@Z 00000001400bf954     fall.obj\n 7007:  0004:00000960       $pdata$?Value@ImGui@@YAXPEBDI@Z 00000001400bf960     fall.obj\n 7008:  0004:0000096c       $pdata$?Value@ImGui@@YAXPEBDM0@Z 00000001400bf96c     fall.obj\n 7009:  0004:00000978       $pdata$?ValueColor@ImGui@@YAXPEBDAEBUImVec4@@@Z 00000001400bf978     fall.obj\n 7010:  0004:00000984       $pdata$?ValueColor@ImGui@@YAXPEBDI@Z 00000001400bf984     fall.obj\n 7011:  0004:00000990       $pdata$?SetTooltip@ImGui@@YAXPEBDZZ 00000001400bf990     fall.obj\n 7012:  0004:0000099c       $pdata$?SetTooltipV@ImGui@@YAXPEBDPEAD@Z 00000001400bf99c     fall.obj\n 7013:  0004:000009a8       $pdata$?BeginTooltip@ImGui@@YAXXZ 00000001400bf9a8     fall.obj\n 7014:  0004:000009b4       $pdata$?EndTooltip@ImGui@@YAXXZ 00000001400bf9b4     fall.obj\n 7015:  0004:000009c0       $pdata$?BeginMainMenuBar@ImGui@@YA_NXZ 00000001400bf9c0     fall.obj\n 7016:  0004:000009cc       $pdata$?EndMainMenuBar@ImGui@@YAXXZ 00000001400bf9cc     fall.obj\n 7017:  0004:000009d8       $pdata$?BeginMenuBar@ImGui@@YA_NXZ 00000001400bf9d8     fall.obj\n 7018:  0004:000009e4       $pdata$?EndMenuBar@ImGui@@YAXXZ 00000001400bf9e4     fall.obj\n 7019:  0004:000009f0       $pdata$?BeginMenu@ImGui@@YA_NPEBD_N@Z 00000001400bf9f0     fall.obj\n 7020:  0004:000009fc       $pdata$?EndMenu@ImGui@@YAXXZ 00000001400bf9fc     fall.obj\n 7021:  0004:00000a08       $pdata$?MenuItem@ImGui@@YA_NPEBD0_N1@Z 00000001400bfa08     fall.obj\n 7022:  0004:00000a14       $pdata$?MenuItem@ImGui@@YA_NPEBD0PEA_N_N@Z 00000001400bfa14     fall.obj\n 7023:  0004:00000a20       $pdata$?OpenPopup@ImGui@@YAXPEBD@Z 00000001400bfa20     fall.obj\n 7024:  0004:00000a2c       $pdata$?BeginPopup@ImGui@@YA_NPEBD@Z 00000001400bfa2c     fall.obj\n 7025:  0004:00000a38       $pdata$?BeginPopupModal@ImGui@@YA_NPEBDPEA_NH@Z 00000001400bfa38     fall.obj\n 7026:  0004:00000a44       $pdata$?BeginPopupContextItem@ImGui@@YA_NPEBDH@Z 00000001400bfa44     fall.obj\n 7027:  0004:00000a50       $pdata$?BeginPopupContextWindow@ImGui@@YA_N_NPEBDH@Z 00000001400bfa50     fall.obj\n 7028:  0004:00000a5c       $pdata$?BeginPopupContextVoid@ImGui@@YA_NPEBDH@Z 00000001400bfa5c     fall.obj\n 7029:  0004:00000a68       $pdata$?EndPopup@ImGui@@YAXXZ 00000001400bfa68     fall.obj\n 7030:  0004:00000a74       $pdata$?CloseCurrentPopup@ImGui@@YAXXZ 00000001400bfa74     fall.obj\n 7031:  0004:00000a80       $pdata$?LogToTTY@ImGui@@YAXH@Z 00000001400bfa80     fall.obj\n 7032:  0004:00000a8c       $pdata$?LogToFile@ImGui@@YAXHPEBD@Z 00000001400bfa8c     fall.obj\n 7033:  0004:00000a98       $pdata$?LogToClipboard@ImGui@@YAXH@Z 00000001400bfa98     fall.obj\n 7034:  0004:00000aa4       $pdata$?LogFinish@ImGui@@YAXXZ 00000001400bfaa4     fall.obj\n 7035:  0004:00000ab0       $pdata$?LogButtons@ImGui@@YAXXZ 00000001400bfab0     fall.obj\n 7036:  0004:00000abc       $pdata$?LogText@ImGui@@YAXPEBDZZ 00000001400bfabc     fall.obj\n 7037:  0004:00000ac8       $pdata$?PushClipRect@ImGui@@YAXAEBUImVec2@@0_N@Z 00000001400bfac8     fall.obj\n 7038:  0004:00000ad4       $pdata$?PopClipRect@ImGui@@YAXXZ 00000001400bfad4     fall.obj\n 7039:  0004:00000ae0       $pdata$?IsItemHovered@ImGui@@YA_NXZ 00000001400bfae0     fall.obj\n 7040:  0004:00000aec       $pdata$?IsItemHoveredRect@ImGui@@YA_NXZ 00000001400bfaec     fall.obj\n 7041:  0004:00000af8       $pdata$?IsItemActive@ImGui@@YA_NXZ 00000001400bfaf8     fall.obj\n 7042:  0004:00000b04       $pdata$?IsItemClicked@ImGui@@YA_NH@Z 00000001400bfb04     fall.obj\n 7043:  0004:00000b10       $pdata$?IsItemVisible@ImGui@@YA_NXZ 00000001400bfb10     fall.obj\n 7044:  0004:00000b1c       $pdata$?IsAnyItemHovered@ImGui@@YA_NXZ 00000001400bfb1c     fall.obj\n 7045:  0004:00000b28       $pdata$?IsAnyItemActive@ImGui@@YA_NXZ 00000001400bfb28     fall.obj\n 7046:  0004:00000b34       $pdata$?GetItemRectMin@ImGui@@YA?AUImVec2@@XZ 00000001400bfb34     fall.obj\n 7047:  0004:00000b40       $pdata$?GetItemRectMax@ImGui@@YA?AUImVec2@@XZ 00000001400bfb40     fall.obj\n 7048:  0004:00000b4c       $pdata$?GetItemRectSize@ImGui@@YA?AUImVec2@@XZ 00000001400bfb4c     fall.obj\n 7049:  0004:00000b58       $pdata$?SetItemAllowOverlap@ImGui@@YAXXZ 00000001400bfb58     fall.obj\n 7050:  0004:00000b64       $pdata$?IsWindowHovered@ImGui@@YA_NXZ 00000001400bfb64     fall.obj\n 7051:  0004:00000b70       $pdata$?IsWindowFocused@ImGui@@YA_NXZ 00000001400bfb70     fall.obj\n 7052:  0004:00000b7c       $pdata$?IsRootWindowFocused@ImGui@@YA_NXZ 00000001400bfb7c     fall.obj\n 7053:  0004:00000b88       $pdata$?IsRootWindowOrAnyChildFocused@ImGui@@YA_NXZ 00000001400bfb88     fall.obj\n 7054:  0004:00000b94       $pdata$?IsRootWindowOrAnyChildHovered@ImGui@@YA_NXZ 00000001400bfb94     fall.obj\n 7055:  0004:00000ba0       $pdata$?IsRectVisible@ImGui@@YA_NAEBUImVec2@@@Z 00000001400bfba0     fall.obj\n 7056:  0004:00000bac       $pdata$?IsRectVisible@ImGui@@YA_NAEBUImVec2@@0@Z 00000001400bfbac     fall.obj\n 7057:  0004:00000bb8       $pdata$?IsPosHoveringAnyWindow@ImGui@@YA_NAEBUImVec2@@@Z 00000001400bfbb8     fall.obj\n 7058:  0004:00000bc4       $pdata$?GetStyleColName@ImGui@@YAPEBDH@Z 00000001400bfbc4     fall.obj\n 7059:  0004:00000bd0       $pdata$?CalcItemRectClosestPoint@ImGui@@YA?AUImVec2@@AEBU2@_NM@Z 00000001400bfbd0     fall.obj\n 7060:  0004:00000bdc       $pdata$?CalcTextSize@ImGui@@YA?AUImVec2@@PEBD0_NM@Z 00000001400bfbdc     fall.obj\n 7061:  0004:00000be8       $pdata$?CalcListClipping@ImGui@@YAXHMPEAH0@Z 00000001400bfbe8     fall.obj\n 7062:  0004:00000bf4       $pdata$?BeginChildFrame@ImGui@@YA_NIAEBUImVec2@@H@Z 00000001400bfbf4     fall.obj\n 7063:  0004:00000c00       $pdata$?EndChildFrame@ImGui@@YAXXZ 00000001400bfc00     fall.obj\n 7064:  0004:00000c0c       $pdata$?ColorConvertU32ToFloat4@ImGui@@YA?AUImVec4@@I@Z 00000001400bfc0c     fall.obj\n 7065:  0004:00000c18       $pdata$?ColorConvertFloat4ToU32@ImGui@@YAIAEBUImVec4@@@Z 00000001400bfc18     fall.obj\n 7066:  0004:00000c24       $pdata$?ColorConvertRGBtoHSV@ImGui@@YAXMMMAEAM00@Z 00000001400bfc24     fall.obj\n 7067:  0004:00000c30       $pdata$?ColorConvertHSVtoRGB@ImGui@@YAXMMMAEAM00@Z 00000001400bfc30     fall.obj\n 7068:  0004:00000c3c       $pdata$?GetKeyIndex@ImGui@@YAHH@Z 00000001400bfc3c     fall.obj\n 7069:  0004:00000c48       $pdata$?IsKeyDown@ImGui@@YA_NH@Z 00000001400bfc48     fall.obj\n 7070:  0004:00000c54       $pdata$?IsKeyPressed@ImGui@@YA_NH_N@Z 00000001400bfc54     fall.obj\n 7071:  0004:00000c60       $pdata$?IsKeyReleased@ImGui@@YA_NH@Z 00000001400bfc60     fall.obj\n 7072:  0004:00000c6c       $pdata$?IsMouseDown@ImGui@@YA_NH@Z 00000001400bfc6c     fall.obj\n 7073:  0004:00000c78       $pdata$?IsMouseClicked@ImGui@@YA_NH_N@Z 00000001400bfc78     fall.obj\n 7074:  0004:00000c84       $pdata$?IsMouseDoubleClicked@ImGui@@YA_NH@Z 00000001400bfc84     fall.obj\n 7075:  0004:00000c90       $pdata$?IsMouseReleased@ImGui@@YA_NH@Z 00000001400bfc90     fall.obj\n 7076:  0004:00000c9c       $pdata$?IsMouseHoveringWindow@ImGui@@YA_NXZ 00000001400bfc9c     fall.obj\n 7077:  0004:00000ca8       $pdata$?IsMouseHoveringAnyWindow@ImGui@@YA_NXZ 00000001400bfca8     fall.obj\n 7078:  0004:00000cb4       $pdata$?IsMouseHoveringRect@ImGui@@YA_NAEBUImVec2@@0_N@Z 00000001400bfcb4     fall.obj\n 7079:  0004:00000cc0       $pdata$?IsMouseDragging@ImGui@@YA_NHM@Z 00000001400bfcc0     fall.obj\n 7080:  0004:00000ccc       $pdata$?GetMousePosOnOpeningCurrentPopup@ImGui@@YA?AUImVec2@@XZ 00000001400bfccc     fall.obj\n 7081:  0004:00000cd8       $pdata$?GetMouseDragDelta@ImGui@@YA?AUImVec2@@HM@Z 00000001400bfcd8     fall.obj\n 7082:  0004:00000ce4       $pdata$?ResetMouseDragDelta@ImGui@@YAXH@Z 00000001400bfce4     fall.obj\n 7083:  0004:00000cf0       $pdata$?CaptureKeyboardFromApp@ImGui@@YAX_N@Z 00000001400bfcf0     fall.obj\n 7084:  0004:00000cfc       $pdata$?CaptureMouseFromApp@ImGui@@YAX_N@Z 00000001400bfcfc     fall.obj\n 7085:  0004:00000d08       $pdata$?MemAlloc@ImGui@@YAPEAX_K@Z 00000001400bfd08     fall.obj\n 7086:  0004:00000d14       $pdata$?MemFree@ImGui@@YAXPEAX@Z 00000001400bfd14     fall.obj\n 7087:  0004:00000d20       $pdata$?GetClipboardText@ImGui@@YAPEBDXZ 00000001400bfd20     fall.obj\n 7088:  0004:00000d2c       $pdata$?SetClipboardText@ImGui@@YAXPEBD@Z 00000001400bfd2c     fall.obj\n 7089:  0004:00000d38       $pdata$?CreateContext@ImGui@@YAPEAUImGuiContext@@P6APEAX_K@ZP6AXPEAX@Z@Z 00000001400bfd38     fall.obj\n 7090:  0004:00000d44       $pdata$?DestroyContext@ImGui@@YAXPEAUImGuiContext@@@Z 00000001400bfd44     fall.obj\n 7091:  0004:00000d50       $pdata$??0ImGuiStyle@@QEAA@XZ 00000001400bfd50     fall.obj\n 7092:  0004:00000d5c       $pdata$?AddInputCharacter@ImGuiIO@@QEAAXG@Z 00000001400bfd5c     fall.obj\n 7093:  0004:00000d68       $pdata$?AddInputCharactersUTF8@ImGuiIO@@QEAAXPEBD@Z 00000001400bfd68     fall.obj\n 7094:  0004:00000d74       $pdata$??0ImGuiIO@@QEAA@XZ 00000001400bfd74     fall.obj\n 7095:  0004:00000d80       $pdata$?split@TextRange@ImGuiTextFilter@@QEAAXDAEAV?$ImVector@UTextRange@ImGuiTextFilter@@@@@Z 00000001400bfd80     fall.obj\n 7096:  0004:00000d8c       $pdata$??0ImGuiTextFilter@@QEAA@PEBD@Z 00000001400bfd8c     fall.obj\n 7097:  0004:00000d98       $pdata$?Draw@ImGuiTextFilter@@QEAA_NPEBDM@Z 00000001400bfd98     fall.obj\n 7098:  0004:00000da4       $pdata$?PassFilter@ImGuiTextFilter@@QEBA_NPEBD0@Z 00000001400bfda4     fall.obj\n 7099:  0004:00000db0       $pdata$?Build@ImGuiTextFilter@@QEAAXXZ 00000001400bfdb0     fall.obj\n 7100:  0004:00000dbc       $pdata$?append@ImGuiTextBuffer@@QEAAXPEBDZZ 00000001400bfdbc     fall.obj\n 7101:  0004:00000dc8       $pdata$?appendv@ImGuiTextBuffer@@QEAAXPEBDPEAD@Z 00000001400bfdc8     fall.obj\n 7102:  0004:00000dd4       $pdata$?Clear@ImGuiStorage@@QEAAXXZ 00000001400bfdd4     fall.obj\n 7103:  0004:00000de0       $pdata$?GetInt@ImGuiStorage@@QEBAHIH@Z 00000001400bfde0     fall.obj\n 7104:  0004:00000dec       $pdata$?SetInt@ImGuiStorage@@QEAAXIH@Z 00000001400bfdec     fall.obj\n 7105:  0004:00000df8       $pdata$?GetBool@ImGuiStorage@@QEBA_NI_N@Z 00000001400bfdf8     fall.obj\n 7106:  0004:00000e04       $pdata$?SetBool@ImGuiStorage@@QEAAXI_N@Z 00000001400bfe04     fall.obj\n 7107:  0004:00000e10       $pdata$?GetFloat@ImGuiStorage@@QEBAMIM@Z 00000001400bfe10     fall.obj\n 7108:  0004:00000e1c       $pdata$?SetFloat@ImGuiStorage@@QEAAXIM@Z 00000001400bfe1c     fall.obj\n 7109:  0004:00000e28       $pdata$?GetVoidPtr@ImGuiStorage@@QEBAPEAXI@Z 00000001400bfe28     fall.obj\n 7110:  0004:00000e34       $pdata$?SetVoidPtr@ImGuiStorage@@QEAAXIPEAX@Z 00000001400bfe34     fall.obj\n 7111:  0004:00000e40       $pdata$?GetIntRef@ImGuiStorage@@QEAAPEAHIH@Z 00000001400bfe40     fall.obj\n 7112:  0004:00000e4c       $pdata$?GetBoolRef@ImGuiStorage@@QEAAPEA_NI_N@Z 00000001400bfe4c     fall.obj\n 7113:  0004:00000e58       $pdata$?GetFloatRef@ImGuiStorage@@QEAAPEAMIM@Z 00000001400bfe58     fall.obj\n 7114:  0004:00000e64       $pdata$?GetVoidPtrRef@ImGuiStorage@@QEAAPEAPEAXIPEAX@Z 00000001400bfe64     fall.obj\n 7115:  0004:00000e70       $pdata$?SetAllInt@ImGuiStorage@@QEAAXH@Z 00000001400bfe70     fall.obj\n 7116:  0004:00000e7c       $pdata$?DeleteChars@ImGuiTextEditCallbackData@@QEAAXHH@Z 00000001400bfe7c     fall.obj\n 7117:  0004:00000e88       $pdata$?InsertChars@ImGuiTextEditCallbackData@@QEAAXHPEBD0@Z 00000001400bfe88     fall.obj\n 7118:  0004:00000e94       $pdata$?Step@ImGuiListClipper@@QEAA_NXZ 00000001400bfe94     fall.obj\n 7119:  0004:00000ea0       $pdata$?Begin@ImGuiListClipper@@QEAAXHM@Z 00000001400bfea0     fall.obj\n 7120:  0004:00000eac       $pdata$?End@ImGuiListClipper@@QEAAXXZ 00000001400bfeac     fall.obj\n 7121   0004:00000eb8       $pdata$?PushClipRect@ImDrawList@@QEAAXUImVec2@@0_N@Z 00000001400bfeb8     fall.obj\n 7122   0004:00000ec4       $pdata$?PushClipRectFullScreen@ImDrawList@@QEAAXXZ 00000001400bfec4     fall.obj\n ....\n 7190   0004:000011f4       $pdata$?GrowIndex@ImFont@@QEAAXH@Z 00000001400c01f4     fall.obj\n 7191   0004:00001200       $pdata$?AddRemapChar@ImFont@@QEAAXGG_N@Z 00000001400c0200     fall.obj\n 7192:  0004:0000120c       $pdata$?ImGui_ImplSdlGL3_Init@@YA_NPEAUSDL_Window@@@Z 00000001400c020c     fall.obj\n 7193:  0004:00001218       $pdata$?ImGui_ImplSdlGL3_Shutdown@@YAXXZ 00000001400c0218     fall.obj\n 7194:  0004:00001224       $pdata$?ImGui_ImplSdlGL3_NewFrame@@YAXPEAUSDL_Window@@@Z 00000001400c0224     fall.obj\n 7195:  0004:00001230       $pdata$?ImGui_ImplSdlGL3_ProcessEvent@@YA_NPEATSDL_Event@@@Z 00000001400c0230     fall.obj\n 7196:  0004:0000123c       $pdata$?ImGui_ImplSdlGL3_InvalidateDeviceObjects@@YAXXZ 00000001400c023c     fall.obj\n 7197:  0004:00001248       $pdata$?ImGui_ImplSdlGL3_CreateDeviceObjects@@YA_NXZ 00000001400c0248     fall.obj\n 7198   0004:00001254       $pdata$?was_pressed@@YAIUButtonInput@@@Z 00000001400c0254     fall.obj\n 7199   0004:00001260       $pdata$?was_released@@YAIUButtonInput@@@Z 00000001400c0260     fall.obj\n ....\n 7249   0004:000014b8       $pdata$stbi_zlib_decode_noheader_malloc 00000001400c04b8     fall.obj\n 7250   0004:000014c4       $pdata$stbi_zlib_decode_noheader_buffer 00000001400c04c4     fall.obj\n 7251:  0004:000014d0       $pdata$?Image@ImGui@@YAXUPlatformTexture@@@Z 00000001400c04d0     fall.obj\n 7252   0004:000014dc       $pdata$?ImTextStrToUtf8@@YAHPEADHPEBG1@Z 00000001400c04dc     fall.obj\n 7253   0004:000014e8       $pdata$?ImTextCharFromUtf8@@YAHPEAIPEBD1@Z 00000001400c04e8     fall.obj\n ....\n 7285   0004:00001668       $pdata$?ImInvLength@@YAMAEBUImVec2@@M@Z 00000001400c0668     fall.obj\n 7286   0004:00001674       $pdata$?ImFloor@@YA?AUImVec2@@U1@@Z 00000001400c0674     fall.obj\n 7287:  0004:00001680       $pdata$??0ImGuiSimpleColumns@@QEAA@XZ 00000001400c0680     fall.obj\n 7288:  0004:0000168c       $pdata$?Update@ImGuiSimpleColumns@@QEAAXHM_N@Z 00000001400c068c     fall.obj\n 7289:  0004:00001698       $pdata$?DeclColumns@ImGuiSimpleColumns@@QEAAMMMM@Z 00000001400c0698     fall.obj\n 7290:  0004:000016a4       $pdata$?CalcExtraSpace@ImGuiSimpleColumns@@QEAAMM@Z 00000001400c06a4     fall.obj\n 7291:  0004:000016b0       $pdata$?OnKeyPressed@ImGuiTextEditState@@QEAAXH@Z 00000001400c06b0     fall.obj\n 7292:  0004:000016bc       $pdata$??0ImGuiWindow@@QEAA@PEBD@Z 00000001400c06bc     fall.obj\n 7293:  0004:000016c8       $pdata$??1ImGuiWindow@@QEAA@XZ 00000001400c06c8     fall.obj\n 7294:  0004:000016d4       $pdata$?GetID@ImGuiWindow@@QEAAIPEBD0@Z 00000001400c06d4     fall.obj\n 7295:  0004:000016e0       $pdata$?GetID@ImGuiWindow@@QEAAIPEBX@Z 00000001400c06e0     fall.obj\n 7296:  0004:000016ec       $pdata$?GetIDNoKeepAlive@ImGuiWindow@@QEAAIPEBD0@Z 00000001400c06ec     fall.obj\n 7297:  0004:000016f8       $pdata$?GetParentWindow@ImGui@@YAPEAUImGuiWindow@@XZ 00000001400c06f8     fall.obj\n 7298:  0004:00001704       $pdata$?FindWindowByName@ImGui@@YAPEAUImGuiWindow@@PEBD@Z 00000001400c0704     fall.obj\n 7299:  0004:00001710       $pdata$?FocusWindow@ImGui@@YAXPEAUImGuiWindow@@@Z 00000001400c0710     fall.obj\n 7300:  0004:0000171c       $pdata$?EndFrame@ImGui@@YAXXZ 00000001400c071c     fall.obj\n 7301:  0004:00001728       $pdata$?SetActiveID@ImGui@@YAXIPEAUImGuiWindow@@@Z 00000001400c0728     fall.obj\n 7302:  0004:00001734       $pdata$?ClearActiveID@ImGui@@YAXXZ 00000001400c0734     fall.obj\n 7303:  0004:00001740       $pdata$?SetHoveredID@ImGui@@YAXI@Z 00000001400c0740     fall.obj\n 7304:  0004:0000174c       $pdata$?KeepAliveID@ImGui@@YAXI@Z 00000001400c074c     fall.obj\n 7305:  0004:00001758       $pdata$?ItemSize@ImGui@@YAXAEBUImVec2@@M@Z 00000001400c0758     fall.obj\n 7306:  0004:00001764       $pdata$?ItemSize@ImGui@@YAXAEBUImRect@@M@Z 00000001400c0764     fall.obj\n 7307:  0004:00001770       $pdata$?ItemAdd@ImGui@@YA_NAEBUImRect@@PEBI@Z 00000001400c0770     fall.obj\n 7308:  0004:0000177c       $pdata$?IsClippedEx@ImGui@@YA_NAEBUImRect@@PEBI_N@Z 00000001400c077c     fall.obj\n 7309:  0004:00001788       $pdata$?IsHovered@ImGui@@YA_NAEBUImRect@@I_N@Z 00000001400c0788     fall.obj\n 7310:  0004:00001794       $pdata$?FocusableItemRegister@ImGui@@YA_NPEAUImGuiWindow@@_N1@Z 00000001400c0794     fall.obj\n 7311:  0004:000017a0       $pdata$?CalcItemSize@ImGui@@YA?AUImVec2@@U2@MM@Z 00000001400c07a0     fall.obj\n 7312:  0004:000017ac       $pdata$?CalcWrapWidthForPos@ImGui@@YAMAEBUImVec2@@M@Z 00000001400c07ac     fall.obj\n 7313:  0004:000017b8       $pdata$?OpenPopupEx@ImGui@@YAXPEBD_N@Z 00000001400c07b8     fall.obj\n 7314:  0004:000017c4       $pdata$?RenderText@ImGui@@YAXUImVec2@@PEBD1_N@Z 00000001400c07c4     fall.obj\n 7315:  0004:000017d0       $pdata$?RenderTextWrapped@ImGui@@YAXUImVec2@@PEBD1M@Z 00000001400c07d0     fall.obj\n 7316:  0004:000017dc       $pdata$?RenderTextClipped@ImGui@@YAXAEBUImVec2@@0PEBD1PEBU2@0PEBUImRect@@@Z 00000001400c07dc     fall.obj\n 7317:  0004:000017e8       $pdata$?RenderFrame@ImGui@@YAXUImVec2@@0I_NM@Z 00000001400c07e8     fall.obj\n 7318:  0004:000017f4       $pdata$?RenderCollapseTriangle@ImGui@@YAXUImVec2@@_NM@Z 00000001400c07f4     fall.obj\n 7319:  0004:00001800       $pdata$?RenderBullet@ImGui@@YAXUImVec2@@@Z 00000001400c0800     fall.obj\n 7320:  0004:0000180c       $pdata$?RenderCheckMark@ImGui@@YAXUImVec2@@I@Z 00000001400c080c     fall.obj\n 7321:  0004:00001818       $pdata$?FindRenderedTextEnd@ImGui@@YAPEBDPEBD0@Z 00000001400c0818     fall.obj\n 7322:  0004:00001824       $pdata$?ButtonBehavior@ImGui@@YA_NAEBUImRect@@IPEA_N1H@Z 00000001400c0824     fall.obj\n 7323:  0004:00001830       $pdata$?ButtonEx@ImGui@@YA_NPEBDAEBUImVec2@@H@Z 00000001400c0830     fall.obj\n 7324:  0004:0000183c       $pdata$?CloseButton@ImGui@@YA_NIAEBUImVec2@@M@Z 00000001400c083c     fall.obj\n 7325:  0004:00001848       $pdata$?SliderBehavior@ImGui@@YA_NAEBUImRect@@IPEAMMMMHH@Z 00000001400c0848     fall.obj\n 7326:  0004:00001854       $pdata$?SliderFloatN@ImGui@@YA_NPEBDPEAMHMM0M@Z 00000001400c0854     fall.obj\n 7327:  0004:00001860       $pdata$?SliderIntN@ImGui@@YA_NPEBDPEAHHHH0@Z 00000001400c0860     fall.obj\n 7328:  0004:0000186c       $pdata$?DragBehavior@ImGui@@YA_NAEBUImRect@@IPEAMMMMHM@Z 00000001400c086c     fall.obj\n 7329:  0004:00001878       $pdata$?DragFloatN@ImGui@@YA_NPEBDPEAMHMMM0M@Z 00000001400c0878     fall.obj\n 7330:  0004:00001884       $pdata$?DragIntN@ImGui@@YA_NPEBDPEAHHMHH0@Z 00000001400c0884     fall.obj\n 7331:  0004:00001890       $pdata$?InputTextEx@ImGui@@YA_NPEBDPEADHAEBUImVec2@@HP6AHPEAUImGuiTextEditCallbackData@@@ZPEAX@Z 00000001400c0890     fall.obj\n 7332:  0004:0000189c       $pdata$?InputFloatN@ImGui@@YA_NPEBDPEAMHHH@Z 00000001400c089c     fall.obj\n 7333:  0004:000018a8       $pdata$?InputIntN@ImGui@@YA_NPEBDPEAHHH@Z 00000001400c08a8     fall.obj\n 7334:  0004:000018b4       $pdata$?InputScalarEx@ImGui@@YA_NPEBDW4ImGuiDataType@@PEAX220H@Z 00000001400c08b4     fall.obj\n 7335:  0004:000018c0       $pdata$?InputScalarAsWidgetReplacement@ImGui@@YA_NAEBUImRect@@PEBDW4ImGuiDataType@@PEAXIH@Z 00000001400c08c0     fall.obj\n 7336:  0004:000018cc       $pdata$?TreeNodeBehavior@ImGui@@YA_NIHPEBD0@Z 00000001400c08cc     fall.obj\n 7337:  0004:000018d8       $pdata$?TreeNodeBehaviorIsOpen@ImGui@@YA_NIH@Z 00000001400c08d8     fall.obj\n 7338:  0004:000018e4       $pdata$?TreePushRawID@ImGui@@YAXI@Z 00000001400c08e4     fall.obj\n 7339:  0004:000018f0       $pdata$?PlotEx@ImGui@@YAXW4ImGuiPlotType@@PEBDP6AMPEAXH@Z2HH1MMUImVec2@@@Z 00000001400c08f0     fall.obj\n 7340:  0004:000018fc       $pdata$?ParseFormatPrecision@ImGui@@YAHPEBDH@Z 00000001400c08fc     fall.obj\n 7341:  0004:00001908       $pdata$?RoundScalar@ImGui@@YAMMH@Z 00000001400c0908     fall.obj\n 7342   0004:00001914       $pdata$?LogRenderedText@@YAXAEBUImVec2@@PEBD1@Z 00000001400c0914     fall.obj\n 7343   0004:00001920       $pdata$?PushMultiItemsWidths@@YAXHM@Z 00000001400c0920     fall.obj\n ....\n 7346   0004:00001944       $pdata$?GetDefaultFont@@YAPEAUImFont@@XZ 00000001400c0944     fall.obj\n 7347   0004:00001950       $pdata$?SetCurrentFont@@YAXPEAUImFont@@@Z 00000001400c0950     fall.obj\n 7348:  0004:0000195c       $pdata$?SetCurrentWindow@@YAXPEAUImGuiWindow@@@Z 00000001400c095c     fall.obj\n 7349:  0004:00001968       $pdata$?SetWindowPos@@YAXPEAUImGuiWindow@@AEBUImVec2@@H@Z 00000001400c0968     fall.obj\n 7350:  0004:00001974       $pdata$?FindHoveredWindow@@YAPEAUImGuiWindow@@UImVec2@@_N@Z 00000001400c0974     fall.obj\n 7351:  0004:00001980       $pdata$?CreateNewWindow@@YAPEAUImGuiWindow@@PEBDUImVec2@@H@Z 00000001400c0980     fall.obj\n 7352:  0004:0000198c       $pdata$?IsWindowContentHoverable@@YA_NPEAUImGuiWindow@@@Z 00000001400c098c     fall.obj\n 7353   0004:00001998       $pdata$?ClearSetNextWindowData@@YAXXZ 00000001400c0998     fall.obj\n 7354:  0004:000019a4       $pdata$?CheckStacksSize@@YAXPEAUImGuiWindow@@_N@Z 00000001400c09a4     fall.obj\n 7355:  0004:000019b0       $pdata$?Scrollbar@@YAXPEAUImGuiWindow@@_N@Z 00000001400c09b0     fall.obj\n 7356   0004:000019bc       $pdata$?AddDrawListToRenderList@@YAXAEAV?$ImVector@PEAUImDrawList@@@@PEAUImDrawList@@@Z 00000001400c09bc     fall.obj\n 7357:  0004:000019c8       $pdata$?AddWindowToRenderList@@YAXAEAV?$ImVector@PEAUImDrawList@@@@PEAUImGuiWindow@@@Z 00000001400c09c8     fall.obj\n 7358:  0004:000019d4       $pdata$?AddWindowToSortedBuffer@@YAXAEAV?$ImVector@PEAUImGuiWindow@@@@PEAUImGuiWindow@@@Z 00000001400c09d4     fall.obj\n 7359:  0004:000019e0       $pdata$?FindWindowSettings@@YAPEAUImGuiIniData@@PEBD@Z 00000001400c09e0     fall.obj\n 7360:  0004:000019ec       $pdata$?AddWindowSettings@@YAPEAUImGuiIniData@@PEBD@Z 00000001400c09ec     fall.obj\n 7361   0004:000019f8       $pdata$?LoadIniSettingsFromDisk@@YAXPEBD@Z 00000001400c09f8     fall.obj\n 7362   0004:00001a04       $pdata$?SaveIniSettingsToDisk@@YAXPEBD@Z 00000001400c0a04     fall.obj\n ....\n 7369   0004:00001a58       $pdata$?ClosePopup@@YAXI@Z 00000001400c0a58     fall.obj\n 7370   0004:00001a64       $pdata$?IsPopupOpen@@YA_NI@Z 00000001400c0a64     fall.obj\n 7371:  0004:00001a70       $pdata$?GetFrontMostModalRootWindow@@YAPEAUImGuiWindow@@XZ 00000001400c0a70     fall.obj\n 7372   0004:00001a7c       $pdata$?FindBestPopupWindowPos@@YA?AUImVec2@@AEBU1@0PEAHAEBUImRect@@@Z 00000001400c0a7c     fall.obj\n 7373:  0004:00001a88       $pdata$?InputTextFilterCharacter@@YA_NPEAIHP6AHPEAUImGuiTextEditCallbackData@@@ZPEAX@Z 00000001400c0a88     fall.obj\n 7374   0004:00001a94       $pdata$?InputTextCalcTextLenAndLineCount@@YAHPEBDPEAPEBD@Z 00000001400c0a94     fall.obj\n 7375   0004:00001aa0       $pdata$?InputTextCalcTextSizeW@@YA?AUImVec2@@PEBG0PEAPEBGPEAU1@_N@Z 00000001400c0aa0     fall.obj\n 7376:  0004:00001aac       $pdata$?DataTypeFormatString@@YAXW4ImGuiDataType@@PEAXPEBDPEADH@Z 00000001400c0aac     fall.obj\n 7377:  0004:00001ab8       $pdata$?DataTypeFormatString@@YAXW4ImGuiDataType@@PEAXHPEADH@Z 00000001400c0ab8     fall.obj\n 7378:  0004:00001ac4       $pdata$?DataTypeApplyOpFromText@@YA_NPEBD0W4ImGuiDataType@@PEAX0@Z 00000001400c0ac4     fall.obj\n 7379   0004:00001ad0       $pdata$?GetClipboardTextFn_DefaultImpl@@YAPEBDPEAX@Z 00000001400c0ad0     fall.obj\n 7380   0004:00001adc       $pdata$?SetClipboardTextFn_DefaultImpl@@YAXPEAXPEBD@Z 00000001400c0adc     fall.obj\n 7381   0004:00001ae8       $pdata$?ImeSetInputScreenPosFn_DefaultImpl@@YAXHH@Z 00000001400c0ae8     fall.obj\n 7382   0004:00001af4       $pdata$?ImStrncpy@@YAXPEADPEBDH@Z 00000001400c0af4     fall.obj\n 7383:  0004:00001b00       $pdata$?LowerBound@@YAPEAUPair@ImGuiStorage@@AEAV?$ImVector@UPair@ImGuiStorage@@@@I@Z 00000001400c0b00     fall.obj\n 7384   0004:00001b0c       $pdata$?SetCursorPosYAndSetupDummyPrevLine@@YAXMM@Z 00000001400c0b0c     fall.obj\n 7385   0004:00001b18       $pdata$?ChildWindowComparer@@YAHPEBX0@Z 00000001400c0b18     fall.obj\n 7386   0004:00001b24       $pdata$?BeginChildEx@@YA_NPEBDIAEBUImVec2@@_NH@Z 00000001400c0b24     fall.obj\n 7387:  0004:00001b30       $pdata$?ApplySizeFullWithConstraint@@YAXPEAUImGuiWindow@@UImVec2@@@Z 00000001400c0b30     fall.obj\n 7388:  0004:00001b3c       $pdata$?GetStyleVarInfo@@YAPEBUImGuiStyleVarInfo@@H@Z 00000001400c0b3c     fall.obj\n 7389   0004:00001b48       $pdata$?SliderBehaviorCalcRatioFromValue@@YAMMMMMM@Z 00000001400c0b48     fall.obj\n 7390   0004:00001b54       $pdata$?Plot_ArrayGetter@@YAMPEAXH@Z 00000001400c0b54     fall.obj\n 7391:  0004:00001b60       $pdata$?STB_TEXTEDIT_GETCHAR@ImGuiStb@@YAGPEBUImGuiTextEditState@@H@Z 00000001400c0b60     fall.obj\n 7392:  0004:00001b6c       $pdata$?STB_TEXTEDIT_GETWIDTH@ImGuiStb@@YAMPEAUImGuiTextEditState@@HH@Z 00000001400c0b6c     fall.obj\n 7393:  0004:00001b78       $pdata$?STB_TEXTEDIT_KEYTOTEXT@ImGuiStb@@YAHH@Z 00000001400c0b78     fall.obj\n 7394:  0004:00001b84       $pdata$?STB_TEXTEDIT_LAYOUTROW@ImGuiStb@@YAXPEAUStbTexteditRow@1@PEAUImGuiTextEditState@@H@Z 00000001400c0b84     fall.obj\n 7395:  0004:00001b90       $pdata$?is_separator@ImGuiStb@@YA_NI@Z 00000001400c0b90     fall.obj\n 7396:  0004:00001b9c       $pdata$?is_word_boundary_from_right@ImGuiStb@@YAHPEAUImGuiTextEditState@@H@Z 00000001400c0b9c     fall.obj\n 7397:  0004:00001ba8       $pdata$?STB_TEXTEDIT_MOVEWORDLEFT_IMPL@ImGuiStb@@YAHPEAUImGuiTextEditState@@H@Z 00000001400c0ba8     fall.obj\n 7398:  0004:00001bb4       $pdata$?STB_TEXTEDIT_MOVEWORDRIGHT_IMPL@ImGuiStb@@YAHPEAUImGuiTextEditState@@H@Z 00000001400c0bb4     fall.obj\n 7399:  0004:00001bc0       $pdata$?STB_TEXTEDIT_DELETECHARS@ImGuiStb@@YAXPEAUImGuiTextEditState@@HH@Z 00000001400c0bc0     fall.obj\n 7400:  0004:00001bcc       $pdata$?STB_TEXTEDIT_INSERTCHARS@ImGuiStb@@YA_NPEAUImGuiTextEditState@@HPEBGH@Z 00000001400c0bcc     fall.obj\n 7401:  0004:00001bd8       $pdata$?stb_text_locate_coord@ImGuiStb@@YAHPEAUImGuiTextEditState@@MM@Z 00000001400c0bd8     fall.obj\n 7402:  0004:00001be4       $pdata$?stb_textedit_click@ImGuiStb@@YAXPEAUImGuiTextEditState@@PEAUSTB_TexteditState@1@MM@Z 00000001400c0be4     fall.obj\n 7403:  0004:00001bf0       $pdata$?stb_textedit_drag@ImGuiStb@@YAXPEAUImGuiTextEditState@@PEAUSTB_TexteditState@1@MM@Z 00000001400c0bf0     fall.obj\n 7404:  0004:00001bfc       $pdata$?stb_text_undo@ImGuiStb@@YAXPEAUImGuiTextEditState@@PEAUSTB_TexteditState@1@@Z 00000001400c0bfc     fall.obj\n 7405:  0004:00001c08       $pdata$?stb_text_redo@ImGuiStb@@YAXPEAUImGuiTextEditState@@PEAUSTB_TexteditState@1@@Z 00000001400c0c08     fall.obj\n 7406:  0004:00001c14       $pdata$?stb_text_makeundo_delete@ImGuiStb@@YAXPEAUImGuiTextEditState@@PEAUSTB_TexteditState@1@HH@Z 00000001400c0c14     fall.obj\n 7407:  0004:00001c20       $pdata$?stb_text_makeundo_insert@ImGuiStb@@YAXPEAUSTB_TexteditState@1@HH@Z 00000001400c0c20     fall.obj\n 7408:  0004:00001c2c       $pdata$?stb_text_makeundo_replace@ImGuiStb@@YAXPEAUImGuiTextEditState@@PEAUSTB_TexteditState@1@HHH@Z 00000001400c0c2c     fall.obj\n 7409:  0004:00001c38       $pdata$?stb_textedit_find_charpos@ImGuiStb@@YAXPEAUStbFindState@1@PEAUImGuiTextEditState@@HH@Z 00000001400c0c38     fall.obj\n 7410:  0004:00001c44       $pdata$?stb_textedit_clamp@ImGuiStb@@YAXPEAUImGuiTextEditState@@PEAUSTB_TexteditState@1@@Z 00000001400c0c44     fall.obj\n 7411:  0004:00001c50       $pdata$?stb_textedit_delete@ImGuiStb@@YAXPEAUImGuiTextEditState@@PEAUSTB_TexteditState@1@HH@Z 00000001400c0c50     fall.obj\n 7412:  0004:00001c5c       $pdata$?stb_textedit_delete_selection@ImGuiStb@@YAXPEAUImGuiTextEditState@@PEAUSTB_TexteditState@1@@Z 00000001400c0c5c     fall.obj\n 7413:  0004:00001c68       $pdata$?stb_textedit_sortselection@ImGuiStb@@YAXPEAUSTB_TexteditState@1@@Z 00000001400c0c68     fall.obj\n 7414:  0004:00001c74       $pdata$?stb_textedit_move_to_first@ImGuiStb@@YAXPEAUSTB_TexteditState@1@@Z 00000001400c0c74     fall.obj\n 7415:  0004:00001c80       $pdata$?stb_textedit_move_to_last@ImGuiStb@@YAXPEAUImGuiTextEditState@@PEAUSTB_TexteditState@1@@Z 00000001400c0c80     fall.obj\n 7416:  0004:00001c8c       $pdata$?stb_textedit_cut@ImGuiStb@@YAHPEAUImGuiTextEditState@@PEAUSTB_TexteditState@1@@Z 00000001400c0c8c     fall.obj\n 7417:  0004:00001c98       $pdata$?stb_textedit_paste@ImGuiStb@@YAHPEAUImGuiTextEditState@@PEAUSTB_TexteditState@1@PEBGH@Z 00000001400c0c98     fall.obj\n 7418:  0004:00001ca4       $pdata$?stb_textedit_key@ImGuiStb@@YAXPEAUImGuiTextEditState@@PEAUSTB_TexteditState@1@H@Z 00000001400c0ca4     fall.obj\n 7419:  0004:00001cb0       $pdata$?stb_textedit_discard_undo@ImGuiStb@@YAXPEAUStbUndoState@1@@Z 00000001400c0cb0     fall.obj\n 7420:  0004:00001cbc       $pdata$?stb_textedit_discard_redo@ImGuiStb@@YAXPEAUStbUndoState@1@@Z 00000001400c0cbc     fall.obj\n 7421:  0004:00001cc8       $pdata$?stb_text_create_undo_record@ImGuiStb@@YAPEAUStbUndoRecord@1@PEAUStbUndoState@1@H@Z 00000001400c0cc8     fall.obj\n 7422:  0004:00001cd4       $pdata$?stb_text_createundo@ImGuiStb@@YAPEAGPEAUStbUndoState@1@HHH@Z 00000001400c0cd4     fall.obj\n 7423:  0004:00001ce0       $pdata$?stb_textedit_initialize_state@ImGuiStb@@YAXPEAUSTB_TexteditState@1@H@Z 00000001400c0ce0     fall.obj\n 7424   0004:00001cec       $pdata$?Items_ArrayGetter@@YA_NPEAXHPEAPEBD@Z 00000001400c0cec     fall.obj\n 7425   0004:00001cf8       $pdata$?Items_SingleStringGetter@@YA_NPEAXHPEAPEBD@Z 00000001400c0cf8     fall.obj\n ....\n 7503   0004:000020a0       $pdata$?stb_decompress_token@@YAPEAEPEAE@Z 00000001400c10a0     fall.obj\n 7504   0004:000020ac       $pdata$?stb_adler32@@YAIIPEAEI@Z 00000001400c10ac     fall.obj\n 7505:  0004:000020b8       $pdata$?ImGui_ImplSdlGL3_RenderDrawLists@@YAXPEAUImDrawData@@@Z 00000001400c10b8     fall.obj\n 7506:  0004:000020c4       $pdata$?ImGui_ImplSdlGL3_GetClipboardText@@YAPEBDPEAX@Z 00000001400c10c4     fall.obj\n 7507:  0004:000020d0       $pdata$?ImGui_ImplSdlGL3_SetClipboardText@@YAXPEAXPEBD@Z 00000001400c10d0     fall.obj\n 7508:  0004:000020dc       $pdata$?ImGui_ImplSdlGL3_CreateFontsTexture@@YAXXZ 00000001400c10dc     fall.obj\n 7509   0004:000020e8       $pdata$?stbi__cpuid3@@YAHXZ 00000001400c10e8     fall.obj\n 7510   0004:000020f4       $pdata$?stbi__sse2_available@@YAHXZ 00000001400c10f4     fall.obj\n ....\n 7704   0004:00002a0c       $pdata$??0ImDrawCmd@@QEAA@XZ 00000001400c1a0c     fall.obj\n 7705   0004:00002a18       $pdata$??0ImDrawList@@QEAA@XZ 00000001400c1a18     fall.obj\n 7706:  0004:00002a24       $pdata$??0ImGuiColMod@@QEAA@XZ 00000001400c1a24     fall.obj\n 7707:  0004:00002a30       $pdata$??0ImGuiContext@@QEAA@XZ 00000001400c1a30     fall.obj\n 7708:  0004:00002a3c       $pdata$??0ImGuiDrawContext@@QEAA@XZ 00000001400c1a3c     fall.obj\n 7709:  0004:00002a48       $pdata$??0ImGuiListClipper@@QEAA@HM@Z 00000001400c1a48     fall.obj\n 7710:  0004:00002a54       $pdata$??0ImGuiMouseCursorData@@QEAA@XZ 00000001400c1a54     fall.obj\n 7711:  0004:00002a60       $pdata$??0ImGuiPopupRef@@QEAA@IPEAUImGuiWindow@@IAEBUImVec2@@@Z 00000001400c1a60     fall.obj\n 7712:  0004:00002a6c       $pdata$??0ImGuiSizeConstraintCallbackData@@QEAA@XZ 00000001400c1a6c     fall.obj\n 7713:  0004:00002a78       $pdata$??0ImGuiStorage@@QEAA@XZ 00000001400c1a78     fall.obj\n 7714:  0004:00002a84       $pdata$??0ImGuiTextBuffer@@QEAA@XZ 00000001400c1a84     fall.obj\n 7715:  0004:00002a90       $pdata$??0ImGuiTextEditState@@QEAA@XZ 00000001400c1a90     fall.obj\n 7716   0004:00002a9c       $pdata$??0ImRect@@QEAA@AEBUImVec4@@@Z 00000001400c1a9c     fall.obj\n 7717   0004:00002aa8       $pdata$??0ImRect@@QEAA@MMMM@Z 00000001400c1aa8     fall.obj\n 7718   0004:00002ab4       $pdata$??0ImRect@@QEAA@XZ  00000001400c1ab4     fall.obj\n 7719:  0004:00002ac0       $pdata$??1?$ImVector@UPair@ImGuiStorage@@@@QEAA@XZ 00000001400c1ac0     fall.obj\n 7720   0004:00002ac0       $pdata$??1?$ImVector@PEAUImDrawList@@@@QEAA@XZ 00000001400c1ac0     fall.obj\n 7721   0004:00002ac0       $pdata$??1?$ImVector@_N@@QEAA@XZ 00000001400c1ac0     fall.obj\n 7722   0004:00002ac0       $pdata$??1?$ImVector@D@@QEAA@XZ 00000001400c1ac0     fall.obj\n 7723:  0004:00002ac0       $pdata$??1?$ImVector@UImGuiGroupData@@@@QEAA@XZ 00000001400c1ac0     fall.obj\n 7724:  0004:00002ac0       $pdata$??1?$ImVector@UImGuiColumnData@@@@QEAA@XZ 00000001400c1ac0     fall.obj\n 7725   0004:00002ac0       $pdata$??1?$ImVector@UImDrawCmd@@@@QEAA@XZ 00000001400c1ac0     fall.obj\n 7726   0004:00002ac0       $pdata$??1?$ImVector@G@@QEAA@XZ 00000001400c1ac0     fall.obj\n ....\n 7730   0004:00002ac0       $pdata$??1?$ImVector@PEAX@@QEAA@XZ 00000001400c1ac0     fall.obj\n 7731   0004:00002ac0       $pdata$??1?$ImVector@UImVec2@@@@QEAA@XZ 00000001400c1ac0     fall.obj\n 7732:  0004:00002ac0       $pdata$??1?$ImVector@UImGuiColMod@@@@QEAA@XZ 00000001400c1ac0     fall.obj\n 7733   0004:00002ac0       $pdata$??1?$ImVector@UImDrawChannel@@@@QEAA@XZ 00000001400c1ac0     fall.obj\n 7734:  0004:00002ac0       $pdata$??1?$ImVector@UImGuiPopupRef@@@@QEAA@XZ 00000001400c1ac0     fall.obj\n 7735:  0004:00002ac0       $pdata$??1?$ImVector@PEAUImGuiWindow@@@@QEAA@XZ 00000001400c1ac0     fall.obj\n 7736   0004:00002ac0       $pdata$??1?$ImVector@M@@QEAA@XZ 00000001400c1ac0     fall.obj\n 7737   0004:00002ac0       $pdata$??1?$ImVector@PEAUImFont@@@@QEAA@XZ 00000001400c1ac0     fall.obj\n 7738   0004:00002ac0       $pdata$??1?$ImVector@Ustbrp_rect@@@@QEAA@XZ 00000001400c1ac0     fall.obj\n 7739   0004:00002ac0       $pdata$??1?$ImVector@UImFontConfig@@@@QEAA@XZ 00000001400c1ac0     fall.obj\n 7740:  0004:00002ac0       $pdata$??1?$ImVector@UImGuiStyleMod@@@@QEAA@XZ 00000001400c1ac0     fall.obj\n 7741:  0004:00002ac0       $pdata$??1?$ImVector@UImGuiIniData@@@@QEAA@XZ 00000001400c1ac0     fall.obj\n 7742   0004:00002ac0       $pdata$??1?$ImVector@UGlyph@ImFont@@@@QEAA@XZ 00000001400c1ac0     fall.obj\n 7743   0004:00002acc       $pdata$??1ImDrawList@@QEAA@XZ 00000001400c1acc     fall.obj\n 7744:  0004:00002ad8       $pdata$??1ImGuiContext@@QEAA@XZ 00000001400c1ad8     fall.obj\n 7745:  0004:00002ae4       $pdata$??1ImGuiDrawContext@@QEAA@XZ 00000001400c1ae4     fall.obj\n 7746:  0004:00002af0       $pdata$??1ImGuiListClipper@@QEAA@XZ 00000001400c1af0     fall.obj\n 7747:  0004:00002afc       $pdata$??1ImGuiStorage@@QEAA@XZ 00000001400c1afc     fall.obj\n 7748:  0004:00002afc       $pdata$??1ImGuiTextBuffer@@QEAA@XZ 00000001400c1afc     fall.obj\n 7749:  0004:00002b08       $pdata$??1ImGuiTextEditState@@QEAA@XZ 00000001400c1b08     fall.obj\n 7750   0004:00002b14       $pdata$??A?$ImVector@D@@QEAAAEADH@Z 00000001400c1b14     fall.obj\n 7751   0004:00002b20       $pdata$??A?$ImVector@G@@QEAAAEAGH@Z 00000001400c1b20     fall.obj\n 7752   0004:00002b2c       $pdata$??A?$ImVector@G@@QEBAAEBGH@Z 00000001400c1b2c     fall.obj\n 7753   0004:00002b38       $pdata$??A?$ImVector@M@@QEAAAEAMH@Z 00000001400c1b38     fall.obj\n 7754:  0004:00002b38       $pdata$??A?$ImVector@UImGuiColumnData@@@@QEAAAEAUImGuiColumnData@@H@Z 00000001400c1b38     fall.obj\n 7755   0004:00002b44       $pdata$??A?$ImVector@M@@QEBAAEBMH@Z 00000001400c1b44     fall.obj\n 7756:  0004:00002b50       $pdata$??A?$ImVector@PEAUImGuiWindow@@@@QEAAAEAPEAUImGuiWindow@@H@Z 00000001400c1b50     fall.obj\n 7757   0004:00002b50       $pdata$??A?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@H@Z 00000001400c1b50     fall.obj\n 7758   0004:00002b50       $pdata$??A?$ImVector@PEAUImDrawList@@@@QEAAAEAPEAUImDrawList@@H@Z 00000001400c1b50     fall.obj\n ....\n 7762   0004:00002b80       $pdata$??A?$ImVector@UImDrawVert@@@@QEAAAEAUImDrawVert@@H@Z 00000001400c1b80     fall.obj\n 7763   0004:00002b8c       $pdata$??A?$ImVector@UImFontConfig@@@@QEAAAEAUImFontConfig@@H@Z 00000001400c1b8c     fall.obj\n 7764:  0004:00002b98       $pdata$??A?$ImVector@UImGuiIniData@@@@QEAAAEAUImGuiIniData@@H@Z 00000001400c1b98     fall.obj\n 7765:  0004:00002ba4       $pdata$??A?$ImVector@UImGuiPopupRef@@@@QEAAAEAUImGuiPopupRef@@H@Z 00000001400c1ba4     fall.obj\n 7766   0004:00002ba4       $pdata$??A?$ImVector@UImDrawChannel@@@@QEAAAEAUImDrawChannel@@H@Z 00000001400c1ba4     fall.obj\n 7767   0004:00002bb0       $pdata$??A?$ImVector@Ustbrp_rect@@@@QEAAAEAUstbrp_rect@@H@Z 00000001400c1bb0     fall.obj\n 7768:  0004:00002bb0       $pdata$??A?$ImVector@UTextRange@ImGuiTextFilter@@@@QEAAAEAUTextRange@ImGuiTextFilter@@H@Z 00000001400c1bb0     fall.obj\n 7769:  0004:00002bb0       $pdata$??A?$ImVector@UPair@ImGuiStorage@@@@QEAAAEAUPair@ImGuiStorage@@H@Z 00000001400c1bb0     fall.obj\n 7770:  0004:00002bbc       $pdata$??A?$ImVector@UTextRange@ImGuiTextFilter@@@@QEBAAEBUTextRange@ImGuiTextFilter@@H@Z 00000001400c1bbc     fall.obj\n 7771   0004:00002bc8       $pdata$??BImColor@@QEBA?AUImVec4@@XZ 00000001400c1bc8     fall.obj\n 7772   0004:00002bd4       $pdata$??_GImDrawList@@QEAAPEAXI@Z 00000001400c1bd4     fall.obj\n 7773   0004:00002be0       $pdata$??_GImFont@@QEAAPEAXI@Z 00000001400c1be0     fall.obj\n 7774:  0004:00002bec       $pdata$??_GImGuiContext@@QEAAPEAXI@Z 00000001400c1bec     fall.obj\n 7775:  0004:00002bf8       $pdata$??_GImGuiTextBuffer@@QEAAPEAXI@Z 00000001400c1bf8     fall.obj\n 7776:  0004:00002c04       $pdata$??_GImGuiWindow@@QEAAPEAXI@Z 00000001400c1c04     fall.obj\n 7777   0004:00002c10       $pdata$??_H@YAXPEAX_K1P6APEAX0@Z@Z 00000001400c1c10     fall.obj\n 7778   0004:00002c1c       $pdata$??_I@YAXPEAX_K1P6AX0@Z@Z 00000001400c1c1c     fall.obj\n 7779   0004:00002c28       $pdata$?Contains@ImRect@@QEBA_NAEBUImVec2@@@Z 00000001400c1c28     fall.obj\n 7780:  0004:00002c34       $pdata$?CursorClamp@ImGuiTextEditState@@QEAAXXZ 00000001400c1c34     fall.obj\n 7781   0004:00002c40       $pdata$?GetBL@ImRect@@QEBA?AUImVec2@@XZ 00000001400c1c40     fall.obj\n 7782   0004:00002c4c       $pdata$?GetCenter@ImRect@@QEBA?AUImVec2@@XZ 00000001400c1c4c     fall.obj\n 7783   0004:00002c58       $pdata$?GetCharAdvance@ImFont@@QEBAMG@Z 00000001400c1c58     fall.obj\n 7784   0004:00002c64       $pdata$?GetClosestPoint@ImRect@@QEBA?AUImVec2@@U2@_N@Z 00000001400c1c64     fall.obj\n 7785:  0004:00002c70       $pdata$?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ 00000001400c1c70     fall.obj\n 7786:  0004:00002c7c       $pdata$?GetCurrentWindowRead@ImGui@@YAPEAUImGuiWindow@@XZ 00000001400c1c7c     fall.obj\n 7787   0004:00002c88       $pdata$?GetSize@ImRect@@QEBA?AUImVec2@@XZ 00000001400c1c88     fall.obj\n 7788   0004:00002c94       $pdata$?GetTR@ImRect@@QEBA?AUImVec2@@XZ 00000001400c1c94     fall.obj\n 7789:  0004:00002ca0       $pdata$?HasSelection@ImGuiTextEditState@@QEBA_NXZ 00000001400c1ca0     fall.obj\n 7790   0004:00002cac       $pdata$?IsLoaded@ImFont@@QEBA_NXZ 00000001400c1cac     fall.obj\n 7791:  0004:00002cb8       $pdata$?MenuBarHeight@ImGuiWindow@@QEBAMXZ 00000001400c1cb8     fall.obj\n 7792:  0004:00002cc4       $pdata$?MenuBarRect@ImGuiWindow@@QEBA?AUImRect@@XZ 00000001400c1cc4     fall.obj\n 7793:  0004:00002cd0       $pdata$?NodeDrawList@Funcs@?4??ShowMetricsWindow@ImGui@@YAXPEA_N@Z@SAXPEAUImDrawList@@PEBD@Z 00000001400c1cd0     fall.obj\n 7794:  0004:00002cdc       $pdata$?NodeWindow@Funcs@?4??ShowMetricsWindow@ImGui@@YAXPEA_N@Z@SAXPEAUImGuiWindow@@PEBD@Z 00000001400c1cdc     fall.obj\n 7795:  0004:00002ce8       $pdata$?NodeWindows@Funcs@?4??ShowMetricsWindow@ImGui@@YAXPEA_N@Z@SAXAEAV?$ImVector@PEAUImGuiWindow@@@@PEBD@Z 00000001400c1ce8     fall.obj\n 7796   0004:00002cf4       $pdata$?Overlaps@ImRect@@QEBA_NAEBU1@@Z 00000001400c1cf4     fall.obj\n 7797   0004:00002d00       $pdata$?PathClear@ImDrawList@@QEAAXXZ 00000001400c1d00     fall.obj\n ....\n 7799   0004:00002d18       $pdata$?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z 00000001400c1d18     fall.obj\n 7800   0004:00002d24       $pdata$?PathStroke@ImDrawList@@QEAAXI_NM@Z 00000001400c1d24     fall.obj\n 7801:  0004:00002d30       $pdata$?Rect@ImGuiWindow@@QEBA?AUImRect@@XZ 00000001400c1d30     fall.obj\n 7802   0004:00002d3c       $pdata$?StringCbLengthA@@YAJPEBD_KPEA_K@Z 00000001400c1d3c     fall.obj\n 7803   0004:00002d48       $pdata$?StringCbPrintfA@@YAJPEAD_KPEBDZZ 00000001400c1d48     fall.obj\n 7804   0004:00002d54       $pdata$?StringCbVPrintfA@@YAJPEAD_KPEBD0@Z 00000001400c1d54     fall.obj\n 7805:  0004:00002d60       $pdata$?TitleBarHeight@ImGuiWindow@@QEBAMXZ 00000001400c1d60     fall.obj\n 7806:  0004:00002d6c       $pdata$?TitleBarRect@ImGuiWindow@@QEBA?AUImRect@@XZ 00000001400c1d6c     fall.obj\n 7807   0004:00002d78       $pdata$?_grow_capacity@?$ImVector@G@@QEAAHH@Z 00000001400c1d78     fall.obj\n 7808   0004:00002d78       $pdata$?_grow_capacity@?$ImVector@PEAX@@QEAAHH@Z 00000001400c1d78     fall.obj\n ....\n 7813   0004:00002d78       $pdata$?_grow_capacity@?$ImVector@_N@@QEAAHH@Z 00000001400c1d78     fall.obj\n 7814   0004:00002d78       $pdata$?_grow_capacity@?$ImVector@UImVec4@@@@QEAAHH@Z 00000001400c1d78     fall.obj\n 7815:  0004:00002d78       $pdata$?_grow_capacity@?$ImVector@UImGuiGroupData@@@@QEAAHH@Z 00000001400c1d78     fall.obj\n 7816   0004:00002d78       $pdata$?_grow_capacity@?$ImVector@Ustbrp_rect@@@@QEAAHH@Z 00000001400c1d78     fall.obj\n 7817   0004:00002d78       $pdata$?_grow_capacity@?$ImVector@UGlyph@ImFont@@@@QEAAHH@Z 00000001400c1d78     fall.obj\n 7818   0004:00002d78       $pdata$?_grow_capacity@?$ImVector@UImVec2@@@@QEAAHH@Z 00000001400c1d78     fall.obj\n 7819   0004:00002d78       $pdata$?_grow_capacity@?$ImVector@UImFontConfig@@@@QEAAHH@Z 00000001400c1d78     fall.obj\n 7820:  0004:00002d78       $pdata$?_grow_capacity@?$ImVector@UImGuiPopupRef@@@@QEAAHH@Z 00000001400c1d78     fall.obj\n 7821   0004:00002d78       $pdata$?_grow_capacity@?$ImVector@D@@QEAAHH@Z 00000001400c1d78     fall.obj\n 7822   0004:00002d78       $pdata$?_grow_capacity@?$ImVector@UImDrawCmd@@@@QEAAHH@Z 00000001400c1d78     fall.obj\n 7823   0004:00002d78       $pdata$?_grow_capacity@?$ImVector@PEAUImDrawList@@@@QEAAHH@Z 00000001400c1d78     fall.obj\n 7824:  0004:00002d78       $pdata$?_grow_capacity@?$ImVector@UTextRange@ImGuiTextFilter@@@@QEAAHH@Z 00000001400c1d78     fall.obj\n 7825:  0004:00002d78       $pdata$?_grow_capacity@?$ImVector@UImGuiColMod@@@@QEAAHH@Z 00000001400c1d78     fall.obj\n 7826:  0004:00002d78       $pdata$?_grow_capacity@?$ImVector@UImGuiColumnData@@@@QEAAHH@Z 00000001400c1d78     fall.obj\n 7827:  0004:00002d78       $pdata$?_grow_capacity@?$ImVector@UImGuiIniData@@@@QEAAHH@Z 00000001400c1d78     fall.obj\n 7828   0004:00002d78       $pdata$?_grow_capacity@?$ImVector@M@@QEAAHH@Z 00000001400c1d78     fall.obj\n 7829:  0004:00002d78       $pdata$?_grow_capacity@?$ImVector@PEAUImGuiWindow@@@@QEAAHH@Z 00000001400c1d78     fall.obj\n 7830:  0004:00002d78       $pdata$?_grow_capacity@?$ImVector@UImGuiStyleMod@@@@QEAAHH@Z 00000001400c1d78     fall.obj\n 7831   0004:00002d84       $pdata$?back@?$ImVector@I@@QEAAAEAIXZ 00000001400c1d84     fall.obj\n 7832   0004:00002d84       $pdata$?back@?$ImVector@M@@QEAAAEAMXZ 00000001400c1d84     fall.obj\n ....\n 7834   0004:00002d9c       $pdata$?back@?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@XZ 00000001400c1d9c     fall.obj\n 7835   0004:00002da8       $pdata$?back@?$ImVector@UImFontConfig@@@@QEAAAEAUImFontConfig@@XZ 00000001400c1da8     fall.obj\n 7836:  0004:00002db4       $pdata$?back@?$ImVector@UImGuiColMod@@@@QEAAAEAUImGuiColMod@@XZ 00000001400c1db4     fall.obj\n 7837:  0004:00002dc0       $pdata$?back@?$ImVector@UImGuiGroupData@@@@QEAAAEAUImGuiGroupData@@XZ 00000001400c1dc0     fall.obj\n 7838:  0004:00002dcc       $pdata$?back@?$ImVector@UImGuiIniData@@@@QEAAAEAUImGuiIniData@@XZ 00000001400c1dcc     fall.obj\n 7839:  0004:00002dd8       $pdata$?back@?$ImVector@UImGuiStyleMod@@@@QEAAAEAUImGuiStyleMod@@XZ 00000001400c1dd8     fall.obj\n 7840   0004:00002de4       $pdata$?back@?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@XZ 00000001400c1de4     fall.obj\n 7841:  0004:00002de4       $pdata$?back@?$ImVector@PEAUImGuiWindow@@@@QEAAAEAPEAUImGuiWindow@@XZ 00000001400c1de4     fall.obj\n 7842   0004:00002de4       $pdata$?back@?$ImVector@PEAX@@QEAAAEAPEAXXZ 00000001400c1de4     fall.obj\n 7843   0004:00002de4       $pdata$?back@?$ImVector@UImVec2@@@@QEAAAEAUImVec2@@XZ 00000001400c1de4     fall.obj\n 7844   0004:00002df0       $pdata$?back@?$ImVector@UImVec4@@@@QEAAAEAUImVec4@@XZ 00000001400c1df0     fall.obj\n 7845   0004:00002dfc       $pdata$?back@?$ImVector@_N@@QEAAAEA_NXZ 00000001400c1dfc     fall.obj\n 7846:  0004:00002e08       $pdata$?begin@ImGuiTextBuffer@@QEBAPEBDXZ 00000001400c1e08     fall.obj\n 7847   0004:00002e14       $pdata$?clear@?$ImVector@UImDrawVert@@@@QEAAXXZ 00000001400c1e14     fall.obj\n 7848   0004:00002e14       $pdata$?clear@?$ImVector@PEAX@@QEAAXXZ 00000001400c1e14     fall.obj\n ....\n 7852   0004:00002e14       $pdata$?clear@?$ImVector@UImVec2@@@@QEAAXXZ 00000001400c1e14     fall.obj\n 7853   0004:00002e14       $pdata$?clear@?$ImVector@UImVec4@@@@QEAAXXZ 00000001400c1e14     fall.obj\n 7854:  0004:00002e14       $pdata$?clear@?$ImVector@UImGuiColMod@@@@QEAAXXZ 00000001400c1e14     fall.obj\n 7855:  0004:00002e14       $pdata$?clear@?$ImVector@UImGuiStyleMod@@@@QEAAXXZ 00000001400c1e14     fall.obj\n 7856:  0004:00002e14       $pdata$?clear@?$ImVector@UImGuiPopupRef@@@@QEAAXXZ 00000001400c1e14     fall.obj\n 7857   0004:00002e14       $pdata$?clear@?$ImVector@D@@QEAAXXZ 00000001400c1e14     fall.obj\n 7858:  0004:00002e14       $pdata$?clear@?$ImVector@UPair@ImGuiStorage@@@@QEAAXXZ 00000001400c1e14     fall.obj\n 7859   0004:00002e14       $pdata$?clear@?$ImVector@UImFontConfig@@@@QEAAXXZ 00000001400c1e14     fall.obj\n 7860:  0004:00002e14       $pdata$?clear@?$ImVector@UImGuiIniData@@@@QEAAXXZ 00000001400c1e14     fall.obj\n 7861   0004:00002e14       $pdata$?clear@?$ImVector@UImDrawChannel@@@@QEAAXXZ 00000001400c1e14     fall.obj\n 7862   0004:00002e14       $pdata$?clear@?$ImVector@UGlyph@ImFont@@@@QEAAXXZ 00000001400c1e14     fall.obj\n 7863:  0004:00002e14       $pdata$?clear@?$ImVector@PEAUImGuiWindow@@@@QEAAXXZ 00000001400c1e14     fall.obj\n 7864   0004:00002e14       $pdata$?clear@?$ImVector@G@@QEAAXXZ 00000001400c1e14     fall.obj\n 7865   0004:00002e14       $pdata$?clear@?$ImVector@PEAUImFont@@@@QEAAXXZ 00000001400c1e14     fall.obj\n 7866:  0004:00002e20       $pdata$?clear@ImGuiTextBuffer@@QEAAXXZ 00000001400c1e20     fall.obj\n 7867   0004:00002e2c       $pdata$?empty@?$ImVector@UGlyph@ImFont@@@@QEBA_NXZ 00000001400c1e2c     fall.obj\n 7868:  0004:00002e2c       $pdata$?empty@?$ImVector@UImGuiIniData@@@@QEBA_NXZ 00000001400c1e2c     fall.obj\n 7869   0004:00002e2c       $pdata$?empty@?$ImVector@PEAX@@QEBA_NXZ 00000001400c1e2c     fall.obj\n 7870   0004:00002e2c       $pdata$?empty@?$ImVector@UImDrawVert@@@@QEBA_NXZ 00000001400c1e2c     fall.obj\n 7871   0004:00002e2c       $pdata$?empty@?$ImVector@PEAUImFont@@@@QEBA_NXZ 00000001400c1e2c     fall.obj\n 7872:  0004:00002e2c       $pdata$?empty@?$ImVector@PEAUImGuiWindow@@@@QEBA_NXZ 00000001400c1e2c     fall.obj\n 7873:  0004:00002e2c       $pdata$?empty@?$ImVector@UTextRange@ImGuiTextFilter@@@@QEBA_NXZ 00000001400c1e2c     fall.obj\n 7874:  0004:00002e2c       $pdata$?empty@?$ImVector@UImGuiPopupRef@@@@QEBA_NXZ 00000001400c1e2c     fall.obj\n 7875   0004:00002e2c       $pdata$?empty@?$ImVector@M@@QEBA_NXZ 00000001400c1e2c     fall.obj\n 7876   0004:00002e2c       $pdata$?empty@?$ImVector@UImDrawCmd@@@@QEBA_NXZ 00000001400c1e2c     fall.obj\n 7877:  0004:00002e2c       $pdata$?empty@?$ImVector@UImGuiGroupData@@@@QEBA_NXZ 00000001400c1e2c     fall.obj\n 7878   0004:00002e2c       $pdata$?empty@?$ImVector@G@@QEBA_NXZ 00000001400c1e2c     fall.obj\n 7879   0004:00002e2c       $pdata$?empty@?$ImVector@_N@@QEBA_NXZ 00000001400c1e2c     fall.obj\n 7880   0004:00002e2c       $pdata$?empty@?$ImVector@UImFontConfig@@@@QEBA_NXZ 00000001400c1e2c     fall.obj\n 7881   0004:00002e2c       $pdata$?empty@?$ImVector@PEAUImDrawList@@@@QEBA_NXZ 00000001400c1e2c     fall.obj\n 7882:  0004:00002e38       $pdata$?empty@TextRange@ImGuiTextFilter@@QEBA_NXZ 00000001400c1e38     fall.obj\n 7883:  0004:00002e44       $pdata$?erase@?$ImVector@PEAUImGuiWindow@@@@QEAAPEAPEAUImGuiWindow@@PEBQEAU2@@Z 00000001400c1e44     fall.obj\n 7884   0004:00002e50       $pdata$?front@?$ImVector@D@@QEBAAEBDXZ 00000001400c1e50     fall.obj\n 7885:  0004:00002e5c       $pdata$?insert@?$ImVector@PEAUImGuiWindow@@@@QEAAPEAPEAUImGuiWindow@@PEBQEAU2@AEBQEAU2@@Z 00000001400c1e5c     fall.obj\n 7886:  0004:00002e68       $pdata$?insert@?$ImVector@UPair@ImGuiStorage@@@@QEAAPEAUPair@ImGuiStorage@@PEBU23@AEBU23@@Z 00000001400c1e68     fall.obj\n 7887:  0004:00002e74       $pdata$?is_blank@TextRange@ImGuiTextFilter@@SA_ND@Z 00000001400c1e74     fall.obj\n 7888   0004:00002e80       $pdata$?pop_back@?$ImVector@PEAUImFont@@@@QEAAXXZ 00000001400c1e80     fall.obj\n 7889:  0004:00002e80       $pdata$?pop_back@?$ImVector@UImGuiStyleMod@@@@QEAAXXZ 00000001400c1e80     fall.obj\n 7890:  0004:00002e80       $pdata$?pop_back@?$ImVector@UImGuiGroupData@@@@QEAAXXZ 00000001400c1e80     fall.obj\n 7891   0004:00002e80       $pdata$?pop_back@?$ImVector@I@@QEAAXXZ 00000001400c1e80     fall.obj\n 7892:  0004:00002e80       $pdata$?pop_back@?$ImVector@PEAUImGuiWindow@@@@QEAAXXZ 00000001400c1e80     fall.obj\n 7893:  0004:00002e80       $pdata$?pop_back@?$ImVector@UImGuiColMod@@@@QEAAXXZ 00000001400c1e80     fall.obj\n 7894   0004:00002e80       $pdata$?pop_back@?$ImVector@_N@@QEAAXXZ 00000001400c1e80     fall.obj\n 7895   0004:00002e80       $pdata$?pop_back@?$ImVector@UImDrawCmd@@@@QEAAXXZ 00000001400c1e80     fall.obj\n 7896   0004:00002e80       $pdata$?pop_back@?$ImVector@UImVec4@@@@QEAAXXZ 00000001400c1e80     fall.obj\n 7897   0004:00002e80       $pdata$?pop_back@?$ImVector@PEAX@@QEAAXXZ 00000001400c1e80     fall.obj\n 7898:  0004:00002e80       $pdata$?pop_back@?$ImVector@UImGuiPopupRef@@@@QEAAXXZ 00000001400c1e80     fall.obj\n 7899   0004:00002e80       $pdata$?pop_back@?$ImVector@M@@QEAAXXZ 00000001400c1e80     fall.obj\n 7900   0004:00002e8c       $pdata$?push_back@?$ImVector@D@@QEAAXAEBD@Z 00000001400c1e8c     fall.obj\n ....\n 7903   0004:00002ea4       $pdata$?push_back@?$ImVector@M@@QEAAXAEBM@Z 00000001400c1ea4     fall.obj\n 7904   0004:00002eb0       $pdata$?push_back@?$ImVector@PEAUImFont@@@@QEAAXAEBQEAUImFont@@@Z 00000001400c1eb0     fall.obj\n 7905:  0004:00002eb0       $pdata$?push_back@?$ImVector@PEAUImGuiWindow@@@@QEAAXAEBQEAUImGuiWindow@@@Z 00000001400c1eb0     fall.obj\n 7906   0004:00002eb0       $pdata$?push_back@?$ImVector@PEAX@@QEAAXAEBQEAX@Z 00000001400c1eb0     fall.obj\n 7907   0004:00002eb0       $pdata$?push_back@?$ImVector@PEAUImDrawList@@@@QEAAXAEBQEAUImDrawList@@@Z 00000001400c1eb0     fall.obj\n 7908   0004:00002ebc       $pdata$?push_back@?$ImVector@UImDrawCmd@@@@QEAAXAEBUImDrawCmd@@@Z 00000001400c1ebc     fall.obj\n 7909   0004:00002ec8       $pdata$?push_back@?$ImVector@UImFontConfig@@@@QEAAXAEBUImFontConfig@@@Z 00000001400c1ec8     fall.obj\n 7910:  0004:00002ed4       $pdata$?push_back@?$ImVector@UImGuiColMod@@@@QEAAXAEBUImGuiColMod@@@Z 00000001400c1ed4     fall.obj\n 7911:  0004:00002ee0       $pdata$?push_back@?$ImVector@UImGuiPopupRef@@@@QEAAXAEBUImGuiPopupRef@@@Z 00000001400c1ee0     fall.obj\n 7912:  0004:00002eec       $pdata$?push_back@?$ImVector@UImGuiStyleMod@@@@QEAAXAEBUImGuiStyleMod@@@Z 00000001400c1eec     fall.obj\n 7913   0004:00002ef8       $pdata$?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z 00000001400c1ef8     fall.obj\n 7914   0004:00002f04       $pdata$?push_back@?$ImVector@UImVec4@@@@QEAAXAEBUImVec4@@@Z 00000001400c1f04     fall.obj\n 7915:  0004:00002f04       $pdata$?push_back@?$ImVector@UTextRange@ImGuiTextFilter@@@@QEAAXAEBUTextRange@ImGuiTextFilter@@@Z 00000001400c1f04     fall.obj\n 7916   0004:00002f04       $pdata$?push_back@?$ImVector@Ustbrp_rect@@@@QEAAXAEBUstbrp_rect@@@Z 00000001400c1f04     fall.obj\n 7917   0004:00002f10       $pdata$?reserve@?$ImVector@_N@@QEAAXH@Z 00000001400c1f10     fall.obj\n ....\n 7919   0004:00002f1c       $pdata$?reserve@?$ImVector@G@@QEAAXH@Z 00000001400c1f1c     fall.obj\n 7920   0004:00002f28       $pdata$?reserve@?$ImVector@M@@QEAAXH@Z 00000001400c1f28     fall.obj\n 7921:  0004:00002f28       $pdata$?reserve@?$ImVector@UImGuiColumnData@@@@QEAAXH@Z 00000001400c1f28     fall.obj\n 7922   0004:00002f28       $pdata$?reserve@?$ImVector@I@@QEAAXH@Z 00000001400c1f28     fall.obj\n 7923:  0004:00002f34       $pdata$?reserve@?$ImVector@PEAUImGuiWindow@@@@QEAAXH@Z 00000001400c1f34     fall.obj\n 7924   0004:00002f34       $pdata$?reserve@?$ImVector@PEAUImFont@@@@QEAAXH@Z 00000001400c1f34     fall.obj\n 7925   0004:00002f34       $pdata$?reserve@?$ImVector@UImVec2@@@@QEAAXH@Z 00000001400c1f34     fall.obj\n ....\n 7930   0004:00002f58       $pdata$?reserve@?$ImVector@UImFontConfig@@@@QEAAXH@Z 00000001400c1f58     fall.obj\n 7931   0004:00002f64       $pdata$?reserve@?$ImVector@UImDrawVert@@@@QEAAXH@Z 00000001400c1f64     fall.obj\n 7932:  0004:00002f64       $pdata$?reserve@?$ImVector@UImGuiColMod@@@@QEAAXH@Z 00000001400c1f64     fall.obj\n 7933:  0004:00002f70       $pdata$?reserve@?$ImVector@UImGuiGroupData@@@@QEAAXH@Z 00000001400c1f70     fall.obj\n 7934:  0004:00002f7c       $pdata$?reserve@?$ImVector@UImGuiIniData@@@@QEAAXH@Z 00000001400c1f7c     fall.obj\n 7935:  0004:00002f88       $pdata$?reserve@?$ImVector@UImGuiPopupRef@@@@QEAAXH@Z 00000001400c1f88     fall.obj\n 7936   0004:00002f88       $pdata$?reserve@?$ImVector@UImDrawChannel@@@@QEAAXH@Z 00000001400c1f88     fall.obj\n 7937:  0004:00002f94       $pdata$?reserve@?$ImVector@UImGuiStyleMod@@@@QEAAXH@Z 00000001400c1f94     fall.obj\n 7938:  0004:00002fa0       $pdata$?reserve@?$ImVector@UTextRange@ImGuiTextFilter@@@@QEAAXH@Z 00000001400c1fa0     fall.obj\n 7939   0004:00002fa0       $pdata$?reserve@?$ImVector@UImVec4@@@@QEAAXH@Z 00000001400c1fa0     fall.obj\n 7940:  0004:00002fa0       $pdata$?reserve@?$ImVector@UPair@ImGuiStorage@@@@QEAAXH@Z 00000001400c1fa0     fall.obj\n 7941   0004:00002fa0       $pdata$?reserve@?$ImVector@Ustbrp_rect@@@@QEAAXH@Z 00000001400c1fa0     fall.obj\n 7942   0004:00002fac       $pdata$?resize@?$ImVector@_N@@QEAAXH@Z 00000001400c1fac     fall.obj\n 7943   0004:00002fac       $pdata$?resize@?$ImVector@D@@QEAAXH@Z 00000001400c1fac     fall.obj\n 7944   0004:00002fb8       $pdata$?resize@?$ImVector@G@@QEAAXH@Z 00000001400c1fb8     fall.obj\n 7945:  0004:00002fc4       $pdata$?resize@?$ImVector@UImGuiColumnData@@@@QEAAXH@Z 00000001400c1fc4     fall.obj\n 7946   0004:00002fc4       $pdata$?resize@?$ImVector@I@@QEAAXH@Z 00000001400c1fc4     fall.obj\n 7947   0004:00002fc4       $pdata$?resize@?$ImVector@M@@QEAAXH@Z 00000001400c1fc4     fall.obj\n ....\n 7949   0004:00002fdc       $pdata$?resize@?$ImVector@UImDrawCmd@@@@QEAAXH@Z 00000001400c1fdc     fall.obj\n 7950   0004:00002fe8       $pdata$?resize@?$ImVector@UImDrawVert@@@@QEAAXH@Z 00000001400c1fe8     fall.obj\n 7951:  0004:00002ff4       $pdata$?resize@?$ImVector@UImGuiGroupData@@@@QEAAXH@Z 00000001400c1ff4     fall.obj\n 7952:  0004:00003000       $pdata$?resize@?$ImVector@UImGuiIniData@@@@QEAAXH@Z 00000001400c2000     fall.obj\n 7953:  0004:0000300c       $pdata$?resize@?$ImVector@UImGuiPopupRef@@@@QEAAXH@Z 00000001400c200c     fall.obj\n 7954   0004:0000300c       $pdata$?resize@?$ImVector@UImDrawChannel@@@@QEAAXH@Z 00000001400c200c     fall.obj\n 7955:  0004:00003018       $pdata$?resize@?$ImVector@PEAUImGuiWindow@@@@QEAAXH@Z 00000001400c2018     fall.obj\n 7956   0004:00003018       $pdata$?resize@?$ImVector@UImVec2@@@@QEAAXH@Z 00000001400c2018     fall.obj\n 7957   0004:00003018       $pdata$?resize@?$ImVector@PEAX@@QEAAXH@Z 00000001400c2018     fall.obj\n 7958   0004:00003018       $pdata$?resize@?$ImVector@PEAUImDrawList@@@@QEAAXH@Z 00000001400c2018     fall.obj\n 7959   0004:00003024       $pdata$?resize@?$ImVector@UImVec4@@@@QEAAXH@Z 00000001400c2024     fall.obj\n 7960:  0004:00003024       $pdata$?resize@?$ImVector@UTextRange@ImGuiTextFilter@@@@QEAAXH@Z 00000001400c2024     fall.obj\n 7961   0004:00003030       $pdata$?strchr@@YAPEADQEADH@Z 00000001400c2030     fall.obj\n 7962   0004:0000303c       $pdata$?swap@?$ImVector@UImDrawVert@@@@QEAAXAEAV1@@Z 00000001400c203c     fall.obj\n 7963:  0004:0000303c       $pdata$?swap@?$ImVector@PEAUImGuiWindow@@@@QEAAXAEAV1@@Z 00000001400c203c     fall.obj\n 7964:  0004:00003048       $pdata$?trim_blanks@TextRange@ImGuiTextFilter@@QEAAXXZ 00000001400c2048     fall.obj\n 7965   0004:00003054       $pdata$_MallocaComputeSize 00000001400c2054     fall.obj\n 7966   0004:00003060       $pdata$_freea              00000001400c2060     fall.obj\n\nC:\\Users\\doug\\Documents\\github\\fall\\imgui\\imconfig.h:\n    1  //-----------------------------------------------------------------------------\n    2  // USER IMPLEMENTATION\n    3: // This file contains compile-time options for ImGui.\n    4: // Other options (memory allocation overrides, callbacks, etc.) can be set at runtime via the ImGuiIO structure - ImGui::GetIO().\n    5  //-----------------------------------------------------------------------------\n    6  \n    .\n   11  \n   12  //---- Define attributes of all API symbols declarations, e.g. for DLL under Windows.\n   13: //#define IMGUI_API __declspec( dllexport )\n   14: //#define IMGUI_API __declspec( dllimport )\n   15  \n   16: //---- Include imgui_user.h at the end of imgui.h\n   17: //#define IMGUI_INCLUDE_IMGUI_USER_H\n   18  \n   19  //---- Don't implement default handlers for Windows (so as not to link with OpenClipboard() and others Win32 functions)\n   20: //#define IMGUI_DISABLE_WIN32_DEFAULT_CLIPBOARD_FUNCS\n   21: //#define IMGUI_DISABLE_WIN32_DEFAULT_IME_FUNCS\n   22  \n   23  //---- Don't implement help and test window functionality (ShowUserGuide()/ShowStyleEditor()/ShowTestWindow() methods will be empty)\n   24: //#define IMGUI_DISABLE_TEST_WINDOWS\n   25  \n   26  //---- Don't define obsolete functions names\n   27: //#define IMGUI_DISABLE_OBSOLETE_FUNCTIONS\n   28  \n   29  //---- Pack colors to BGRA instead of RGBA (remove need to post process vertex buffer in back ends)\n   30: //#define IMGUI_USE_BGRA_PACKED_COLOR\n   31  \n   32  //---- Implement STB libraries in a namespace to avoid conflicts\n   33: //#define IMGUI_STB_NAMESPACE     ImGuiStb\n   34  \n   35  //---- Define constructor and implicit cast operators to convert back<>forth from your math types and ImVec2/ImVec4.\n   ..\n   47  //#define ImDrawIdx unsigned int\n   48  \n   49: //---- Tip: You can add extra functions within the ImGui:: namespace, here or in your own headers files.\n   50: //---- e.g. create variants of the ImGui::Value() helper for your low-level math types, or your own widgets/helpers.\n   51  /*\n   52: namespace ImGui\n   53  {\n   54      void    Value(const char* prefix, const MyMatrix44& v, const char* float_format = NULL);\n\nC:\\Users\\doug\\Documents\\github\\fall\\imgui\\imgui.cpp:\n    1: // dear imgui, v1.50 WIP\n    2  // (main code and documentation)\n    3  \n    4: // See ImGui::ShowTestWindow() in imgui_demo.cpp for demo code.\n    5: // Newcomers, read 'Programmer guide' below for notes on how to setup ImGui in your codebase.\n    6: // Get latest version at https://github.com/ocornut/imgui\n    7: // Releases change-log at https://github.com/ocornut/imgui/releases\n    8: // Gallery (please post your screenshots/video there!): https://github.com/ocornut/imgui/issues/772\n    9  // Developed by Omar Cornut and every direct or indirect contributors to the GitHub.\n   10  // This library is free but I need your support to sustain development and maintenance.\n   11: // If you work for a company, please consider financial support, e.g: https://www.patreon.com/imgui\n   12  \n   13  /*\n   ..\n   20   - FREQUENTLY ASKED QUESTIONS (FAQ), TIPS\n   21     - How can I help?\n   22:    - How do I update to a newer version of ImGui?\n   23     - What is ImTextureID and how do I display an image?\n   24:    - I integrated ImGui in my engine and the text or lines are blurry..\n   25:    - I integrated ImGui in my engine and some elements are clipping or disappearing when I move windows around..\n   26     - How can I have multiple widgets with the same label? Can I have widget without a label? (Yes). A primer on the purpose of labels/IDs.\n   27:    - How can I tell when ImGui wants my mouse/keyboard inputs and when I can pass them to my application?\n   28     - How can I load a different font than the default?\n   29     - How can I easily use icons in my application?\n   30     - How can I load multiple fonts?\n   31     - How can I display and input non-latin characters such as Chinese, Japanese, Korean, Cyrillic?\n   32:    - How can I use the drawing facilities without an ImGui window? (using ImDrawList API)\n   33   - ISSUES & TODO-LIST\n   34   - CODE\n   ..\n   51   - doesn't look fancy, doesn't animate\n   52   - limited layout features, intricate layouts are typically crafted in code\n   53:  - occasionally uses statically sized buffers for string manipulations - won't crash, but some very long pieces of text may be clipped. functions like ImGui::TextUnformatted() don't have such restriction.\n   54  \n   55  \n   ..\n   58  \n   59   - double-click title bar to collapse window\n   60:  - click upper right corner to close a window, available when 'bool* p_open' is passed to ImGui::Begin()\n   61   - click and drag on lower right corner to resize window\n   62   - click and drag on any empty space to move window\n   ..\n   82   - read the FAQ below this section!\n   83   - your code creates the UI, if your code doesn't run the UI is gone! == very dynamic UI, no construction/destructions steps, less data retention on your side, no state duplication, less sync, less bugs.\n   84:  - call and read ImGui::ShowTestWindow() for demo code demonstrating most features.\n   85   - see examples/ folder for standalone sample applications. Prefer reading examples/opengl2_example/ first as it is the simplest.\n   86:    you may be able to grab and copy a ready made imgui_impl_*** file from the examples/.\n   87   - customization: PushStyleColor()/PushStyleVar() or the style editor to tweak the look of the interface (e.g. if you want a more compact UI or a different color scheme).\n   88  \n   89   - getting started:\n   90:    - init: call ImGui::GetIO() to retrieve the ImGuiIO structure and fill the fields marked 'Settings'.\n   91     - init: call io.Fonts->GetTexDataAsRGBA32(...) and load the font texture pixels into graphics memory.\n   92     - every frame:\n   93:       1/ in your mainloop or right after you got your keyboard/mouse info, call ImGui::GetIO() and fill the fields marked 'Input'\n   94:       2/ call ImGui::NewFrame() as early as you can!\n   95:       3/ use any ImGui function you want between NewFrame() and Render()\n   96:       4/ call ImGui::Render() as late as you can to end the frame and finalize render data. it will call your RenderDrawListFn handler that you set in the IO structure.\n   97           (if you don't need to render, you still need to call Render() and ignore the callback, or call EndFrame() instead. if you call neither some aspects of windows focusing/moving will appear broken.)\n   98:    - all rendering information are stored into command-lists until ImGui::Render() is called.\n   99:    - ImGui never touches or know about your GPU state. the only function that knows about GPU is the RenderDrawListFn handler that you provide.\n  100     - effectively it means you can create widgets at any time in your code, regardless of considerations of being in \"update\" vs \"render\" phases of your own application.\n  101     - refer to the examples applications in the examples/ folder for instruction on how to setup your code.\n  ...\n  103  \n  104          // Application init\n  105:         ImGuiIO& io = ImGui::GetIO();\n  106          io.DisplaySize.x = 1920.0f;\n  107          io.DisplaySize.y = 1280.0f;\n  108:         io.IniFilename = \"imgui.ini\";\n  109          io.RenderDrawListsFn = my_render_function;  // Setup a render function, or set to NULL and call GetDrawData() after Render() to access the render data.\n  110          // TODO: Fill others settings of the io structure\n  ...\n  123              // 1) get low-level inputs (e.g. on Win32, GetKeyboardState(), or poll your events, etc.)\n  124              // TODO: fill all fields of IO structure and call NewFrame\n  125:             ImGuiIO& io = ImGui::GetIO();\n  126              io.DeltaTime = 1.0f/60.0f;\n  127              io.MousePos = mouse_pos;\n  ...\n  130              io.KeysDown[i] = ...\n  131  \n  132:             // 2) call NewFrame(), after this point you can use ImGui::* functions anytime\n  133:             ImGui::NewFrame();\n  134  \n  135              // 3) most of your application code here\n  136:             MyGameUpdate(); // may use any ImGui functions, e.g. ImGui::Begin(\"My window\"); ImGui::Text(\"Hello, world!\"); ImGui::End();\n  137:             MyGameRender(); // may use any ImGui functions\n  138  \n  139              // 4) render & swap video buffers\n  140:             ImGui::Render();\n  141              SwapBuffers();\n  142          }\n  143  \n  144:    - You can read back 'io.WantCaptureMouse', 'io.WantCaptureKeybord' etc. flags from the IO structure to tell how ImGui intends to use your\n  145       inputs and to know if you should share them or hide them from the rest of your application. Read the FAQ below for more information.\n  146  \n  ...\n  151   Occasionally introducing changes that are breaking the API. The breakage are generally minor and easy to fix.\n  152   Here is a change-log of API breaking changes, if you are using one of the functions listed, expect to have to fix some code.\n  153:  Also read releases logs https://github.com/ocornut/imgui/releases for more details.\n  154  \n  155   - 2017/05/01 (1.50) - Renamed ImDrawList::PathFill() to ImDrawList::PathFillConvex() for clarity.\n  156   - 2016/11/06 (1.50) - BeginChild(const char*) now applies the stack id to the provided label, consistently with other functions as it should always have been. It shouldn't affect you unless (extremely unlikely) you were appending multiple times to a same child from different locations of the stack id. If that's the case, generate an id with GetId() and use it instead of passing string to BeginChild().\n  157   - 2016/10/15 (1.50) - avoid 'void* user_data' parameter to io.SetClipboardTextFn/io.GetClipboardTextFn pointers. We pass io.ClipboardUserData to it.\n  158:  - 2016/09/25 (1.50) - style.WindowTitleAlign is now a ImVec2 (ImGuiAlign enum was removed). set to (0.5f,0.5f) for horizontal+vertical centering, (0.0f,0.0f) for upper-left, etc.\n  159   - 2016/07/30 (1.50) - SameLine(x) with x>0.0f is now relative to left of column/group if any, and not always to left of window. This was sort of always the intent and hopefully breakage should be minimal.\n  160:  - 2016/05/12 (1.49) - title bar (using ImGuiCol_TitleBg/ImGuiCol_TitleBgActive colors) isn't rendered over a window background (ImGuiCol_WindowBg color) anymore. \n  161                         If your TitleBg/TitleBgActive alpha was 1.0f or you are using the default theme it will not affect you. \n  162                         However if your TitleBg/TitleBgActive alpha was <1.0f you need to tweak your custom theme to readjust for the fact that we don't draw a WindowBg background behind the title bar.\n  ...\n  170   - 2016/05/07 (1.49) - removed confusing set of GetInternalState(), GetInternalStateSize(), SetInternalState() functions. Now using CreateContext(), DestroyContext(), GetCurrentContext(), SetCurrentContext().\n  171   - 2016/05/02 (1.49) - renamed SetNextTreeNodeOpened() to SetNextTreeNodeOpen(), no redirection.\n  172:  - 2016/05/01 (1.49) - obsoleted old signature of CollapsingHeader(const char* label, const char* str_id = NULL, bool display_frame = true, bool default_open = false) as extra parameters were badly designed and rarely used. You can replace the \"default_open = true\" flag in new API with CollapsingHeader(label, ImGuiTreeNodeFlags_DefaultOpen).\n  173:  - 2016/04/26 (1.49) - changed ImDrawList::PushClipRect(ImVec4 rect) to ImDraw::PushClipRect(Imvec2 min,ImVec2 max,bool intersect_with_current_clip_rect=false). Note that higher-level ImGui::PushClipRect() is preferable because it will clip at logic/widget level, whereas ImDrawList::PushClipRect() only affect your renderer.\n  174:  - 2016/04/03 (1.48) - removed style.WindowFillAlphaDefault setting which was redundant. Bake default BG alpha inside style.Colors[ImGuiCol_WindowBg] and all other Bg color values. (ref github issue #337).\n  175:  - 2016/04/03 (1.48) - renamed ImGuiCol_TooltipBg to ImGuiCol_PopupBg, used by popups/menus and tooltips. popups/menus were previously using ImGuiCol_WindowBg. (ref github issue #337)\n  176   - 2016/03/21 (1.48) - renamed GetWindowFont() to GetFont(), GetWindowFontSize() to GetFontSize(). Kept inline redirection function (will obsolete).\n  177   - 2016/03/02 (1.48) - InputText() completion/history/always callbacks: if you modify the text buffer manually (without using DeleteChars()/InsertChars() helper) you need to maintain the BufTextLen field. added an assert.\n  ...\n  183                         GetContentRegionMax()/GetWindowContentRegionMin()/GetWindowContentRegionMax() functions allow include the scrolled amount. Typically those were used in cases where no scrolling would happen so it may not be a problem, but watch out!\n  184   - 2015/08/29 (1.45) - renamed style.ScrollbarWidth to style.ScrollbarSize\n  185:  - 2015/08/05 (1.44) - split imgui.cpp into extra files: imgui_demo.cpp imgui_draw.cpp imgui_internal.h that you need to add to your project.\n  186   - 2015/07/18 (1.44) - fixed angles in ImDrawList::PathArcTo(), PathArcToFast() (introduced in 1.43) being off by an extra PI for no justifiable reason\n  187   - 2015/07/14 (1.43) - add new ImFontAtlas::AddFont() API. For the old AddFont***, moved the 'font_no' parameter of ImFontAtlas::AddFont** functions to the ImFontConfig structure.\n  ...\n  189   - 2015/07/08 (1.43) - switched rendering data to use indexed rendering. this is saving a fair amount of CPU/GPU and enables us to get anti-aliasing for a marginal cost.\n  190                         this necessary change will break your rendering function! the fix should be very easy. sorry for that :(\n  191:                      - if you are using a vanilla copy of one of the imgui_impl_XXXX.cpp provided in the example, you just need to update your copy and you can ignore the rest.\n  192                       - the signature of the io.RenderDrawListsFn handler has changed!\n  193:                             ImGui_XXXX_RenderDrawLists(ImDrawList** const cmd_lists, int cmd_lists_count)\n  194                         became:\n  195:                             ImGui_XXXX_RenderDrawLists(ImDrawData* draw_data).\n  196                                argument   'cmd_lists'        -> 'draw_data->CmdLists'\n  197                                argument   'cmd_lists_count'  -> 'draw_data->CmdListsCount'\n  ...\n  214   - 2015/05/31 (1.40) - renamed IsRectClipped() to IsRectVisible() for consistency. Note that return value is opposite! Kept inline redirection function (will obsolete).\n  215   - 2015/05/27 (1.40) - removed the third 'repeat_if_held' parameter from Button() - sorry! it was rarely used and inconsistent. Use PushButtonRepeat(true) / PopButtonRepeat() to enable repeat on desired buttons.\n  216:  - 2015/05/11 (1.40) - changed BeginPopup() API, takes a string identifier instead of a bool. ImGui needs to manage the open/closed state of popups. Call OpenPopup() to actually set the \"open\" state of a popup. BeginPopup() returns true if the popup is opened.\n  217   - 2015/05/03 (1.40) - removed style.AutoFitPadding, using style.WindowPadding makes more sense (the default values were already the same).\n  218   - 2015/04/13 (1.38) - renamed IsClipped() to IsRectClipped(). Kept inline redirection function until 1.50.\n  219   - 2015/04/09 (1.38) - renamed ImDrawList::AddArc() to ImDrawList::AddArcFast() for compatibility with future API\n  220:  - 2015/04/03 (1.38) - removed ImGuiCol_CheckHovered, ImGuiCol_CheckActive, replaced with the more general ImGuiCol_FrameBgHovered, ImGuiCol_FrameBgActive.\n  221   - 2014/04/03 (1.38) - removed support for passing -FLT_MAX..+FLT_MAX as the range for a SliderFloat(). Use DragFloat() or Inputfloat() instead.\n  222   - 2015/03/17 (1.36) - renamed GetItemBoxMin()/GetItemBoxMax()/IsMouseHoveringBox() to GetItemRectMin()/GetItemRectMax()/IsMouseHoveringRect(). Kept inline redirection function until 1.50.\n  223:  - 2015/03/15 (1.36) - renamed style.TreeNodeSpacing to style.IndentSpacing, ImGuiStyleVar_TreeNodeSpacing to ImGuiStyleVar_IndentSpacing\n  224   - 2015/03/13 (1.36) - renamed GetWindowIsFocused() to IsWindowFocused(). Kept inline redirection function until 1.50.\n  225   - 2015/03/08 (1.35) - renamed style.ScrollBarWidth to style.ScrollbarWidth (casing)\n  226:  - 2015/02/27 (1.34) - renamed OpenNextNode(bool) to SetNextTreeNodeOpened(bool, ImGuiSetCond). Kept inline redirection function until 1.50.\n  227:  - 2015/02/27 (1.34) - renamed ImGuiSetCondition_*** to ImGuiSetCond_***, and _FirstUseThisSession becomes _Once.\n  228:  - 2015/02/11 (1.32) - changed text input callback ImGuiTextEditCallback return type from void-->int. reserved for future use, return 0 for now.\n  229   - 2015/02/10 (1.32) - renamed GetItemWidth() to CalcItemWidth() to clarify its evolving behavior\n  230   - 2015/02/08 (1.31) - renamed GetTextLineSpacing() to GetTextLineHeightWithSpacing()\n  231   - 2015/02/01 (1.31) - removed IO.MemReallocFn (unused)\n  232:  - 2015/01/19 (1.30) - renamed ImGuiStorage::GetIntPtr()/GetFloatPtr() to GetIntRef()/GetIntRef() because Ptr was conflicting with actual pointer storage functions.\n  233   - 2015/01/11 (1.30) - big font/image API change! now loads TTF file. allow for multiple fonts. no need for a PNG loader.\n  234                (1.30) - removed GetDefaultFontData(). uses io.Fonts->GetTextureData*() API to retrieve uncompressed pixels.\n  ...\n  236                             const void* png_data;\n  237                             unsigned int png_size;\n  238:                            ImGui::GetDefaultFontData(NULL, NULL, &png_data, &png_size);\n  239                             // <Copy to GPU>\n  240                         became:\n  ...\n  248                (1.30) - added texture identifier in ImDrawCmd passed to your render function (we can now render images). make sure to set io.Fonts->TexID.\n  249                (1.30) - removed IO.PixelCenterOffset (unnecessary, can be handled in user projection matrix)\n  250:               (1.30) - removed ImGui::IsItemFocused() in favor of ImGui::IsItemActive() which handles all widgets\n  251:  - 2014/12/10 (1.18) - removed SetNewWindowDefaultPos() in favor of new generic API SetNextWindowPos(pos, ImGuiSetCondition_FirstUseEver)\n  252   - 2014/11/28 (1.17) - moved IO.Font*** options to inside the IO.Font-> structure (FontYOffset, FontTexUvForWhite, FontBaseScale, FontFallbackGlyph)\n  253:  - 2014/11/26 (1.17) - reworked syntax of IMGUI_ONCE_UPON_A_FRAME helper macro to increase compiler compatibility\n  254   - 2014/11/07 (1.15) - renamed IsHovered() to IsItemHovered()\n  255:  - 2014/10/02 (1.14) - renamed IMGUI_INCLUDE_IMGUI_USER_CPP to IMGUI_INCLUDE_IMGUI_USER_INL and imgui_user.cpp to imgui_user.inl (more IDE friendly)\n  256   - 2014/09/25 (1.13) - removed 'text_end' parameter from IO.SetClipboardTextFn (the string is now always zero-terminated for simplicity)\n  257   - 2014/09/24 (1.12) - renamed SetFontScale() to SetWindowFontScale()\n  258   - 2014/09/24 (1.12) - moved IM_MALLOC/IM_REALLOC/IM_FREE preprocessor defines to IO.MemAllocFn/IO.MemReallocFn/IO.MemFreeFn\n  259   - 2014/08/30 (1.09) - removed IO.FontHeight (now computed automatically)\n  260:  - 2014/08/30 (1.09) - moved IMGUI_FONT_TEX_UV_FOR_WHITE preprocessor define to IO.FontTexUvForWhite\n  261   - 2014/08/28 (1.09) - changed the behavior of IO.PixelCenterOffset following various rendering fixes\n  262  \n  ...\n  266  \n  267   Q: How can I help?\n  268:  A: - If you are experienced enough with ImGui and with C/C++, look at the todo list and see how you want/can help!\n  269      - Become a Patron/donate. Convince your company to become a Patron or provide serious funding for development time.\n  270  \n  271:  Q: How do I update to a newer version of ImGui?\n  272   A: Overwrite the following files:\n  273:       imgui.cpp\n  274:       imgui.h\n  275:       imgui_demo.cpp\n  276:       imgui_draw.cpp\n  277:       imgui_internal.h\n  278        stb_rect_pack.h\n  279        stb_textedit.h\n  ...\n  285   Q: What is ImTextureID and how do I display an image?\n  286   A: ImTextureID is a void* used to pass renderer-agnostic texture references around until it hits your render function.\n  287:     ImGui knows nothing about what those bits represent, it just passes them around. It is up to you to decide what you want the void* to carry!\n  288      It could be an identifier to your OpenGL texture (cast GLuint to void*), a pointer to your custom engine material (cast MyMaterial* to void*), etc.\n  289      At the end of the chain, your renderer takes this void* to cast it back into whatever it needs to select a current texture to render.\n  290:     Refer to examples applications, where each renderer (in a imgui_impl_xxxx.cpp file) is treating ImTextureID as a different thing.\n  291      (c++ tip: OpenGL uses integers to identify textures. You can safely store an integer into a void*, just cast it to void*, don't take it's address!)\n  292:     To display a custom image/texture within an ImGui window, you may use ImGui::Image(), ImGui::ImageButton(), ImDrawList::AddImage() functions.\n  293:     ImGui will generate the geometry and draw calls using the ImTextureID that you passed and which your renderer can use.\n  294      It is your responsibility to get textures uploaded to your GPU.\n  295  \n  296:  Q: I integrated ImGui in my engine and the text or lines are blurry..\n  297   A: In your Render function, try translating your projection matrix by (0.5f,0.5f) or (0.375f,0.375f).\n  298      Also make sure your orthographic projection matrix and io.DisplaySize matches your actual framebuffer dimension.\n  299  \n  300:  Q: I integrated ImGui in my engine and some elements are clipping or disappearing when I move windows around..\n  301:  A: Most likely you are mishandling the clipping rectangles in your render function. Rectangles provided by ImGui are defined as (x1=left,y1=top,x2=right,y2=bottom) and NOT as (x1,y1,width,height).\n  302  \n  303   Q: Can I have multiple widgets with the same label? Can I have widget without a label? (Yes)\n  304:  A: Yes. A primer on the use of labels/IDs in ImGui..\n  305  \n  306     - Elements that are not clickable, such as Text() items don't need an ID.\n  307  \n  308:    - Interactive widgets require state to be carried over multiple frames (most typically ImGui often needs to remember what is the \"active\" widget).\n  309       to do so they need a unique ID. unique ID are typically derived from a string label, an integer index or a pointer.\n  310  \n  ...\n  394        e.g. when displaying a list of objects, using indices or pointers as ID will preserve the node open/closed state differently. experiment and see what makes more sense!\n  395  \n  396:  Q: How can I tell when ImGui wants my mouse/keyboard inputs and when I can pass them to my application?\n  397:  A: You can read the 'io.WantCaptureXXX' flags in the ImGuiIO structure. Preferably read them after calling ImGui::NewFrame() to avoid those flags lagging by one frame, but either should be fine.\n  398      When 'io.WantCaptureMouse' or 'io.WantCaptureKeyboard' flags are set you may want to discard/hide the inputs from the rest of your application.\n  399      When 'io.WantInputsCharacters' is set to may want to notify your OS to popup an on-screen keyboard, if available.\n  400:     ImGui is tracking dragging and widget activity that may occur outside the boundary of a window, so 'io.WantCaptureMouse' is a more accurate and complete than testing for ImGui::IsMouseHoveringAnyWindow().\n  401      (Advanced note: text input releases focus on Return 'KeyDown', so the following Return 'KeyUp' event that your application receive will typically have 'io.WantcaptureKeyboard=false'. \n  402:      Depending on your application logic it may or not be inconvenient. You might want to track which key-downs were for ImGui (e.g. with an array of bool) and filter out the corresponding key-ups.)\n  403  \n  404   Q: How can I load a different font than the default? (default is an embedded version of ProggyClean.ttf, rendered at size 13)\n  405   A: Use the font atlas to load the TTF file you want:\n  406  \n  407:       ImGuiIO& io = ImGui::GetIO();\n  408        io.Fonts->AddFontFromFileTTF(\"myfontfile.ttf\", size_in_pixels);\n  409        io.Fonts->GetTexDataAsRGBA32() or GetTexDataAsAlpha8()\n  ...\n  417      (Read extra_fonts/README.txt and the code in ImFontAtlas for more details.)\n  418  \n  419:       ImGuiIO& io = ImGui::GetIO();\n  420        ImFont* font0 = io.Fonts->AddFontDefault();\n  421        ImFont* font1 = io.Fonts->AddFontFromFileTTF(\"myfontfile.ttf\", size_in_pixels);\n  ...\n  423        io.Fonts->GetTexDataAsRGBA32() or GetTexDataAsAlpha8()\n  424        // the first loaded font gets used by default\n  425:       // use ImGui::PushFont()/ImGui::PopFont() to change the font at runtime\n  426  \n  427        // Options\n  ...\n  448        io.Fonts->AddFontFromFileTTF(\"myfontfile.ttf\", size_in_pixels, NULL, io.Fonts->GetGlyphRangesJapanese());  // Load Japanese characters\n  449        io.Fonts->GetTexDataAsRGBA32() or GetTexDataAsAlpha8()\n  450:       io.ImeWindowHandle = MY_HWND;      // To input using Microsoft IME, give ImGui the hwnd of your application\n  451  \n  452      As for text input, depends on you passing the right character code to io.AddInputCharacter(). The example applications do that.\n  453  \n  454:  Q: How can I use the drawing facilities without an ImGui window? (using ImDrawList API)\n  455   A: The easiest way is to create a dummy window. Call Begin() with NoTitleBar|NoResize|NoMove|NoScrollbar|NoSavedSettings|NoInputs flag, zero background alpha, \n  456      then retrieve the ImDrawList* via GetWindowDrawList() and draw to it in any way you like.\n  457  \n  458:  - tip: the construct 'IMGUI_ONCE_UPON_A_FRAME { ... }' will run the block of code only once a frame. You can use it to quickly add custom UI in the middle of a deep nested inner loop in your code.\n  459   - tip: you can create widgets without a Begin()/End() block, they will go in an implicit window called \"Debug\"\n  460   - tip: you can call Begin() multiple times with the same name during the same frame, it will keep appending to the same window. this is also useful to set yourself in the context of another window (to get/set other settings)\n  461   - tip: you can call Render() multiple times (e.g for VR renders).\n  462:  - tip: call and read the ShowTestWindow() code in imgui_demo.cpp for more example of how to use ImGui!\n  463  \n  464  \n  465   ISSUES & TODO-LIST\n  466   ==================\n  467:  Issue numbers (#) refer to github issues listed at https://github.com/ocornut/imgui/issues\n  468   The list below consist mostly of ideas noted down before they are requested/discussed by users (at which point it usually moves to the github)\n  469  \n  ...\n  498   - input text: flag to disable live update of the user buffer (also applies to float/int text input) \n  499   - input text: resize behavior - field could stretch when being edited? hover tooltip shows more text?\n  500:  - input text: add ImGuiInputTextFlags_EnterToApply? (off #218)\n  501:  - input text: add discard flag (e.g. ImGuiInputTextFlags_DiscardActiveBuffer) or make it easier to clear active focus for text replacement during edition (#725)\n  502   - input text multi-line: don't directly call AddText() which does an unnecessary vertex reserve for character count prior to clipping. and/or more line-based clipping to AddText(). and/or reorganize TextUnformatted/RenderText for more efficiency for large text (e.g TextUnformatted could clip and log separately, etc).\n  503   - input text multi-line: way to dynamically grow the buffer without forcing the user to initially allocate for worse case (follow up on #200)\n  ...\n  579   - font: small opt: for monospace font (like the defalt one) we can trim IndexXAdvance as long as trailing value is == FallbackXAdvance\n  580   - font: add support for kerning, probably optional. perhaps default to (32..128)^2 matrix ~ 36KB then hash fallback.\n  581:  - font: add a simpler CalcTextSizeA() api? current one ok but not welcome if user needs to call it directly (without going through ImGui::CalcTextSize)\n  582   - font: fix AddRemapChar() to work before font has been built.\n  583   - log: LogButtons() options for specifying depth and/or hiding depth slider\n  ...\n  595   - input: allow to decide and pass explicit double-clicks (e.g. for windows by the CS_DBLCLKS style).\n  596   - input: support track pad style scrolling & slider edit.\n  597:  - misc: provide a way to compile out the entire implementation while providing a dummy API (e.g. #define IMGUI_DUMMY_IMPL)\n  598   - misc: double-clicking on title bar to minimize isn't consistent, perhaps move to single-click on left-most collapse icon?\n  599   - misc: provide HoveredTime and ActivatedTime to ease the creation of animations.\n  600   - style editor: have a more global HSV setter (e.g. alter hue on all elements). consider replacing active/hovered by offset in HSV space? (#438)\n  601   - style editor: color child window height expressed in multiple of line height.\n  602:  - remote: make a system like RemoteImGui first-class citizen/project (#75)\n  603   - drawlist: move Font, FontSize, FontTexUvWhitePixel inside ImDrawList and make it self-contained (apart from drawing settings?)\n  604   - drawlist: end-user probably can't call Clear() directly because we expect a texture to be pushed in the stack.\n  ...\n  616  #endif\n  617  \n  618: #include \"imgui.h\"\n  619: #define IMGUI_DEFINE_MATH_OPERATORS\n  620: #define IMGUI_DEFINE_PLACEMENT_NEW\n  621: #include \"imgui_internal.h\"\n  622  \n  623  #include <ctype.h>      // toupper, isprint\n  ...\n  642  #pragma clang diagnostic ignored \"-Wfloat-equal\"            // warning : comparing floating point with == or != is unsafe   // storing and comparing against same constants (typically 0.0f) is ok.\n  643  #pragma clang diagnostic ignored \"-Wformat-nonliteral\"      // warning : format string is not a string literal              // passing non-literal to vsnformat(). yes, user passing incorrect format strings can crash the code.\n  644: #pragma clang diagnostic ignored \"-Wexit-time-destructors\"  // warning : declaration requires an exit-time destructor       // exit-time destruction order is undefined. if MemFree() leads to users code that has been disabled before exit it might cause problems. ImGui coding style welcomes static/globals.\n  645  #pragma clang diagnostic ignored \"-Wglobal-constructors\"    // warning : declaration requires a global destructor           // similar to above, not sure what the exact difference it.\n  646  #pragma clang diagnostic ignored \"-Wsign-conversion\"        // warning : implicit conversion changes signedness             //\n  ...\n  650  #pragma GCC diagnostic ignored \"-Wunused-function\"          // warning: 'xxxx' defined but not used\n  651  #pragma GCC diagnostic ignored \"-Wint-to-pointer-cast\"      // warning: cast to pointer from integer of different size\n  652: #pragma GCC diagnostic ignored \"-Wformat\"                   // warning: format '%p' expects argument of type 'void*', but argument 6 has type 'ImGuiWindow*'\n  653  #pragma GCC diagnostic ignored \"-Wdouble-promotion\"         // warning: implicit conversion from 'float' to 'double' when passing argument to function\n  654  #pragma GCC diagnostic ignored \"-Wconversion\"               // warning: conversion to 'xxxx' from 'xxxx' may alter its value\n  ...\n  665  static float            GetDraggedColumnOffset(int column_index);\n  666  \n  667: static bool             IsKeyPressedMap(ImGuiKey key, bool repeat = true);\n  668  \n  669  static ImFont*          GetDefaultFont();\n  670  static void             SetCurrentFont(ImFont* font);\n  671: static void             SetCurrentWindow(ImGuiWindow* window);\n  672: static void             SetWindowScrollY(ImGuiWindow* window, float new_scroll_y);\n  673: static void             SetWindowPos(ImGuiWindow* window, const ImVec2& pos, ImGuiSetCond cond);\n  674: static void             SetWindowSize(ImGuiWindow* window, const ImVec2& size, ImGuiSetCond cond);\n  675: static void             SetWindowCollapsed(ImGuiWindow* window, bool collapsed, ImGuiSetCond cond);\n  676: static ImGuiWindow*     FindHoveredWindow(ImVec2 pos, bool excluding_childs);\n  677: static ImGuiWindow*     CreateNewWindow(const char* name, ImVec2 size, ImGuiWindowFlags flags);\n  678: static inline bool      IsWindowContentHoverable(ImGuiWindow* window);\n  679  static void             ClearSetNextWindowData();\n  680: static void             CheckStacksSize(ImGuiWindow* window, bool write);\n  681: static void             Scrollbar(ImGuiWindow* window, bool horizontal);\n  682  \n  683  static void             AddDrawListToRenderList(ImVector<ImDrawList*>& out_render_list, ImDrawList* draw_list);\n  684: static void             AddWindowToRenderList(ImVector<ImDrawList*>& out_render_list, ImGuiWindow* window);\n  685: static void             AddWindowToSortedBuffer(ImVector<ImGuiWindow*>& out_sorted_windows, ImGuiWindow* window);\n  686  \n  687: static ImGuiIniData*    FindWindowSettings(const char* name);\n  688: static ImGuiIniData*    AddWindowSettings(const char* name);\n  689  static void             LoadIniSettingsFromDisk(const char* ini_filename);\n  690  static void             SaveIniSettingsToDisk(const char* ini_filename);\n  ...\n  694  static ImRect           GetVisibleRect();\n  695  \n  696: static bool             BeginPopupEx(const char* str_id, ImGuiWindowFlags extra_flags);\n  697  static void             CloseInactivePopups();\n  698  static void             ClosePopupToLevel(int remaining);\n  699: static void             ClosePopup(ImGuiID id);\n  700: static bool             IsPopupOpen(ImGuiID id);\n  701: static ImGuiWindow*     GetFrontMostModalRootWindow();\n  702  static ImVec2           FindBestPopupWindowPos(const ImVec2& base_pos, const ImVec2& size, int* last_dir, const ImRect& rect_to_avoid);\n  703  \n  704: static bool             InputTextFilterCharacter(unsigned int* p_char, ImGuiInputTextFlags flags, ImGuiTextEditCallback callback, void* user_data);\n  705  static int              InputTextCalcTextLenAndLineCount(const char* text_begin, const char** out_text_end);\n  706  static ImVec2           InputTextCalcTextSizeW(const ImWchar* text_begin, const ImWchar* text_end, const ImWchar** remaining = NULL, ImVec2* out_offset = NULL, bool stop_on_new_line = false);\n  707  \n  708: static inline void      DataTypeFormatString(ImGuiDataType data_type, void* data_ptr, const char* display_format, char* buf, int buf_size);\n  709: static inline void      DataTypeFormatString(ImGuiDataType data_type, void* data_ptr, int decimal_precision, char* buf, int buf_size);\n  710: static void             DataTypeApplyOp(ImGuiDataType data_type, int op, void* value1, const void* value2);\n  711: static bool             DataTypeApplyOpFromText(const char* buf, const char* initial_value_buf, ImGuiDataType data_type, void* data_ptr, const char* scalar_format);\n  712  \n  713  //-----------------------------------------------------------------------------\n  ...\n  728  \n  729  // Default context storage + current context pointer.\n  730: // Implicitely used by all ImGui functions. Always assumed to be != NULL. Change to a different context by calling ImGui::SetCurrentContext()\n  731: // ImGui is currently not thread-safe because of this variable. If you want thread-safety to allow N threads to access N different contexts, you might work around it by:\n  732: // - Having multiple instances of the ImGui code compiled inside different namespace (easiest/safest, if you have a finite number of contexts)\n  733: // - or: Changing this variable to be TLS. You may #define GImGui in imconfig.h for further custom hackery. Future development aim to make this context pointer explicit to all calls. Also read https://github.com/ocornut/imgui/issues/586\n  734: #ifndef GImGui\n  735: static ImGuiContext     GImDefaultContext;\n  736: ImGuiContext*           GImGui = &GImDefaultContext;\n  737  #endif\n  738  \n  ...\n  741  //-----------------------------------------------------------------------------\n  742  \n  743: ImGuiStyle::ImGuiStyle()\n  744  {\n  745:     Alpha                   = 1.0f;             // Global alpha applies to everything in ImGui\n  746      WindowPadding           = ImVec2(8,8);      // Padding within a window\n  747      WindowMinSize           = ImVec2(32,32);    // Minimum window size\n  ...\n  767      CurveTessellationTol    = 1.25f;            // Tessellation tolerance. Decrease for highly tessellated curves (higher quality, more polygons), increase to reduce quality.\n  768  \n  769:     Colors[ImGuiCol_Text]                   = ImVec4(0.90f, 0.90f, 0.90f, 1.00f);\n  770:     Colors[ImGuiCol_TextDisabled]           = ImVec4(0.60f, 0.60f, 0.60f, 1.00f);\n  771:     Colors[ImGuiCol_WindowBg]               = ImVec4(0.00f, 0.00f, 0.00f, 0.70f);\n  772:     Colors[ImGuiCol_ChildWindowBg]          = ImVec4(0.00f, 0.00f, 0.00f, 0.00f);\n  773:     Colors[ImGuiCol_PopupBg]                = ImVec4(0.05f, 0.05f, 0.10f, 0.90f);\n  774:     Colors[ImGuiCol_Border]                 = ImVec4(0.70f, 0.70f, 0.70f, 0.65f);\n  775:     Colors[ImGuiCol_BorderShadow]           = ImVec4(0.00f, 0.00f, 0.00f, 0.00f);\n  776:     Colors[ImGuiCol_FrameBg]                = ImVec4(0.80f, 0.80f, 0.80f, 0.30f);   // Background of checkbox, radio button, plot, slider, text input\n  777:     Colors[ImGuiCol_FrameBgHovered]         = ImVec4(0.90f, 0.80f, 0.80f, 0.40f);\n  778:     Colors[ImGuiCol_FrameBgActive]          = ImVec4(0.90f, 0.65f, 0.65f, 0.45f);\n  779:     Colors[ImGuiCol_TitleBg]                = ImVec4(0.27f, 0.27f, 0.54f, 0.83f);\n  780:     Colors[ImGuiCol_TitleBgCollapsed]       = ImVec4(0.40f, 0.40f, 0.80f, 0.20f);\n  781:     Colors[ImGuiCol_TitleBgActive]          = ImVec4(0.32f, 0.32f, 0.63f, 0.87f);\n  782:     Colors[ImGuiCol_MenuBarBg]              = ImVec4(0.40f, 0.40f, 0.55f, 0.80f);\n  783:     Colors[ImGuiCol_ScrollbarBg]            = ImVec4(0.20f, 0.25f, 0.30f, 0.60f);\n  784:     Colors[ImGuiCol_ScrollbarGrab]          = ImVec4(0.40f, 0.40f, 0.80f, 0.30f);\n  785:     Colors[ImGuiCol_ScrollbarGrabHovered]   = ImVec4(0.40f, 0.40f, 0.80f, 0.40f);\n  786:     Colors[ImGuiCol_ScrollbarGrabActive]    = ImVec4(0.80f, 0.50f, 0.50f, 0.40f);\n  787:     Colors[ImGuiCol_ComboBg]                = ImVec4(0.20f, 0.20f, 0.20f, 0.99f);\n  788:     Colors[ImGuiCol_CheckMark]              = ImVec4(0.90f, 0.90f, 0.90f, 0.50f);\n  789:     Colors[ImGuiCol_SliderGrab]             = ImVec4(1.00f, 1.00f, 1.00f, 0.30f);\n  790:     Colors[ImGuiCol_SliderGrabActive]       = ImVec4(0.80f, 0.50f, 0.50f, 1.00f);\n  791:     Colors[ImGuiCol_Button]                 = ImVec4(0.67f, 0.40f, 0.40f, 0.60f);\n  792:     Colors[ImGuiCol_ButtonHovered]          = ImVec4(0.67f, 0.40f, 0.40f, 1.00f);\n  793:     Colors[ImGuiCol_ButtonActive]           = ImVec4(0.80f, 0.50f, 0.50f, 1.00f);\n  794:     Colors[ImGuiCol_Header]                 = ImVec4(0.40f, 0.40f, 0.90f, 0.45f);\n  795:     Colors[ImGuiCol_HeaderHovered]          = ImVec4(0.45f, 0.45f, 0.90f, 0.80f);\n  796:     Colors[ImGuiCol_HeaderActive]           = ImVec4(0.53f, 0.53f, 0.87f, 0.80f);\n  797:     Colors[ImGuiCol_Column]                 = ImVec4(0.50f, 0.50f, 0.50f, 1.00f);\n  798:     Colors[ImGuiCol_ColumnHovered]          = ImVec4(0.70f, 0.60f, 0.60f, 1.00f);\n  799:     Colors[ImGuiCol_ColumnActive]           = ImVec4(0.90f, 0.70f, 0.70f, 1.00f);\n  800:     Colors[ImGuiCol_ResizeGrip]             = ImVec4(1.00f, 1.00f, 1.00f, 0.30f);\n  801:     Colors[ImGuiCol_ResizeGripHovered]      = ImVec4(1.00f, 1.00f, 1.00f, 0.60f);\n  802:     Colors[ImGuiCol_ResizeGripActive]       = ImVec4(1.00f, 1.00f, 1.00f, 0.90f);\n  803:     Colors[ImGuiCol_CloseButton]            = ImVec4(0.50f, 0.50f, 0.90f, 0.50f);\n  804:     Colors[ImGuiCol_CloseButtonHovered]     = ImVec4(0.70f, 0.70f, 0.90f, 0.60f);\n  805:     Colors[ImGuiCol_CloseButtonActive]      = ImVec4(0.70f, 0.70f, 0.70f, 1.00f);\n  806:     Colors[ImGuiCol_PlotLines]              = ImVec4(1.00f, 1.00f, 1.00f, 1.00f);\n  807:     Colors[ImGuiCol_PlotLinesHovered]       = ImVec4(0.90f, 0.70f, 0.00f, 1.00f);\n  808:     Colors[ImGuiCol_PlotHistogram]          = ImVec4(0.90f, 0.70f, 0.00f, 1.00f);\n  809:     Colors[ImGuiCol_PlotHistogramHovered]   = ImVec4(1.00f, 0.60f, 0.00f, 1.00f);\n  810:     Colors[ImGuiCol_TextSelectedBg]         = ImVec4(0.00f, 0.00f, 1.00f, 0.35f);\n  811:     Colors[ImGuiCol_ModalWindowDarkening]   = ImVec4(0.20f, 0.20f, 0.20f, 0.35f);\n  812  }\n  813  \n  814: ImGuiIO::ImGuiIO()\n  815  {\n  816      // Most fields are initialized with zero\n  ...\n  820      DeltaTime = 1.0f/60.0f;\n  821      IniSavingRate = 5.0f;\n  822:     IniFilename = \"imgui.ini\";\n  823:     LogFilename = \"imgui_log.txt\";\n  824      Fonts = &GImDefaultFontAtlas;\n  825      FontGlobalScale = 1.0f;\n  ...\n  835      for (int i = 0; i < IM_ARRAYSIZE(KeysDownDuration); i++)\n  836          KeysDownDuration[i] = KeysDownDurationPrev[i] = -1.0f;\n  837:     for (int i = 0; i < ImGuiKey_COUNT; i++)\n  838          KeyMap[i] = -1;\n  839      KeyRepeatDelay = 0.250f;\n  ...\n  859  // - with glfw you can get those from the callback set in glfwSetCharCallback()\n  860  // - on Windows you can get those using ToAscii+keyboard state, or via the WM_CHAR message\n  861: void ImGuiIO::AddInputCharacter(ImWchar c)\n  862  {\n  863      const int n = ImStrlenW(InputCharacters);\n  ...\n  869  }\n  870  \n  871: void ImGuiIO::AddInputCharactersUTF8(const char* utf8_chars)\n  872  {\n  873:     // We can't pass more wchars than ImGuiIO::InputCharacters[] can hold so don't convert more\n  874:     const int wchars_buf_len = sizeof(ImGuiIO::InputCharacters) / sizeof(ImWchar);\n  875      ImWchar wchars[wchars_buf_len];\n  876      ImTextStrFromUtf8(wchars, wchars_buf_len, utf8_chars, NULL);\n  ...\n  925  {\n  926      size_t len = strlen(str) + 1;\n  927:     void* buff = ImGui::MemAlloc(len);\n  928      return (char*)memcpy(buff, (const void*)str, len);\n  929  }\n  ...\n 1211  }\n 1212  \n 1213: ImVec4 ImGui::ColorConvertU32ToFloat4(ImU32 in)\n 1214  {\n 1215      float s = 1.0f/255.0f;\n ....\n 1221  }\n 1222  \n 1223: ImU32 ImGui::ColorConvertFloat4ToU32(const ImVec4& in)\n 1224  {\n 1225      ImU32 out;\n ....\n 1231  }\n 1232  \n 1233: ImU32 ImGui::GetColorU32(ImGuiCol idx, float alpha_mul)  \n 1234  { \n 1235:     ImVec4 c = GImGui->Style.Colors[idx]; \n 1236:     c.w *= GImGui->Style.Alpha * alpha_mul; \n 1237      return ColorConvertFloat4ToU32(c); \n 1238  }\n 1239  \n 1240: ImU32 ImGui::GetColorU32(const ImVec4& col)\n 1241  { \n 1242      ImVec4 c = col; \n 1243:     c.w *= GImGui->Style.Alpha; \n 1244      return ColorConvertFloat4ToU32(c); \n 1245  }\n ....\n 1247  // Convert rgb floats ([0-1],[0-1],[0-1]) to hsv floats ([0-1],[0-1],[0-1]), from Foley & van Dam p592\n 1248  // Optimized http://lolengine.net/blog/2013/01/13/fast-rgb-to-hsv\n 1249: void ImGui::ColorConvertRGBtoHSV(float r, float g, float b, float& out_h, float& out_s, float& out_v)\n 1250  {\n 1251      float K = 0.f;\n ....\n 1269  // Convert hsv floats ([0-1],[0-1],[0-1]) to rgb floats ([0-1],[0-1],[0-1]), from Foley & van Dam p593\n 1270  // also http://en.wikipedia.org/wiki/HSL_and_HSV\n 1271: void ImGui::ColorConvertHSVtoRGB(float h, float s, float v, float& out_r, float& out_g, float& out_b)\n 1272  {\n 1273      if (s == 0.0f)\n ....\n 1313  \n 1314  // Load file content into memory\n 1315: // Memory allocated with ImGui::MemAlloc(), must be freed by user using ImGui::MemFree()\n 1316  void* ImFileLoadToMemory(const char* filename, const char* file_open_mode, int* out_file_size, int padding_bytes)\n 1317  {\n ....\n 1332  \n 1333      int file_size = (int)file_size_signed;\n 1334:     void* file_data = ImGui::MemAlloc(file_size + padding_bytes);\n 1335      if (file_data == NULL)\n 1336      {\n ....\n 1341      {\n 1342          fclose(f);\n 1343:         ImGui::MemFree(file_data);\n 1344          return NULL;\n 1345      }\n ....\n 1355  \n 1356  //-----------------------------------------------------------------------------\n 1357: // ImGuiStorage\n 1358  //-----------------------------------------------------------------------------\n 1359  \n 1360  // Helper: Key->value storage\n 1361: void ImGuiStorage::Clear()\n 1362  {\n 1363      Data.clear();\n ....\n 1365  \n 1366  // std::lower_bound but without the bullshit\n 1367: static ImVector<ImGuiStorage::Pair>::iterator LowerBound(ImVector<ImGuiStorage::Pair>& data, ImGuiID key)\n 1368  {\n 1369:     ImVector<ImGuiStorage::Pair>::iterator first = data.begin();\n 1370:     ImVector<ImGuiStorage::Pair>::iterator last = data.end();\n 1371      int count = (int)(last - first);\n 1372      while (count > 0)\n 1373      {\n 1374          int count2 = count / 2;\n 1375:         ImVector<ImGuiStorage::Pair>::iterator mid = first + count2;\n 1376          if (mid->key < key)\n 1377          {\n ....\n 1387  }\n 1388  \n 1389: int ImGuiStorage::GetInt(ImGuiID key, int default_val) const\n 1390  {\n 1391:     ImVector<Pair>::iterator it = LowerBound(const_cast<ImVector<ImGuiStorage::Pair>&>(Data), key);\n 1392      if (it == Data.end() || it->key != key)\n 1393          return default_val;\n ....\n 1395  }\n 1396  \n 1397: bool ImGuiStorage::GetBool(ImGuiID key, bool default_val) const\n 1398  {\n 1399      return GetInt(key, default_val ? 1 : 0) != 0;\n 1400  }\n 1401  \n 1402: float ImGuiStorage::GetFloat(ImGuiID key, float default_val) const\n 1403  {\n 1404:     ImVector<Pair>::iterator it = LowerBound(const_cast<ImVector<ImGuiStorage::Pair>&>(Data), key);\n 1405      if (it == Data.end() || it->key != key)\n 1406          return default_val;\n ....\n 1408  }\n 1409  \n 1410: void* ImGuiStorage::GetVoidPtr(ImGuiID key) const\n 1411  {\n 1412:     ImVector<Pair>::iterator it = LowerBound(const_cast<ImVector<ImGuiStorage::Pair>&>(Data), key);\n 1413      if (it == Data.end() || it->key != key)\n 1414          return NULL;\n ....\n 1417  \n 1418  // References are only valid until a new value is added to the storage. Calling a Set***() function or a Get***Ref() function invalidates the pointer.\n 1419: int* ImGuiStorage::GetIntRef(ImGuiID key, int default_val)\n 1420  {\n 1421      ImVector<Pair>::iterator it = LowerBound(Data, key);\n ....\n 1425  }\n 1426  \n 1427: bool* ImGuiStorage::GetBoolRef(ImGuiID key, bool default_val)\n 1428  {\n 1429      return (bool*)GetIntRef(key, default_val ? 1 : 0);\n 1430  }\n 1431  \n 1432: float* ImGuiStorage::GetFloatRef(ImGuiID key, float default_val)\n 1433  {\n 1434      ImVector<Pair>::iterator it = LowerBound(Data, key);\n ....\n 1438  }\n 1439  \n 1440: void** ImGuiStorage::GetVoidPtrRef(ImGuiID key, void* default_val)\n 1441  {\n 1442      ImVector<Pair>::iterator it = LowerBound(Data, key);\n ....\n 1447  \n 1448  // FIXME-OPT: Need a way to reuse the result of lower_bound when doing GetInt()/SetInt() - not too bad because it only happens on explicit interaction (maximum one a frame)\n 1449: void ImGuiStorage::SetInt(ImGuiID key, int val)\n 1450  {\n 1451      ImVector<Pair>::iterator it = LowerBound(Data, key);\n ....\n 1458  }\n 1459  \n 1460: void ImGuiStorage::SetBool(ImGuiID key, bool val)\n 1461  {\n 1462      SetInt(key, val ? 1 : 0);\n 1463  }\n 1464  \n 1465: void ImGuiStorage::SetFloat(ImGuiID key, float val)\n 1466  {\n 1467      ImVector<Pair>::iterator it = LowerBound(Data, key);\n ....\n 1474  }\n 1475  \n 1476: void ImGuiStorage::SetVoidPtr(ImGuiID key, void* val)\n 1477  {\n 1478      ImVector<Pair>::iterator it = LowerBound(Data, key);\n ....\n 1485  }\n 1486  \n 1487: void ImGuiStorage::SetAllInt(int v)\n 1488  {\n 1489      for (int i = 0; i < Data.Size; i++)\n ....\n 1492  \n 1493  //-----------------------------------------------------------------------------\n 1494: // ImGuiTextFilter\n 1495  //-----------------------------------------------------------------------------\n 1496  \n 1497  // Helper: Parse and apply text filters. In format \"aaaaa[,bbbb][,ccccc]\"\n 1498: ImGuiTextFilter::ImGuiTextFilter(const char* default_filter)\n 1499  {\n 1500      if (default_filter)\n ....\n 1510  }\n 1511  \n 1512: bool ImGuiTextFilter::Draw(const char* label, float width)\n 1513  {\n 1514      if (width != 0.0f)\n 1515:         ImGui::PushItemWidth(width);\n 1516:     bool value_changed = ImGui::InputText(label, InputBuf, IM_ARRAYSIZE(InputBuf));\n 1517      if (width != 0.0f)\n 1518:         ImGui::PopItemWidth();\n 1519      if (value_changed)\n 1520          Build();\n ....\n 1522  }\n 1523  \n 1524: void ImGuiTextFilter::TextRange::split(char separator, ImVector<TextRange>& out)\n 1525  {\n 1526      out.resize(0);\n ....\n 1540  }\n 1541  \n 1542: void ImGuiTextFilter::Build()\n 1543  {\n 1544      Filters.resize(0);\n ....\n 1557  }\n 1558  \n 1559: bool ImGuiTextFilter::PassFilter(const char* text, const char* text_end) const\n 1560  {\n 1561      if (Filters.empty())\n ....\n 1592  \n 1593  //-----------------------------------------------------------------------------\n 1594: // ImGuiTextBuffer\n 1595  //-----------------------------------------------------------------------------\n 1596  \n ....\n 1602  \n 1603  // Helper: Text buffer for logging/accumulating text\n 1604: void ImGuiTextBuffer::appendv(const char* fmt, va_list args)\n 1605  {\n 1606      va_list args_copy;\n ....\n 1623  }\n 1624  \n 1625: void ImGuiTextBuffer::append(const char* fmt, ...)\n 1626  {\n 1627      va_list args;\n ....\n 1632  \n 1633  //-----------------------------------------------------------------------------\n 1634: // ImGuiSimpleColumns\n 1635  //-----------------------------------------------------------------------------\n 1636  \n 1637: ImGuiSimpleColumns::ImGuiSimpleColumns()\n 1638  {\n 1639      Count = 0;\n ....\n 1643  }\n 1644  \n 1645: void ImGuiSimpleColumns::Update(int count, float spacing, bool clear)\n 1646  {\n 1647      IM_ASSERT(Count <= IM_ARRAYSIZE(Pos));\n ....\n 1660  }\n 1661  \n 1662: float ImGuiSimpleColumns::DeclColumns(float w0, float w1, float w2) // not using va_arg because they promote float to double\n 1663  {\n 1664      NextWidth = 0.0f;\n ....\n 1671  }\n 1672  \n 1673: float ImGuiSimpleColumns::CalcExtraSpace(float avail_w)\n 1674  {\n 1675      return ImMax(0.0f, avail_w - Width);\n ....\n 1677  \n 1678  //-----------------------------------------------------------------------------\n 1679: // ImGuiListClipper\n 1680  //-----------------------------------------------------------------------------\n 1681  \n ....\n 1684      // Set cursor position and a few other things so that SetScrollHere() and Columns() can work when seeking cursor. \n 1685      // FIXME: It is problematic that we have to do that here, because custom/equivalent end-user code would stumble on the same issue. Consider moving within SetCursorXXX functions?\n 1686:     ImGui::SetCursorPosY(pos_y);\n 1687:     ImGuiWindow* window = ImGui::GetCurrentWindow();\n 1688      window->DC.CursorPosPrevLine.y = window->DC.CursorPos.y - line_height;      // Setting those fields so that SetScrollHere() can properly function after the end of our clipper usage.\n 1689:     window->DC.PrevLineHeight = (line_height - GImGui->Style.ItemSpacing.y);    // If we end up needing more accurate data (to e.g. use SameLine) we may as well make the clipper have a fourth step to let user process and display the last item in their list.\n 1690      if (window->DC.ColumnsCount > 1)\n 1691          window->DC.ColumnsCellMinY = window->DC.CursorPos.y;                    // Setting this so that cell Y position are set properly\n ....\n 1695  // Use case B: Begin() called from constructor with items_height>0\n 1696  // FIXME-LEGACY: Ideally we should remove the Begin/End functions but they are part of the legacy API we still support. This is why some of the code in Step() calling Begin() and reassign some fields, spaghetti style.\n 1697: void ImGuiListClipper::Begin(int count, float items_height)\n 1698  {\n 1699:     StartPosY = ImGui::GetCursorPosY();\n 1700      ItemsHeight = items_height;\n 1701      ItemsCount = count;\n ....\n 1704      if (ItemsHeight > 0.0f)\n 1705      {\n 1706:         ImGui::CalcListClipping(ItemsCount, ItemsHeight, &DisplayStart, &DisplayEnd); // calculate how many to clip/display\n 1707          if (DisplayStart > 0)\n 1708              SetCursorPosYAndSetupDummyPrevLine(StartPosY + DisplayStart * ItemsHeight, ItemsHeight); // advance cursor\n ....\n 1711  }\n 1712  \n 1713: void ImGuiListClipper::End()\n 1714  {\n 1715      if (ItemsCount < 0)\n 1716          return;\n 1717:     // In theory here we should assert that ImGui::GetCursorPosY() == StartPosY + DisplayEnd * ItemsHeight, but it feels saner to just seek at the end and not assert/crash the user.\n 1718      if (ItemsCount < INT_MAX)\n 1719          SetCursorPosYAndSetupDummyPrevLine(StartPosY + ItemsCount * ItemsHeight, ItemsHeight); // advance cursor\n ....\n 1722  }\n 1723  \n 1724: bool ImGuiListClipper::Step()\n 1725  {\n 1726:     if (ItemsCount == 0 || ImGui::GetCurrentWindowRead()->SkipItems)\n 1727      {\n 1728          ItemsCount = -1; \n ....\n 1733          DisplayStart = 0;\n 1734          DisplayEnd = 1;\n 1735:         StartPosY = ImGui::GetCursorPosY();\n 1736          StepNo = 1;\n 1737          return true;\n ....\n 1740      {\n 1741          if (ItemsCount == 1) { ItemsCount = -1; return false; }\n 1742:         float items_height = ImGui::GetCursorPosY() - StartPosY;\n 1743          IM_ASSERT(items_height > 0.0f);   // If this triggers, it means Item 0 hasn't moved the cursor vertically\n 1744          Begin(ItemsCount-1, items_height);\n ....\n 1760  \n 1761  //-----------------------------------------------------------------------------\n 1762: // ImGuiWindow\n 1763  //-----------------------------------------------------------------------------\n 1764  \n 1765: ImGuiWindow::ImGuiWindow(const char* name)\n 1766  {\n 1767      Name = ImStrdup(name);\n ....\n 1792      AutoPosLastDirection = -1;\n 1793      HiddenFrames = 0;\n 1794:     SetWindowPosAllowFlags = SetWindowSizeAllowFlags = SetWindowCollapsedAllowFlags = ImGuiSetCond_Always | ImGuiSetCond_Once | ImGuiSetCond_FirstUseEver | ImGuiSetCond_Appearing;\n 1795      SetWindowPosCenterWanted = false;\n 1796  \n ....\n 1799      FontWindowScale = 1.0f;\n 1800  \n 1801:     DrawList = (ImDrawList*)ImGui::MemAlloc(sizeof(ImDrawList));\n 1802      IM_PLACEMENT_NEW(DrawList) ImDrawList();\n 1803      DrawList->_OwnerName = Name;\n ....\n 1811  }\n 1812  \n 1813: ImGuiWindow::~ImGuiWindow()\n 1814  {\n 1815      DrawList->~ImDrawList();\n 1816:     ImGui::MemFree(DrawList);\n 1817      DrawList = NULL;\n 1818:     ImGui::MemFree(Name);\n 1819      Name = NULL;\n 1820  }\n 1821  \n 1822: ImGuiID ImGuiWindow::GetID(const char* str, const char* str_end)\n 1823  {\n 1824:     ImGuiID seed = IDStack.back();\n 1825:     ImGuiID id = ImHash(str, str_end ? (int)(str_end - str) : 0, seed);\n 1826:     ImGui::KeepAliveID(id);\n 1827      return id;\n 1828  }\n 1829  \n 1830: ImGuiID ImGuiWindow::GetID(const void* ptr)\n 1831  {\n 1832:     ImGuiID seed = IDStack.back();\n 1833:     ImGuiID id = ImHash(&ptr, sizeof(void*), seed);\n 1834:     ImGui::KeepAliveID(id);\n 1835      return id;\n 1836  }\n 1837  \n 1838: ImGuiID ImGuiWindow::GetIDNoKeepAlive(const char* str, const char* str_end)\n 1839  {\n 1840:     ImGuiID seed = IDStack.back();\n 1841      return ImHash(str, str_end ? (int)(str_end - str) : 0, seed);\n 1842  }\n 1843  \n 1844  //-----------------------------------------------------------------------------\n 1845: // Internal API exposed in imgui_internal.h\n 1846  //-----------------------------------------------------------------------------\n 1847  \n 1848: static void SetCurrentWindow(ImGuiWindow* window)\n 1849  {\n 1850:     ImGuiContext& g = *GImGui;\n 1851      g.CurrentWindow = window;\n 1852      if (window)\n ....\n 1854  }\n 1855  \n 1856: ImGuiWindow* ImGui::GetParentWindow()\n 1857  {\n 1858:     ImGuiContext& g = *GImGui;\n 1859      IM_ASSERT(g.CurrentWindowStack.Size >= 2);\n 1860      return g.CurrentWindowStack[(unsigned int)g.CurrentWindowStack.Size - 2];\n 1861  }\n 1862  \n 1863: void ImGui::SetActiveID(ImGuiID id, ImGuiWindow* window)\n 1864  {\n 1865:     ImGuiContext& g = *GImGui;\n 1866      g.ActiveId = id;\n 1867      g.ActiveIdAllowOverlap = false;\n ....\n 1872  }\n 1873  \n 1874: void ImGui::ClearActiveID()\n 1875  {\n 1876      SetActiveID(0, NULL);\n 1877  }\n 1878  \n 1879: void ImGui::SetHoveredID(ImGuiID id)\n 1880  {\n 1881:     ImGuiContext& g = *GImGui;\n 1882      g.HoveredId = id;\n 1883      g.HoveredIdAllowOverlap = false;\n 1884  }\n 1885  \n 1886: void ImGui::KeepAliveID(ImGuiID id)\n 1887  {\n 1888:     ImGuiContext& g = *GImGui;\n 1889      if (g.ActiveId == id)\n 1890          g.ActiveIdIsAlive = true;\n ....\n 1892  \n 1893  // Advance cursor given item size for layout.\n 1894: void ImGui::ItemSize(const ImVec2& size, float text_offset_y)\n 1895  {\n 1896:     ImGuiWindow* window = GetCurrentWindow();\n 1897      if (window->SkipItems)\n 1898          return;\n 1899  \n 1900      // Always align ourselves on pixel boundaries\n 1901:     ImGuiContext& g = *GImGui;\n 1902      const float line_height = ImMax(window->DC.CurrentLineHeight, size.y);\n 1903      const float text_base_offset = ImMax(window->DC.CurrentLineTextBaseOffset, text_offset_y);\n ....\n 1914  }\n 1915  \n 1916: void ImGui::ItemSize(const ImRect& bb, float text_offset_y)\n 1917  {\n 1918      ItemSize(bb.GetSize(), text_offset_y);\n ....\n 1922  // Note that the size can be different than the one provided to ItemSize(). Typically, widgets that spread over available surface\n 1923  // declares their minimum size requirement to ItemSize() and then use a larger region for drawing/interaction, which is passed to ItemAdd().\n 1924: bool ImGui::ItemAdd(const ImRect& bb, const ImGuiID* id)\n 1925  {\n 1926:     ImGuiWindow* window = GetCurrentWindow();\n 1927      window->DC.LastItemId = id ? *id : 0;\n 1928      window->DC.LastItemRect = bb;\n ....\n 1932  \n 1933      // This is a sensible default, but widgets are free to override it after calling ItemAdd()\n 1934:     ImGuiContext& g = *GImGui;\n 1935      if (IsMouseHoveringRect(bb.Min, bb.Max))\n 1936      {\n ....\n 1947  }\n 1948  \n 1949: bool ImGui::IsClippedEx(const ImRect& bb, const ImGuiID* id, bool clip_even_when_logged)\n 1950  {\n 1951:     ImGuiContext& g = *GImGui;\n 1952:     ImGuiWindow* window = GetCurrentWindowRead();\n 1953  \n 1954      if (!bb.Overlaps(window->ClipRect))\n 1955:         if (!id || *id != GImGui->ActiveId)\n 1956              if (clip_even_when_logged || !g.LogEnabled)\n 1957                  return true;\n ....\n 1960  \n 1961  // NB: This is an internal helper. The user-facing IsItemHovered() is using data emitted from ItemAdd(), with a slightly different logic.\n 1962: bool ImGui::IsHovered(const ImRect& bb, ImGuiID id, bool flatten_childs)\n 1963  {\n 1964:     ImGuiContext& g = *GImGui;\n 1965      if (g.HoveredId == 0 || g.HoveredId == id || g.HoveredIdAllowOverlap)\n 1966      {\n 1967:         ImGuiWindow* window = GetCurrentWindowRead();\n 1968          if (g.HoveredWindow == window || (flatten_childs && g.HoveredRootWindow == window->RootWindow))\n 1969              if ((g.ActiveId == 0 || g.ActiveId == id || g.ActiveIdAllowOverlap) && IsMouseHoveringRect(bb.Min, bb.Max))\n ....\n 1974  }\n 1975  \n 1976: bool ImGui::FocusableItemRegister(ImGuiWindow* window, bool is_active, bool tab_stop)\n 1977  {\n 1978:     ImGuiContext& g = *GImGui;\n 1979  \n 1980      const bool allow_keyboard_focus = window->DC.AllowKeyboardFocus;\n ....\n 1985      // Process keyboard input at this point: TAB, Shift-TAB switch focus\n 1986      // We can always TAB out of a widget that doesn't allow tabbing in.\n 1987:     if (tab_stop && window->FocusIdxAllRequestNext == INT_MAX && window->FocusIdxTabRequestNext == INT_MAX && is_active && IsKeyPressedMap(ImGuiKey_Tab))\n 1988      {\n 1989          // Modulo on index will be applied at the end of frame once we've got the total counter of items.\n ....\n 2001  }\n 2002  \n 2003: void ImGui::FocusableItemUnregister(ImGuiWindow* window)\n 2004  {\n 2005      window->FocusIdxAllCounter--;\n ....\n 2007  }\n 2008  \n 2009: ImVec2 ImGui::CalcItemSize(ImVec2 size, float default_x, float default_y)\n 2010  {\n 2011:     ImGuiContext& g = *GImGui;\n 2012      ImVec2 content_max;\n 2013      if (size.x < 0.0f || size.y < 0.0f)\n ....\n 2020  }\n 2021  \n 2022: float ImGui::CalcWrapWidthForPos(const ImVec2& pos, float wrap_pos_x)\n 2023  {\n 2024      if (wrap_pos_x < 0.0f)\n 2025          return 0.0f;\n 2026  \n 2027:     ImGuiWindow* window = GetCurrentWindowRead();\n 2028      if (wrap_pos_x == 0.0f)\n 2029          wrap_pos_x = GetContentRegionMax().x + window->Pos.x;\n ....\n 2036  //-----------------------------------------------------------------------------\n 2037  \n 2038: void* ImGui::MemAlloc(size_t sz)\n 2039  {\n 2040:     GImGui->IO.MetricsAllocs++;\n 2041:     return GImGui->IO.MemAllocFn(sz);\n 2042  }\n 2043  \n 2044: void ImGui::MemFree(void* ptr)\n 2045  {\n 2046:     if (ptr) GImGui->IO.MetricsAllocs--;\n 2047:     return GImGui->IO.MemFreeFn(ptr);\n 2048  }\n 2049  \n 2050: const char* ImGui::GetClipboardText()\n 2051  {\n 2052:     return GImGui->IO.GetClipboardTextFn ? GImGui->IO.GetClipboardTextFn(GImGui->IO.ClipboardUserData) : \"\";\n 2053  }\n 2054  \n 2055: void ImGui::SetClipboardText(const char* text)\n 2056  {\n 2057:     if (GImGui->IO.SetClipboardTextFn)\n 2058:         GImGui->IO.SetClipboardTextFn(GImGui->IO.ClipboardUserData, text);\n 2059  }\n 2060  \n 2061: const char* ImGui::GetVersion()\n 2062  {\n 2063:     return IMGUI_VERSION;\n 2064  }\n 2065  \n 2066: // Internal state access - if you want to share ImGui state between modules (e.g. DLL) or allocate it yourself\n 2067  // Note that we still point to some static data and members (such as GFontAtlas), so the state instance you end up using will point to the static data within its module\n 2068: ImGuiContext* ImGui::GetCurrentContext()\n 2069  {\n 2070:     return GImGui;\n 2071  }\n 2072  \n 2073: void ImGui::SetCurrentContext(ImGuiContext* ctx)\n 2074  {\n 2075: #ifdef IMGUI_SET_CURRENT_CONTEXT_FUNC\n 2076:     IMGUI_SET_CURRENT_CONTEXT_FUNC(ctx); // For custom thread-based hackery you may want to have control over this.\n 2077  #else\n 2078:     GImGui = ctx;\n 2079  #endif\n 2080  }\n 2081  \n 2082: ImGuiContext* ImGui::CreateContext(void* (*malloc_fn)(size_t), void (*free_fn)(void*))\n 2083  {\n 2084      if (!malloc_fn) malloc_fn = malloc;\n 2085:     ImGuiContext* ctx = (ImGuiContext*)malloc_fn(sizeof(ImGuiContext));\n 2086:     IM_PLACEMENT_NEW(ctx) ImGuiContext();\n 2087      ctx->IO.MemAllocFn = malloc_fn;\n 2088      ctx->IO.MemFreeFn = free_fn ? free_fn : free;\n ....\n 2090  }\n 2091  \n 2092: void ImGui::DestroyContext(ImGuiContext* ctx)\n 2093  {\n 2094      void (*free_fn)(void*) = ctx->IO.MemFreeFn;\n 2095:     ctx->~ImGuiContext();\n 2096      free_fn(ctx);\n 2097:     if (GImGui == ctx)\n 2098          SetCurrentContext(NULL);\n 2099  }\n 2100  \n 2101: ImGuiIO& ImGui::GetIO()\n 2102  {\n 2103:     return GImGui->IO;\n 2104  }\n 2105  \n 2106: ImGuiStyle& ImGui::GetStyle()\n 2107  {\n 2108:     return GImGui->Style;\n 2109  }\n 2110  \n 2111  // Same value as passed to your RenderDrawListsFn() function. valid after Render() and until the next call to NewFrame()\n 2112: ImDrawData* ImGui::GetDrawData()\n 2113  {\n 2114:     return GImGui->RenderDrawData.Valid ? &GImGui->RenderDrawData : NULL;\n 2115  }\n 2116  \n 2117: float ImGui::GetTime()\n 2118  {\n 2119:     return GImGui->Time;\n 2120  }\n 2121  \n 2122: int ImGui::GetFrameCount()\n 2123  {\n 2124:     return GImGui->FrameCount;\n 2125  }\n 2126  \n 2127: void ImGui::NewFrame()\n 2128  {\n 2129:     ImGuiContext& g = *GImGui;\n 2130  \n 2131      // Check user data\n ....\n 2139      {\n 2140          // Initialize on first frame\n 2141:         g.LogClipboard = (ImGuiTextBuffer*)ImGui::MemAlloc(sizeof(ImGuiTextBuffer));\n 2142:         IM_PLACEMENT_NEW(g.LogClipboard) ImGuiTextBuffer();\n 2143  \n 2144          IM_ASSERT(g.Settings.empty());\n ....\n 2225          if (g.IO.MouseDown[0])\n 2226          {\n 2227:             if (!(g.MovedWindow->Flags & ImGuiWindowFlags_NoMove))\n 2228              {\n 2229                  g.MovedWindow->PosFloat += g.IO.MouseDelta;\n 2230:                 if (!(g.MovedWindow->Flags & ImGuiWindowFlags_NoSavedSettings) && (g.IO.MouseDelta.x != 0.0f || g.IO.MouseDelta.y != 0.0f))\n 2231                      MarkIniSettingsDirty();\n 2232              }\n ....\n 2256      // Find the window we are hovering. Child windows can extend beyond the limit of their parent so we need to derive HoveredRootWindow from HoveredWindow\n 2257      g.HoveredWindow = g.MovedWindow ? g.MovedWindow : FindHoveredWindow(g.IO.MousePos, false);\n 2258:     if (g.HoveredWindow && (g.HoveredWindow->Flags & ImGuiWindowFlags_ChildWindow))\n 2259          g.HoveredRootWindow = g.HoveredWindow->RootWindow;\n 2260      else\n 2261          g.HoveredRootWindow = g.MovedWindow ? g.MovedWindow->RootWindow : FindHoveredWindow(g.IO.MousePos, true);\n 2262  \n 2263:     if (ImGuiWindow* modal_window = GetFrontMostModalRootWindow())\n 2264      {\n 2265          g.ModalWindowDarkeningRatio = ImMin(g.ModalWindowDarkeningRatio + g.IO.DeltaTime * 6.0f, 1.0f);\n 2266:         ImGuiWindow* window = g.HoveredRootWindow;\n 2267          while (window && window != modal_window)\n 2268              window = window->ParentWindow;\n ....\n 2288                  mouse_earliest_button_down = i;\n 2289      }\n 2290:     bool mouse_avail_to_imgui = (mouse_earliest_button_down == -1) || g.IO.MouseDownOwned[mouse_earliest_button_down];\n 2291      if (g.CaptureMouseNextFrame != -1)\n 2292          g.IO.WantCaptureMouse = (g.CaptureMouseNextFrame != 0);\n 2293      else\n 2294:         g.IO.WantCaptureMouse = (mouse_avail_to_imgui && (g.HoveredWindow != NULL || mouse_any_down)) || (g.ActiveId != 0) || (!g.OpenPopupStack.empty());\n 2295      g.IO.WantCaptureKeyboard = (g.CaptureKeyboardNextFrame != -1) ? (g.CaptureKeyboardNextFrame != 0) : (g.ActiveId != 0);\n 2296      g.IO.WantTextInput = (g.ActiveId != 0 && g.InputTextState.Id == g.ActiveId);\n 2297:     g.MouseCursor = ImGuiMouseCursor_Arrow;\n 2298      g.CaptureMouseNextFrame = g.CaptureKeyboardNextFrame = -1;\n 2299      g.OsImePosRequest = ImVec2(1.0f, 1.0f); // OS Input Method Editor showing on top-left of our window by default\n 2300  \n 2301:     // If mouse was first clicked outside of ImGui bounds we also cancel out hovering.\n 2302:     if (!mouse_avail_to_imgui)\n 2303          g.HoveredWindow = g.HoveredRootWindow = NULL;\n 2304  \n ....\n 2306      if (g.HoveredWindow && g.IO.MouseWheel != 0.0f && !g.HoveredWindow->Collapsed)\n 2307      {\n 2308:         ImGuiWindow* window = g.HoveredWindow;\n 2309          if (g.IO.KeyCtrl)\n 2310          {\n ....\n 2323              }\n 2324          }\n 2325:         else if (!(window->Flags & ImGuiWindowFlags_NoScrollWithMouse))\n 2326          {\n 2327              // Scroll\n 2328:             const int scroll_lines = (window->Flags & ImGuiWindowFlags_ComboBox) ? 3 : 5;\n 2329              SetWindowScrollY(window, window->Scroll.y - g.IO.MouseWheel * window->CalcFontSize() * scroll_lines);\n 2330          }\n ....\n 2333      // Pressing TAB activate widget focus\n 2334      // NB: Don't discard FocusedWindow if it isn't active, so that a window that go on/off programatically won't lose its keyboard focus.\n 2335:     if (g.ActiveId == 0 && g.FocusedWindow != NULL && g.FocusedWindow->Active && IsKeyPressedMap(ImGuiKey_Tab, false))\n 2336          g.FocusedWindow->FocusIdxTabRequestNext = 0;\n 2337  \n ....\n 2339      for (int i = 0; i != g.Windows.Size; i++)\n 2340      {\n 2341:         ImGuiWindow* window = g.Windows[i];\n 2342          window->WasActive = window->Active;\n 2343          window->Active = false;\n ....\n 2348      if (g.FocusedWindow && !g.FocusedWindow->WasActive)\n 2349          for (int i = g.Windows.Size-1; i >= 0; i--)\n 2350:             if (g.Windows[i]->WasActive && !(g.Windows[i]->Flags & ImGuiWindowFlags_ChildWindow))\n 2351              {\n 2352                  FocusWindow(g.Windows[i]);\n ....\n 2361  \n 2362      // Create implicit window - we will only render it if the user has added something to it.\n 2363:     ImGui::SetNextWindowSize(ImVec2(400,400), ImGuiSetCond_FirstUseEver);\n 2364:     ImGui::Begin(\"Debug\");\n 2365  }\n 2366  \n 2367: // NB: behavior of ImGui after Shutdown() is not tested/guaranteed at the moment. This function is merely here to free heap allocations.\n 2368: void ImGui::Shutdown()\n 2369  {\n 2370:     ImGuiContext& g = *GImGui;\n 2371  \n 2372      // The fonts atlas can be used prior to calling NewFrame(), so we clear it even if g.Initialized is FALSE (which would happen if we never called NewFrame)\n ....\n 2374          g.IO.Fonts->Clear();\n 2375  \n 2376:     // Cleanup of other data are conditional on actually having used ImGui.\n 2377      if (!g.Initialized)\n 2378          return;\n ....\n 2382      for (int i = 0; i < g.Windows.Size; i++)\n 2383      {\n 2384:         g.Windows[i]->~ImGuiWindow();\n 2385:         ImGui::MemFree(g.Windows[i]);\n 2386      }\n 2387      g.Windows.clear();\n ....\n 2395      g.MovedWindow = NULL;\n 2396      for (int i = 0; i < g.Settings.Size; i++)\n 2397:         ImGui::MemFree(g.Settings[i].Name);\n 2398      g.Settings.clear();\n 2399      g.ColorModifiers.clear();\n ....\n 2410      if (g.PrivateClipboard)\n 2411      {\n 2412:         ImGui::MemFree(g.PrivateClipboard);\n 2413          g.PrivateClipboard = NULL;\n 2414      }\n ....\n 2424      if (g.LogClipboard)\n 2425      {\n 2426:         g.LogClipboard->~ImGuiTextBuffer();\n 2427:         ImGui::MemFree(g.LogClipboard);\n 2428      }\n 2429  \n ....\n 2431  }\n 2432  \n 2433: static ImGuiIniData* FindWindowSettings(const char* name)\n 2434  {\n 2435:     ImGuiContext& g = *GImGui;\n 2436:     ImGuiID id = ImHash(name, 0);\n 2437      for (int i = 0; i != g.Settings.Size; i++)\n 2438      {\n 2439:         ImGuiIniData* ini = &g.Settings[i];\n 2440          if (ini->Id == id)\n 2441              return ini;\n ....\n 2444  }\n 2445  \n 2446: static ImGuiIniData* AddWindowSettings(const char* name)\n 2447  {\n 2448:     GImGui->Settings.resize(GImGui->Settings.Size + 1);\n 2449:     ImGuiIniData* ini = &GImGui->Settings.back();\n 2450      ini->Name = ImStrdup(name);\n 2451      ini->Id = ImHash(name, 0);\n ....\n 2460  static void LoadIniSettingsFromDisk(const char* ini_filename)\n 2461  {\n 2462:     ImGuiContext& g = *GImGui;\n 2463      if (!ini_filename)\n 2464          return;\n ....\n 2469          return;\n 2470  \n 2471:     ImGuiIniData* settings = NULL;\n 2472      const char* buf_end = file_data + file_size;\n 2473      for (const char* line_start = file_data; line_start < buf_end; )\n ....\n 2500      }\n 2501  \n 2502:     ImGui::MemFree(file_data);\n 2503  }\n 2504  \n 2505  static void SaveIniSettingsToDisk(const char* ini_filename)\n 2506  {\n 2507:     ImGuiContext& g = *GImGui;\n 2508      g.SettingsDirtyTimer = 0.0f;\n 2509      if (!ini_filename)\n ....\n 2513      for (int i = 0; i != g.Windows.Size; i++)\n 2514      {\n 2515:         ImGuiWindow* window = g.Windows[i];\n 2516:         if (window->Flags & ImGuiWindowFlags_NoSavedSettings)\n 2517              continue;\n 2518:         ImGuiIniData* settings = FindWindowSettings(window->Name);\n 2519          settings->Pos = window->Pos;\n 2520          settings->Size = window->SizeFull;\n ....\n 2529      for (int i = 0; i != g.Settings.Size; i++)\n 2530      {\n 2531:         const ImGuiIniData* settings = &g.Settings[i];\n 2532          if (settings->Pos.x == FLT_MAX)\n 2533              continue;\n ....\n 2547  static void MarkIniSettingsDirty()\n 2548  {\n 2549:     ImGuiContext& g = *GImGui;\n 2550      if (g.SettingsDirtyTimer <= 0.0f)\n 2551          g.SettingsDirtyTimer = g.IO.IniSavingRate;\n ....\n 2555  static int ChildWindowComparer(const void* lhs, const void* rhs)\n 2556  {\n 2557:     const ImGuiWindow* a = *(const ImGuiWindow**)lhs;\n 2558:     const ImGuiWindow* b = *(const ImGuiWindow**)rhs;\n 2559:     if (int d = (a->Flags & ImGuiWindowFlags_Popup) - (b->Flags & ImGuiWindowFlags_Popup))\n 2560          return d;\n 2561:     if (int d = (a->Flags & ImGuiWindowFlags_Tooltip) - (b->Flags & ImGuiWindowFlags_Tooltip))\n 2562          return d;\n 2563:     if (int d = (a->Flags & ImGuiWindowFlags_ComboBox) - (b->Flags & ImGuiWindowFlags_ComboBox))\n 2564          return d;\n 2565      return (a->IndexWithinParent - b->IndexWithinParent);\n 2566  }\n 2567  \n 2568: static void AddWindowToSortedBuffer(ImVector<ImGuiWindow*>& out_sorted_windows, ImGuiWindow* window)\n 2569  {\n 2570      out_sorted_windows.push_back(window);\n ....\n 2573          int count = window->DC.ChildWindows.Size;\n 2574          if (count > 1)\n 2575:             qsort(window->DC.ChildWindows.begin(), (size_t)count, sizeof(ImGuiWindow*), ChildWindowComparer);\n 2576          for (int i = 0; i < count; i++)\n 2577          {\n 2578:             ImGuiWindow* child = window->DC.ChildWindows[i];\n 2579              if (child->Active)\n 2580                  AddWindowToSortedBuffer(out_sorted_windows, child);\n ....\n 2607      \n 2608      out_render_list.push_back(draw_list);\n 2609:     GImGui->IO.MetricsRenderVertices += draw_list->VtxBuffer.Size;\n 2610:     GImGui->IO.MetricsRenderIndices += draw_list->IdxBuffer.Size;\n 2611  }\n 2612  \n 2613: static void AddWindowToRenderList(ImVector<ImDrawList*>& out_render_list, ImGuiWindow* window)\n 2614  {\n 2615      AddDrawListToRenderList(out_render_list, window->DrawList);\n 2616      for (int i = 0; i < window->DC.ChildWindows.Size; i++)\n 2617      {\n 2618:         ImGuiWindow* child = window->DC.ChildWindows[i];\n 2619          if (!child->Active) // clipped children may have been marked not active\n 2620              continue;\n 2621:         if ((child->Flags & ImGuiWindowFlags_Popup) && child->HiddenFrames > 0)\n 2622              continue;\n 2623          AddWindowToRenderList(out_render_list, child);\n ....\n 2626  \n 2627  // When using this function it is sane to ensure that float are perfectly rounded to integer values, to that e.g. (int)(max.x-min.x) in user's render produce correct result.\n 2628: void ImGui::PushClipRect(const ImVec2& clip_rect_min, const ImVec2& clip_rect_max, bool intersect_with_current_clip_rect)\n 2629  {\n 2630:     ImGuiWindow* window = GetCurrentWindow();\n 2631      window->DrawList->PushClipRect(clip_rect_min, clip_rect_max, intersect_with_current_clip_rect);\n 2632      window->ClipRect = window->DrawList->_ClipRectStack.back();\n 2633  }\n 2634  \n 2635: void ImGui::PopClipRect()\n 2636  {\n 2637:     ImGuiWindow* window = GetCurrentWindow();\n 2638      window->DrawList->PopClipRect();\n 2639      window->ClipRect = window->DrawList->_ClipRectStack.back();\n ....\n 2641  \n 2642  // This is normally called by Render(). You may want to call it directly if you want to avoid calling Render() but the gain will be very minimal.\n 2643: void ImGui::EndFrame()\n 2644  {\n 2645:     ImGuiContext& g = *GImGui;\n 2646:     IM_ASSERT(g.Initialized);                       // Forgot to call ImGui::NewFrame()\n 2647:     IM_ASSERT(g.FrameCountEnded != g.FrameCount);   // ImGui::EndFrame() called multiple times, or forgot to call ImGui::NewFrame() again\n 2648  \n 2649      // Render tooltip\n 2650      if (g.Tooltip[0])\n 2651      {\n 2652:         ImGui::BeginTooltip();\n 2653:         ImGui::TextUnformatted(g.Tooltip);\n 2654:         ImGui::EndTooltip();\n 2655      }\n 2656  \n ....\n 2666      if (g.CurrentWindow && !g.CurrentWindow->Accessed)\n 2667          g.CurrentWindow->Active = false;\n 2668:     ImGui::End();\n 2669  \n 2670      // Click to focus window and start moving (after we're done with all our widgets)\n ....\n 2676              {\n 2677                  FocusWindow(g.HoveredWindow);\n 2678:                 if (!(g.HoveredWindow->Flags & ImGuiWindowFlags_NoMove))\n 2679                  {\n 2680                      g.MovedWindow = g.HoveredWindow;\n ....\n 2697      for (int i = 0; i != g.Windows.Size; i++)\n 2698      {\n 2699:         ImGuiWindow* window = g.Windows[i];\n 2700:         if (window->Active && (window->Flags & ImGuiWindowFlags_ChildWindow))       // if a child is active its parent will add it\n 2701              continue;\n 2702          AddWindowToSortedBuffer(g.WindowsSortBuffer, window);\n ....\n 2712  }\n 2713  \n 2714: void ImGui::Render()\n 2715  {\n 2716:     ImGuiContext& g = *GImGui;\n 2717:     IM_ASSERT(g.Initialized);   // Forgot to call ImGui::NewFrame()\n 2718  \n 2719      if (g.FrameCountEnded != g.FrameCount)\n 2720:         ImGui::EndFrame();\n 2721      g.FrameCountRendered = g.FrameCount;\n 2722  \n ....\n 2731          for (int i = 0; i != g.Windows.Size; i++)\n 2732          {\n 2733:             ImGuiWindow* window = g.Windows[i];\n 2734:             if (window->Active && window->HiddenFrames <= 0 && (window->Flags & (ImGuiWindowFlags_ChildWindow)) == 0)\n 2735              {\n 2736                  // FIXME: Generalize this with a proper layering system so e.g. user can draw in specific layers, below text, ..\n 2737                  g.IO.MetricsActiveWindows++;\n 2738:                 if (window->Flags & ImGuiWindowFlags_Popup)\n 2739                      AddWindowToRenderList(g.RenderDrawLists[1], window);\n 2740:                 else if (window->Flags & ImGuiWindowFlags_Tooltip)\n 2741                      AddWindowToRenderList(g.RenderDrawLists[2], window);\n 2742                  else\n ....\n 2763          if (g.IO.MouseDrawCursor)\n 2764          {\n 2765:             const ImGuiMouseCursorData& cursor_data = g.MouseCursorData[g.MouseCursor];\n 2766              const ImVec2 pos = g.IO.MousePos - cursor_data.HotOffset;\n 2767              const ImVec2 size = cursor_data.Size;\n ....\n 2790  }\n 2791  \n 2792: const char* ImGui::FindRenderedTextEnd(const char* text, const char* text_end)\n 2793  {\n 2794      const char* text_display_end = text;\n ....\n 2802  \n 2803  // Pass text data straight to log (without being displayed)\n 2804: void ImGui::LogText(const char* fmt, ...)\n 2805  {\n 2806:     ImGuiContext& g = *GImGui;\n 2807      if (!g.LogEnabled)\n 2808          return;\n ....\n 2825  static void LogRenderedText(const ImVec2& ref_pos, const char* text, const char* text_end)\n 2826  {\n 2827:     ImGuiContext& g = *GImGui;\n 2828:     ImGuiWindow* window = ImGui::GetCurrentWindowRead();\n 2829  \n 2830      if (!text_end)\n 2831:         text_end = ImGui::FindRenderedTextEnd(text, text_end);\n 2832  \n 2833      const bool log_new_line = ref_pos.y > window->DC.LogLinePosY+1;\n ....\n 2861              const int char_count = (int)(line_end - text_remaining);\n 2862              if (log_new_line || !is_first_line)\n 2863:                 ImGui::LogText(IM_NEWLINE \"%*s%.*s\", tree_depth*4, \"\", char_count, text_remaining);\n 2864              else\n 2865:                 ImGui::LogText(\" %.*s\", char_count, text_remaining);\n 2866          }\n 2867  \n ....\n 2872  }\n 2873  \n 2874: // Internal ImGui functions to render text\n 2875  // RenderText***() functions calls ImDrawList::AddText() calls ImBitmapFont::RenderText()\n 2876: void ImGui::RenderText(ImVec2 pos, const char* text, const char* text_end, bool hide_text_after_hash)\n 2877  {\n 2878:     ImGuiContext& g = *GImGui;\n 2879:     ImGuiWindow* window = GetCurrentWindow();\n 2880  \n 2881      // Hide anything after a '##' string\n ....\n 2895      if (text_len > 0)\n 2896      {\n 2897:         window->DrawList->AddText(g.Font, g.FontSize, pos, GetColorU32(ImGuiCol_Text), text, text_display_end);\n 2898          if (g.LogEnabled)\n 2899              LogRenderedText(pos, text, text_display_end);\n ....\n 2901  }\n 2902  \n 2903: void ImGui::RenderTextWrapped(ImVec2 pos, const char* text, const char* text_end, float wrap_width)\n 2904  {\n 2905:     ImGuiContext& g = *GImGui;\n 2906:     ImGuiWindow* window = GetCurrentWindow();\n 2907  \n 2908      if (!text_end)\n ....\n 2912      if (text_len > 0)\n 2913      {\n 2914:         window->DrawList->AddText(g.Font, g.FontSize, pos, GetColorU32(ImGuiCol_Text), text, text_end, wrap_width);\n 2915          if (g.LogEnabled)\n 2916              LogRenderedText(pos, text, text_end);\n ....\n 2920  // Default clip_rect uses (pos_min,pos_max)\n 2921  // Handle clipping on CPU immediately (vs typically let the GPU clip the triangles that are overlapping the clipping rectangle edges)\n 2922: void ImGui::RenderTextClipped(const ImVec2& pos_min, const ImVec2& pos_max, const char* text, const char* text_end, const ImVec2* text_size_if_known, const ImVec2& align, const ImRect* clip_rect)\n 2923  {\n 2924      // Hide anything after a '##' string\n ....\n 2928          return;\n 2929  \n 2930:     ImGuiContext& g = *GImGui;\n 2931:     ImGuiWindow* window = GetCurrentWindow();\n 2932  \n 2933      // Perform CPU side clipping for single clipped element to avoid using scissor state\n ....\n 2949      {\n 2950          ImVec4 fine_clip_rect(clip_min->x, clip_min->y, clip_max->x, clip_max->y);\n 2951:         window->DrawList->AddText(g.Font, g.FontSize, pos, GetColorU32(ImGuiCol_Text), text, text_display_end, 0.0f, &fine_clip_rect);\n 2952      }\n 2953      else\n 2954      {\n 2955:         window->DrawList->AddText(g.Font, g.FontSize, pos, GetColorU32(ImGuiCol_Text), text, text_display_end, 0.0f, NULL);\n 2956      }\n 2957      if (g.LogEnabled)\n ....\n 2960  \n 2961  // Render a rectangle shaped with optional rounding and borders\n 2962: void ImGui::RenderFrame(ImVec2 p_min, ImVec2 p_max, ImU32 fill_col, bool border, float rounding)\n 2963  {\n 2964:     ImGuiWindow* window = GetCurrentWindow();\n 2965  \n 2966      window->DrawList->AddRectFilled(p_min, p_max, fill_col, rounding);\n 2967:     if (border && (window->Flags & ImGuiWindowFlags_ShowBorders))\n 2968      {\n 2969:         window->DrawList->AddRect(p_min+ImVec2(1,1), p_max+ImVec2(1,1), GetColorU32(ImGuiCol_BorderShadow), rounding);\n 2970:         window->DrawList->AddRect(p_min, p_max, GetColorU32(ImGuiCol_Border), rounding);\n 2971      }\n 2972  }\n 2973  \n 2974  // Render a triangle to denote expanded/collapsed state\n 2975: void ImGui::RenderCollapseTriangle(ImVec2 p_min, bool is_open, float scale)\n 2976  {\n 2977:     ImGuiContext& g = *GImGui;\n 2978:     ImGuiWindow* window = GetCurrentWindow();\n 2979  \n 2980      const float h = g.FontSize * 1.00f;\n ....\n 2997      }\n 2998  \n 2999:     window->DrawList->AddTriangleFilled(a, b, c, GetColorU32(ImGuiCol_Text));\n 3000  }\n 3001  \n 3002: void ImGui::RenderBullet(ImVec2 pos)\n 3003  {\n 3004:     ImGuiWindow* window = GetCurrentWindow();\n 3005:     window->DrawList->AddCircleFilled(pos, GImGui->FontSize*0.20f, GetColorU32(ImGuiCol_Text), 8);\n 3006  }\n 3007  \n 3008: void ImGui::RenderCheckMark(ImVec2 pos, ImU32 col)\n 3009  {\n 3010:     ImGuiContext& g = *GImGui;\n 3011:     ImGuiWindow* window = GetCurrentWindow();\n 3012  \n 3013      ImVec2 a, b, c;\n ....\n 3028  \n 3029  // Calculate text size. Text can be multi-line. Optionally ignore text after a ## marker.\n 3030: // CalcTextSize(\"\") should return ImVec2(0.0f, GImGui->FontSize)\n 3031: ImVec2 ImGui::CalcTextSize(const char* text, const char* text_end, bool hide_text_after_double_hash, float wrap_width)\n 3032  {\n 3033:     ImGuiContext& g = *GImGui;\n 3034  \n 3035      const char* text_display_end;\n ....\n 3056  \n 3057  // Helper to calculate coarse clipping of large list of evenly sized items.\n 3058: // NB: Prefer using the ImGuiListClipper higher-level helper if you can! Read comments and instructions there on how those use this sort of pattern.\n 3059  // NB: 'items_count' is only used to clamp the result, if you don't know your count you can use INT_MAX\n 3060: void ImGui::CalcListClipping(int items_count, float items_height, int* out_items_display_start, int* out_items_display_end)\n 3061  {\n 3062:     ImGuiContext& g = *GImGui;\n 3063:     ImGuiWindow* window = GetCurrentWindowRead();\n 3064      if (g.LogEnabled)\n 3065      {\n ....\n 3086  // Find window given position, search front-to-back\n 3087  // FIXME: Note that we have a lag here because WindowRectClipped is updated in Begin() so windows moved by user via SetWindowPos() and not SetNextWindowPos() will have that rectangle lagging by a frame at the time FindHoveredWindow() is called, aka before the next Begin(). Moving window thankfully isn't affected.\n 3088: static ImGuiWindow* FindHoveredWindow(ImVec2 pos, bool excluding_childs)\n 3089  {\n 3090:     ImGuiContext& g = *GImGui;\n 3091      for (int i = g.Windows.Size-1; i >= 0; i--)\n 3092      {\n 3093:         ImGuiWindow* window = g.Windows[i];\n 3094          if (!window->Active)\n 3095              continue;\n 3096:         if (window->Flags & ImGuiWindowFlags_NoInputs)\n 3097              continue;\n 3098:         if (excluding_childs && (window->Flags & ImGuiWindowFlags_ChildWindow) != 0)\n 3099              continue;\n 3100  \n ....\n 3110  // NB- Rectangle is clipped by our current clip setting\n 3111  // NB- Expand the rectangle to be generous on imprecise inputs systems (g.Style.TouchExtraPadding)\n 3112: bool ImGui::IsMouseHoveringRect(const ImVec2& r_min, const ImVec2& r_max, bool clip)\n 3113  {\n 3114:     ImGuiContext& g = *GImGui;\n 3115:     ImGuiWindow* window = GetCurrentWindowRead();\n 3116  \n 3117      // Clip\n ....\n 3125  }\n 3126  \n 3127: bool ImGui::IsMouseHoveringWindow()\n 3128  {\n 3129:     ImGuiContext& g = *GImGui;\n 3130      return g.HoveredWindow == g.CurrentWindow;\n 3131  }\n 3132  \n 3133: bool ImGui::IsMouseHoveringAnyWindow()\n 3134  {\n 3135:     ImGuiContext& g = *GImGui;\n 3136      return g.HoveredWindow != NULL;\n 3137  }\n 3138  \n 3139: bool ImGui::IsPosHoveringAnyWindow(const ImVec2& pos)\n 3140  {\n 3141      return FindHoveredWindow(pos, false) != NULL;\n 3142  }\n 3143  \n 3144: static bool IsKeyPressedMap(ImGuiKey key, bool repeat)\n 3145  {\n 3146:     const int key_index = GImGui->IO.KeyMap[key];\n 3147:     return ImGui::IsKeyPressed(key_index, repeat);\n 3148  }\n 3149  \n 3150: int ImGui::GetKeyIndex(ImGuiKey key)\n 3151  {\n 3152:     IM_ASSERT(key >= 0 && key < ImGuiKey_COUNT);\n 3153:     return GImGui->IO.KeyMap[key];\n 3154  }\n 3155  \n 3156: bool ImGui::IsKeyDown(int key_index)\n 3157  {\n 3158      if (key_index < 0) return false;\n 3159:     IM_ASSERT(key_index >= 0 && key_index < IM_ARRAYSIZE(GImGui->IO.KeysDown));\n 3160:     return GImGui->IO.KeysDown[key_index];\n 3161  }\n 3162  \n 3163: bool ImGui::IsKeyPressed(int key_index, bool repeat)\n 3164  {\n 3165:     ImGuiContext& g = *GImGui;\n 3166      if (key_index < 0) return false;\n 3167      IM_ASSERT(key_index >= 0 && key_index < IM_ARRAYSIZE(g.IO.KeysDown));\n ....\n 3179  }\n 3180  \n 3181: bool ImGui::IsKeyReleased(int key_index)\n 3182  {\n 3183:     ImGuiContext& g = *GImGui;\n 3184      if (key_index < 0) return false;\n 3185      IM_ASSERT(key_index >= 0 && key_index < IM_ARRAYSIZE(g.IO.KeysDown));\n ....\n 3189  }\n 3190  \n 3191: bool ImGui::IsMouseDown(int button)\n 3192  {\n 3193:     ImGuiContext& g = *GImGui;\n 3194      IM_ASSERT(button >= 0 && button < IM_ARRAYSIZE(g.IO.MouseDown));\n 3195      return g.IO.MouseDown[button];\n 3196  }\n 3197  \n 3198: bool ImGui::IsMouseClicked(int button, bool repeat)\n 3199  {\n 3200:     ImGuiContext& g = *GImGui;\n 3201      IM_ASSERT(button >= 0 && button < IM_ARRAYSIZE(g.IO.MouseDown));\n 3202      const float t = g.IO.MouseDownDuration[button];\n ....\n 3214  }\n 3215  \n 3216: bool ImGui::IsMouseReleased(int button)\n 3217  {\n 3218:     ImGuiContext& g = *GImGui;\n 3219      IM_ASSERT(button >= 0 && button < IM_ARRAYSIZE(g.IO.MouseDown));\n 3220      return g.IO.MouseReleased[button];\n 3221  }\n 3222  \n 3223: bool ImGui::IsMouseDoubleClicked(int button)\n 3224  {\n 3225:     ImGuiContext& g = *GImGui;\n 3226      IM_ASSERT(button >= 0 && button < IM_ARRAYSIZE(g.IO.MouseDown));\n 3227      return g.IO.MouseDoubleClicked[button];\n 3228  }\n 3229  \n 3230: bool ImGui::IsMouseDragging(int button, float lock_threshold)\n 3231  {\n 3232:     ImGuiContext& g = *GImGui;\n 3233      IM_ASSERT(button >= 0 && button < IM_ARRAYSIZE(g.IO.MouseDown));\n 3234      if (!g.IO.MouseDown[button])\n ....\n 3239  }\n 3240  \n 3241: ImVec2 ImGui::GetMousePos()\n 3242  {\n 3243:     return GImGui->IO.MousePos;\n 3244  }\n 3245  \n 3246  // NB: prefer to call right after BeginPopup(). At the time Selectable/MenuItem is activated, the popup is already closed!\n 3247: ImVec2 ImGui::GetMousePosOnOpeningCurrentPopup()\n 3248  {\n 3249:     ImGuiContext& g = *GImGui;\n 3250      if (g.CurrentPopupStack.Size > 0)\n 3251          return g.OpenPopupStack[g.CurrentPopupStack.Size-1].MousePosOnOpen;\n ....\n 3253  }\n 3254  \n 3255: ImVec2 ImGui::GetMouseDragDelta(int button, float lock_threshold)\n 3256  {\n 3257:     ImGuiContext& g = *GImGui;\n 3258      IM_ASSERT(button >= 0 && button < IM_ARRAYSIZE(g.IO.MouseDown));\n 3259      if (lock_threshold < 0.0f)\n ....\n 3265  }\n 3266  \n 3267: void ImGui::ResetMouseDragDelta(int button)\n 3268  {\n 3269:     ImGuiContext& g = *GImGui;\n 3270      IM_ASSERT(button >= 0 && button < IM_ARRAYSIZE(g.IO.MouseDown));\n 3271      // NB: We don't need to reset g.IO.MouseDragMaxDistanceSqr\n ....\n 3273  }\n 3274  \n 3275: ImGuiMouseCursor ImGui::GetMouseCursor()\n 3276  {\n 3277:     return GImGui->MouseCursor;\n 3278  }\n 3279  \n 3280: void ImGui::SetMouseCursor(ImGuiMouseCursor cursor_type)\n 3281  {\n 3282:     GImGui->MouseCursor = cursor_type;\n 3283  }\n 3284  \n 3285: void ImGui::CaptureKeyboardFromApp(bool capture)\n 3286  {\n 3287:     GImGui->CaptureKeyboardNextFrame = capture ? 1 : 0;\n 3288  }\n 3289  \n 3290: void ImGui::CaptureMouseFromApp(bool capture)\n 3291  {\n 3292:     GImGui->CaptureMouseNextFrame = capture ? 1 : 0;\n 3293  }\n 3294  \n 3295: bool ImGui::IsItemHovered()\n 3296  {\n 3297:     ImGuiWindow* window = GetCurrentWindowRead();\n 3298      return window->DC.LastItemHoveredAndUsable;\n 3299  }\n 3300  \n 3301: bool ImGui::IsItemHoveredRect()\n 3302  {\n 3303:     ImGuiWindow* window = GetCurrentWindowRead();\n 3304      return window->DC.LastItemHoveredRect;\n 3305  }\n 3306  \n 3307: bool ImGui::IsItemActive()\n 3308  {\n 3309:     ImGuiContext& g = *GImGui;\n 3310      if (g.ActiveId)\n 3311      {\n 3312:         ImGuiWindow* window = GetCurrentWindowRead();\n 3313          return g.ActiveId == window->DC.LastItemId;\n 3314      }\n ....\n 3316  }\n 3317  \n 3318: bool ImGui::IsItemClicked(int mouse_button)\n 3319  {\n 3320      return IsMouseClicked(mouse_button) && IsItemHovered();\n 3321  }\n 3322  \n 3323: bool ImGui::IsAnyItemHovered()\n 3324  {\n 3325:     return GImGui->HoveredId != 0 || GImGui->HoveredIdPreviousFrame != 0;\n 3326  }\n 3327  \n 3328: bool ImGui::IsAnyItemActive()\n 3329  {\n 3330:     return GImGui->ActiveId != 0;\n 3331  }\n 3332  \n 3333: bool ImGui::IsItemVisible()\n 3334  {\n 3335:     ImGuiWindow* window = GetCurrentWindowRead();\n 3336      ImRect r(window->ClipRect);\n 3337      return r.Overlaps(window->DC.LastItemRect);\n ....\n 3339  \n 3340  // Allow last item to be overlapped by a subsequent item. Both may be activated during the same frame before the later one takes priority.\n 3341: void ImGui::SetItemAllowOverlap()\n 3342  {\n 3343:     ImGuiContext& g = *GImGui;\n 3344      if (g.HoveredId == g.CurrentWindow->DC.LastItemId)\n 3345          g.HoveredIdAllowOverlap = true;\n ....\n 3348  }\n 3349  \n 3350: ImVec2 ImGui::GetItemRectMin()\n 3351  {\n 3352:     ImGuiWindow* window = GetCurrentWindowRead();\n 3353      return window->DC.LastItemRect.Min;\n 3354  }\n 3355  \n 3356: ImVec2 ImGui::GetItemRectMax()\n 3357  {\n 3358:     ImGuiWindow* window = GetCurrentWindowRead();\n 3359      return window->DC.LastItemRect.Max;\n 3360  }\n 3361  \n 3362: ImVec2 ImGui::GetItemRectSize()\n 3363  {\n 3364:     ImGuiWindow* window = GetCurrentWindowRead();\n 3365      return window->DC.LastItemRect.GetSize();\n 3366  }\n 3367  \n 3368: ImVec2 ImGui::CalcItemRectClosestPoint(const ImVec2& pos, bool on_edge, float outward)\n 3369  {\n 3370:     ImGuiWindow* window = GetCurrentWindowRead();\n 3371      ImRect rect = window->DC.LastItemRect;\n 3372      rect.Expand(outward);\n ....\n 3375  \n 3376  // Tooltip is stored and turned into a BeginTooltip()/EndTooltip() sequence at the end of the frame. Each call override previous value.\n 3377: void ImGui::SetTooltipV(const char* fmt, va_list args)\n 3378  {\n 3379:     ImGuiContext& g = *GImGui;\n 3380      ImFormatStringV(g.Tooltip, IM_ARRAYSIZE(g.Tooltip), fmt, args);\n 3381  }\n 3382  \n 3383: void ImGui::SetTooltip(const char* fmt, ...)\n 3384  {\n 3385      va_list args;\n ....\n 3391  static ImRect GetVisibleRect()\n 3392  {\n 3393:     ImGuiContext& g = *GImGui;\n 3394      if (g.IO.DisplayVisibleMin.x != g.IO.DisplayVisibleMax.x && g.IO.DisplayVisibleMin.y != g.IO.DisplayVisibleMax.y)\n 3395          return ImRect(g.IO.DisplayVisibleMin, g.IO.DisplayVisibleMax);\n ....\n 3397  }\n 3398  \n 3399: void ImGui::BeginTooltip()\n 3400  {\n 3401:     ImGuiWindowFlags flags = ImGuiWindowFlags_Tooltip|ImGuiWindowFlags_NoTitleBar|ImGuiWindowFlags_NoMove|ImGuiWindowFlags_NoResize|ImGuiWindowFlags_NoSavedSettings|ImGuiWindowFlags_AlwaysAutoResize;\n 3402:     ImGui::Begin(\"##Tooltip\", NULL, flags);\n 3403  }\n 3404  \n 3405: void ImGui::EndTooltip()\n 3406  {\n 3407:     IM_ASSERT(GetCurrentWindowRead()->Flags & ImGuiWindowFlags_Tooltip);   // Mismatched BeginTooltip()/EndTooltip() calls\n 3408:     ImGui::End();\n 3409  }\n 3410  \n 3411: static bool IsPopupOpen(ImGuiID id)\n 3412  {\n 3413:     ImGuiContext& g = *GImGui;\n 3414      return g.OpenPopupStack.Size > g.CurrentPopupStack.Size && g.OpenPopupStack[g.CurrentPopupStack.Size].PopupId == id;\n 3415  }\n ....\n 3418  // Popups are closed when user click outside, or activate a pressable item, or CloseCurrentPopup() is called within a BeginPopup()/EndPopup() block.\n 3419  // Popup identifiers are relative to the current ID-stack (so OpenPopup and BeginPopup needs to be at the same level).\n 3420: // One open popup per level of the popup hierarchy (NB: when assigning we reset the Window member of ImGuiPopupRef to NULL)\n 3421: void ImGui::OpenPopupEx(const char* str_id, bool reopen_existing)\n 3422  {\n 3423:     ImGuiContext& g = *GImGui;\n 3424:     ImGuiWindow* window = g.CurrentWindow;\n 3425:     ImGuiID id = window->GetID(str_id);\n 3426      int current_stack_size = g.CurrentPopupStack.Size;\n 3427:     ImGuiPopupRef popup_ref = ImGuiPopupRef(id, window, window->GetID(\"##menus\"), g.IO.MousePos); // Tagged as new ref because constructor sets Window to NULL (we are passing the ParentWindow info here)\n 3428      if (g.OpenPopupStack.Size < current_stack_size + 1)\n 3429          g.OpenPopupStack.push_back(popup_ref);\n ....\n 3435  }\n 3436  \n 3437: void ImGui::OpenPopup(const char* str_id)\n 3438  {\n 3439:     ImGui::OpenPopupEx(str_id, false);\n 3440  }\n 3441  \n 3442  static void CloseInactivePopups()\n 3443  {\n 3444:     ImGuiContext& g = *GImGui;\n 3445      if (g.OpenPopupStack.empty())\n 3446          return;\n ....\n 3453          for (n = 0; n < g.OpenPopupStack.Size; n++)\n 3454          {\n 3455:             ImGuiPopupRef& popup = g.OpenPopupStack[n];\n 3456              if (!popup.Window)\n 3457                  continue;\n 3458:             IM_ASSERT((popup.Window->Flags & ImGuiWindowFlags_Popup) != 0);\n 3459:             if (popup.Window->Flags & ImGuiWindowFlags_ChildWindow)\n 3460                  continue;\n 3461  \n ....\n 3471  }\n 3472  \n 3473: static ImGuiWindow* GetFrontMostModalRootWindow()\n 3474  {\n 3475:     ImGuiContext& g = *GImGui;\n 3476      for (int n = g.OpenPopupStack.Size-1; n >= 0; n--)\n 3477:         if (ImGuiWindow* front_most_popup = g.OpenPopupStack.Data[n].Window)\n 3478:             if (front_most_popup->Flags & ImGuiWindowFlags_Modal)\n 3479                  return front_most_popup;\n 3480      return NULL;\n ....\n 3483  static void ClosePopupToLevel(int remaining)\n 3484  {\n 3485:     ImGuiContext& g = *GImGui;\n 3486      if (remaining > 0)\n 3487:         ImGui::FocusWindow(g.OpenPopupStack[remaining-1].Window);\n 3488      else\n 3489:         ImGui::FocusWindow(g.OpenPopupStack[0].ParentWindow);\n 3490      g.OpenPopupStack.resize(remaining);\n 3491  }\n 3492  \n 3493: static void ClosePopup(ImGuiID id)\n 3494  {\n 3495      if (!IsPopupOpen(id))\n 3496          return;\n 3497:     ImGuiContext& g = *GImGui;\n 3498      ClosePopupToLevel(g.OpenPopupStack.Size - 1);\n 3499  }\n 3500  \n 3501  // Close the popup we have begin-ed into.\n 3502: void ImGui::CloseCurrentPopup()\n 3503  {\n 3504:     ImGuiContext& g = *GImGui;\n 3505      int popup_idx = g.CurrentPopupStack.Size - 1;\n 3506      if (popup_idx < 0 || popup_idx > g.OpenPopupStack.Size || g.CurrentPopupStack[popup_idx].PopupId != g.OpenPopupStack[popup_idx].PopupId)\n 3507          return;\n 3508:     while (popup_idx > 0 && g.OpenPopupStack[popup_idx].Window && (g.OpenPopupStack[popup_idx].Window->Flags & ImGuiWindowFlags_ChildMenu))\n 3509          popup_idx--;\n 3510      ClosePopupToLevel(popup_idx);\n ....\n 3513  static inline void ClearSetNextWindowData()\n 3514  {\n 3515:     ImGuiContext& g = *GImGui;\n 3516      g.SetNextWindowPosCond = g.SetNextWindowSizeCond = g.SetNextWindowContentSizeCond = g.SetNextWindowCollapsedCond = 0;\n 3517      g.SetNextWindowSizeConstraint = g.SetNextWindowFocus = false;\n 3518  }\n 3519  \n 3520: static bool BeginPopupEx(const char* str_id, ImGuiWindowFlags extra_flags)\n 3521  {\n 3522:     ImGuiContext& g = *GImGui;\n 3523:     ImGuiWindow* window = g.CurrentWindow;\n 3524:     const ImGuiID id = window->GetID(str_id);\n 3525      if (!IsPopupOpen(id))\n 3526      {\n ....\n 3529      }\n 3530  \n 3531:     ImGui::PushStyleVar(ImGuiStyleVar_WindowRounding, 0.0f);\n 3532:     ImGuiWindowFlags flags = extra_flags|ImGuiWindowFlags_Popup|ImGuiWindowFlags_NoTitleBar|ImGuiWindowFlags_NoMove|ImGuiWindowFlags_NoResize|ImGuiWindowFlags_NoSavedSettings|ImGuiWindowFlags_AlwaysAutoResize;\n 3533  \n 3534      char name[20];\n 3535:     if (flags & ImGuiWindowFlags_ChildMenu)\n 3536          ImFormatString(name, IM_ARRAYSIZE(name), \"##menu_%d\", g.CurrentPopupStack.Size);    // Recycle windows based on depth\n 3537      else\n 3538          ImFormatString(name, IM_ARRAYSIZE(name), \"##popup_%08x\", id); // Not recycling, so we can close/open during the same frame\n 3539  \n 3540:     bool is_open = ImGui::Begin(name, NULL, flags);\n 3541:     if (!(window->Flags & ImGuiWindowFlags_ShowBorders))\n 3542:         g.CurrentWindow->Flags &= ~ImGuiWindowFlags_ShowBorders;\n 3543      if (!is_open) // NB: is_open can be 'false' when the popup is completely clipped (e.g. zero size display)\n 3544:         ImGui::EndPopup();\n 3545  \n 3546      return is_open;\n 3547  }\n 3548  \n 3549: bool ImGui::BeginPopup(const char* str_id)\n 3550  {\n 3551:     if (GImGui->OpenPopupStack.Size <= GImGui->CurrentPopupStack.Size)  // Early out for performance\n 3552      {\n 3553          ClearSetNextWindowData(); // We behave like Begin() and need to consume those values\n 3554          return false;\n 3555      }\n 3556:     return BeginPopupEx(str_id, ImGuiWindowFlags_ShowBorders);\n 3557  }\n 3558  \n 3559: bool ImGui::BeginPopupModal(const char* name, bool* p_open, ImGuiWindowFlags extra_flags)\n 3560  {\n 3561:     ImGuiContext& g = *GImGui;\n 3562:     ImGuiWindow* window = g.CurrentWindow;\n 3563:     const ImGuiID id = window->GetID(name);\n 3564      if (!IsPopupOpen(id))\n 3565      {\n ....\n 3568      }\n 3569  \n 3570:     ImGuiWindowFlags flags = extra_flags|ImGuiWindowFlags_Popup|ImGuiWindowFlags_Modal|ImGuiWindowFlags_NoCollapse|ImGuiWindowFlags_NoSavedSettings;\n 3571:     bool is_open = ImGui::Begin(name, p_open, flags);\n 3572      if (!is_open || (p_open && !*p_open)) // NB: is_open can be 'false' when the popup is completely clipped (e.g. zero size display)\n 3573      {\n 3574:         ImGui::EndPopup();\n 3575          if (is_open)\n 3576              ClosePopup(id);\n ....\n 3581  }\n 3582  \n 3583: void ImGui::EndPopup()\n 3584  {\n 3585:     ImGuiWindow* window = GetCurrentWindow();\n 3586:     IM_ASSERT(window->Flags & ImGuiWindowFlags_Popup);  // Mismatched BeginPopup()/EndPopup() calls\n 3587:     IM_ASSERT(GImGui->CurrentPopupStack.Size > 0);\n 3588:     ImGui::End();\n 3589:     if (!(window->Flags & ImGuiWindowFlags_Modal))\n 3590:         ImGui::PopStyleVar();\n 3591  }\n 3592  \n ....\n 3599  //    the item isn't interactable (because it is blocked by the active popup) may useful in some situation when e.g. large canvas as one item, content of menu\n 3600  //    driven by click position.\n 3601: bool ImGui::BeginPopupContextItem(const char* str_id, int mouse_button)\n 3602  {\n 3603      if (IsItemHovered() && IsMouseClicked(mouse_button))\n ....\n 3606  }\n 3607  \n 3608: bool ImGui::BeginPopupContextWindow(bool also_over_items, const char* str_id, int mouse_button)\n 3609  {\n 3610      if (!str_id) str_id = \"window_context_menu\";\n ....\n 3615  }\n 3616  \n 3617: bool ImGui::BeginPopupContextVoid(const char* str_id, int mouse_button)\n 3618  {\n 3619      if (!str_id) str_id = \"void_context_menu\";\n ....\n 3623  }\n 3624  \n 3625: static bool BeginChildEx(const char* name, ImGuiID id, const ImVec2& size_arg, bool border, ImGuiWindowFlags extra_flags)\n 3626  {\n 3627:     ImGuiWindow* window = ImGui::GetCurrentWindow();\n 3628:     ImGuiWindowFlags flags = ImGuiWindowFlags_NoTitleBar|ImGuiWindowFlags_NoResize|ImGuiWindowFlags_NoSavedSettings|ImGuiWindowFlags_ChildWindow;\n 3629  \n 3630:     const ImVec2 content_avail = ImGui::GetContentRegionAvail();\n 3631      ImVec2 size = ImFloor(size_arg);\n 3632      if (size.x <= 0.0f)\n 3633      {\n 3634          if (size.x == 0.0f)\n 3635:             flags |= ImGuiWindowFlags_ChildWindowAutoFitX;\n 3636          size.x = ImMax(content_avail.x, 4.0f) - fabsf(size.x); // Arbitrary minimum zero-ish child size of 4.0f (0.0f causing too much issues)\n 3637      }\n ....\n 3639      {\n 3640          if (size.y == 0.0f)\n 3641:             flags |= ImGuiWindowFlags_ChildWindowAutoFitY;\n 3642          size.y = ImMax(content_avail.y, 4.0f) - fabsf(size.y);\n 3643      }\n 3644      if (border)\n 3645:         flags |= ImGuiWindowFlags_ShowBorders;\n 3646      flags |= extra_flags;\n 3647  \n ....\n 3652          ImFormatString(title, IM_ARRAYSIZE(title), \"%s.%08X\", window->Name, id);\n 3653  \n 3654:     bool ret = ImGui::Begin(title, NULL, size, -1.0f, flags);\n 3655  \n 3656:     if (!(window->Flags & ImGuiWindowFlags_ShowBorders))\n 3657:         ImGui::GetCurrentWindow()->Flags &= ~ImGuiWindowFlags_ShowBorders;\n 3658  \n 3659      return ret;\n 3660  }\n 3661  \n 3662: bool ImGui::BeginChild(const char* str_id, const ImVec2& size_arg, bool border, ImGuiWindowFlags extra_flags)\n 3663  {\n 3664:     ImGuiWindow* window = GetCurrentWindow();\n 3665      return BeginChildEx(str_id, window->GetID(str_id), size_arg, border, extra_flags);\n 3666  }\n 3667  \n 3668: bool ImGui::BeginChild(ImGuiID id, const ImVec2& size_arg, bool border, ImGuiWindowFlags extra_flags)\n 3669  {\n 3670      return BeginChildEx(NULL, id, size_arg, border, extra_flags);\n 3671  }\n 3672  \n 3673: void ImGui::EndChild()\n 3674  {\n 3675:     ImGuiWindow* window = GetCurrentWindow();\n 3676  \n 3677:     IM_ASSERT(window->Flags & ImGuiWindowFlags_ChildWindow);   // Mismatched BeginChild()/EndChild() callss\n 3678:     if ((window->Flags & ImGuiWindowFlags_ComboBox) || window->BeginCount > 1)\n 3679      {\n 3680:         ImGui::End();\n 3681      }\n 3682      else\n ....\n 3684          // When using auto-filling child window, we don't provide full width/height to ItemSize so that it doesn't feed back into automatic size-fitting.\n 3685          ImVec2 sz = GetWindowSize();\n 3686:         if (window->Flags & ImGuiWindowFlags_ChildWindowAutoFitX) // Arbitrary minimum zero-ish child size of 4.0f causes less trouble than a 0.0f\n 3687              sz.x = ImMax(4.0f, sz.x);\n 3688:         if (window->Flags & ImGuiWindowFlags_ChildWindowAutoFitY)\n 3689              sz.y = ImMax(4.0f, sz.y);\n 3690  \n 3691:         ImGui::End();\n 3692  \n 3693          window = GetCurrentWindow();\n ....\n 3699  \n 3700  // Helper to create a child window / scrolling region that looks like a normal widget frame.\n 3701: bool ImGui::BeginChildFrame(ImGuiID id, const ImVec2& size, ImGuiWindowFlags extra_flags)\n 3702  {\n 3703:     ImGuiContext& g = *GImGui;\n 3704:     const ImGuiStyle& style = g.Style;\n 3705:     ImGui::PushStyleColor(ImGuiCol_ChildWindowBg, style.Colors[ImGuiCol_FrameBg]);\n 3706:     ImGui::PushStyleVar(ImGuiStyleVar_ChildWindowRounding, style.FrameRounding);\n 3707:     ImGui::PushStyleVar(ImGuiStyleVar_WindowPadding, style.FramePadding);\n 3708:     return ImGui::BeginChild(id, size, (g.CurrentWindow->Flags & ImGuiWindowFlags_ShowBorders) ? true : false, ImGuiWindowFlags_NoMove | ImGuiWindowFlags_AlwaysUseWindowPadding | extra_flags);\n 3709  }\n 3710  \n 3711: void ImGui::EndChildFrame()\n 3712  {\n 3713:     ImGui::EndChild();\n 3714:     ImGui::PopStyleVar(2);\n 3715:     ImGui::PopStyleColor();\n 3716  }\n 3717  \n 3718  // Save and compare stack sizes on Begin()/End() to detect usage errors\n 3719: static void CheckStacksSize(ImGuiWindow* window, bool write)\n 3720  {\n 3721      // NOT checking: DC.ItemWidth, DC.AllowKeyboardFocus, DC.ButtonRepeat, DC.TextWrapPos (per window) to allow user to conveniently push once and not pop (they are cleared on Begin)\n 3722:     ImGuiContext& g = *GImGui;\n 3723      int* p_backup = &window->DC.StackSizesBackup[0];\n 3724      { int current = window->IDStack.Size;       if (write) *p_backup = current; else IM_ASSERT(*p_backup == current && \"PushID/PopID or TreeNode/TreePop Mismatch!\");   p_backup++; }    // Too few or too many PopID()/TreePop()\n ....\n 3733  static ImVec2 FindBestPopupWindowPos(const ImVec2& base_pos, const ImVec2& size, int* last_dir, const ImRect& r_inner)\n 3734  {\n 3735:     const ImGuiStyle& style = GImGui->Style;\n 3736  \n 3737      // Clamp into visible area while not overlapping the cursor. Safety padding is optional if our popup size won't fit without it.\n ....\n 3759  }\n 3760  \n 3761: ImGuiWindow* ImGui::FindWindowByName(const char* name)\n 3762  {\n 3763      // FIXME-OPT: Store sorted hashes -> pointers so we can do a bissection in a contiguous block\n 3764:     ImGuiContext& g = *GImGui;\n 3765:     ImGuiID id = ImHash(name, 0);\n 3766      for (int i = 0; i < g.Windows.Size; i++)\n 3767          if (g.Windows[i]->ID == id)\n ....\n 3770  }\n 3771  \n 3772: static ImGuiWindow* CreateNewWindow(const char* name, ImVec2 size, ImGuiWindowFlags flags)\n 3773  {\n 3774:     ImGuiContext& g = *GImGui;\n 3775  \n 3776      // Create window the first time\n 3777:     ImGuiWindow* window = (ImGuiWindow*)ImGui::MemAlloc(sizeof(ImGuiWindow));\n 3778:     IM_PLACEMENT_NEW(window) ImGuiWindow(name);\n 3779      window->Flags = flags;\n 3780  \n 3781:     if (flags & ImGuiWindowFlags_NoSavedSettings)\n 3782      {\n 3783          // User can disable loading and saving of settings. Tooltip and child windows also don't store settings.\n ....\n 3791          window->Pos = ImVec2((float)(int)window->PosFloat.x, (float)(int)window->PosFloat.y);\n 3792  \n 3793:         ImGuiIniData* settings = FindWindowSettings(name);\n 3794          if (!settings)\n 3795          {\n ....\n 3798          else\n 3799          {\n 3800:             window->SetWindowPosAllowFlags &= ~ImGuiSetCond_FirstUseEver;\n 3801:             window->SetWindowSizeAllowFlags &= ~ImGuiSetCond_FirstUseEver;\n 3802:             window->SetWindowCollapsedAllowFlags &= ~ImGuiSetCond_FirstUseEver;\n 3803          }\n 3804  \n ....\n 3810          }\n 3811  \n 3812:         if (ImLengthSqr(settings->Size) > 0.00001f && !(flags & ImGuiWindowFlags_NoResize))\n 3813              size = settings->Size;\n 3814          window->Size = window->SizeFull = size;\n 3815      }\n 3816  \n 3817:     if ((flags & ImGuiWindowFlags_AlwaysAutoResize) != 0)\n 3818      {\n 3819          window->AutoFitFramesX = window->AutoFitFramesY = 2;\n ....\n 3829      }\n 3830  \n 3831:     if (flags & ImGuiWindowFlags_NoBringToFrontOnFocus)\n 3832          g.Windows.insert(g.Windows.begin(), window); // Quite slow but rare and only once\n 3833      else\n ....\n 3836  }\n 3837  \n 3838: static void ApplySizeFullWithConstraint(ImGuiWindow* window, ImVec2 new_size)\n 3839  {\n 3840:     ImGuiContext& g = *GImGui;\n 3841      if (g.SetNextWindowSizeConstraint)\n 3842      {\n ....\n 3847          if (g.SetNextWindowSizeConstraintCallback)\n 3848          {\n 3849:             ImGuiSizeConstraintCallbackData data;\n 3850              data.UserData = g.SetNextWindowSizeConstraintCallbackUserData;\n 3851              data.Pos = window->Pos;\n ....\n 3856          }\n 3857      }\n 3858:     if (!(window->Flags & (ImGuiWindowFlags_ChildWindow | ImGuiWindowFlags_AlwaysAutoResize)))\n 3859          new_size = ImMax(new_size, g.Style.WindowMinSize);\n 3860      window->SizeFull = new_size;\n 3861  }\n 3862  \n 3863: // Push a new ImGui window to add widgets to.\n 3864  // - A default window called \"Debug\" is automatically stacked at the beginning of every frame so you can use widgets without explicitly calling a Begin/End pair.\n 3865  // - Begin/End can be called multiple times during the frame with the same window name to append content.\n ....\n 3867  // - The window name is used as a unique identifier to preserve window information across frames (and save rudimentary information to the .ini file).\n 3868  //   You can use the \"##\" or \"###\" markers to use the same label with different id, or same id with different label. See documentation at the top of this file.\n 3869: // - Return false when window is collapsed, so you can early out in your code. You always need to call ImGui::End() even if false is returned.\n 3870  // - Passing 'bool* p_open' displays a Close button on the upper-right corner of the window, the pointed value will be set to false when the button is pressed.\n 3871: // - Passing non-zero 'size' is roughly equivalent to calling SetNextWindowSize(size, ImGuiSetCond_FirstUseEver) prior to calling Begin().\n 3872: bool ImGui::Begin(const char* name, bool* p_open, ImGuiWindowFlags flags)\n 3873  {\n 3874:     return ImGui::Begin(name, p_open, ImVec2(0.f, 0.f), -1.0f, flags);\n 3875  }\n 3876  \n 3877: bool ImGui::Begin(const char* name, bool* p_open, const ImVec2& size_on_first_use, float bg_alpha, ImGuiWindowFlags flags)\n 3878  {\n 3879:     ImGuiContext& g = *GImGui;\n 3880:     const ImGuiStyle& style = g.Style;\n 3881      IM_ASSERT(name != NULL);                        // Window name required\n 3882:     IM_ASSERT(g.Initialized);                       // Forgot to call ImGui::NewFrame()\n 3883:     IM_ASSERT(g.FrameCountEnded != g.FrameCount);   // Called ImGui::Render() or ImGui::EndFrame() and haven't called ImGui::NewFrame() again yet\n 3884  \n 3885:     if (flags & ImGuiWindowFlags_NoInputs)\n 3886:         flags |= ImGuiWindowFlags_NoMove | ImGuiWindowFlags_NoResize;\n 3887  \n 3888      // Find or create\n 3889      bool window_is_new = false;\n 3890:     ImGuiWindow* window = FindWindowByName(name);\n 3891      if (!window)\n 3892      {\n ....\n 3895      }\n 3896  \n 3897:     const int current_frame = ImGui::GetFrameCount();\n 3898      const bool first_begin_of_the_frame = (window->LastFrameActive != current_frame);\n 3899      if (first_begin_of_the_frame)\n 3900:         window->Flags = (ImGuiWindowFlags)flags;\n 3901      else\n 3902          flags = window->Flags;\n 3903  \n 3904      // Add to stack\n 3905:     ImGuiWindow* parent_window = !g.CurrentWindowStack.empty() ? g.CurrentWindowStack.back() : NULL;\n 3906      g.CurrentWindowStack.push_back(window);\n 3907      SetCurrentWindow(window);\n 3908      CheckStacksSize(window, true);\n 3909:     IM_ASSERT(parent_window != NULL || !(flags & ImGuiWindowFlags_ChildWindow));\n 3910  \n 3911      bool window_was_active = (window->LastFrameActive == current_frame - 1);   // Not using !WasActive because the implicit \"Debug\" window would always toggle off->on\n 3912:     if (flags & ImGuiWindowFlags_Popup)\n 3913      {\n 3914:         ImGuiPopupRef& popup_ref = g.OpenPopupStack[g.CurrentPopupStack.Size];\n 3915          window_was_active &= (window->PopupId == popup_ref.PopupId);\n 3916          window_was_active &= (window == popup_ref.Window);\n ....\n 3927      {\n 3928          const ImVec2 backup_cursor_pos = window->DC.CursorPos;                  // FIXME: not sure of the exact reason of this saving/restore anymore :( need to look into that.\n 3929:         if (!window_was_active || window_appearing_after_being_hidden) window->SetWindowPosAllowFlags |= ImGuiSetCond_Appearing;\n 3930          window_pos_set_by_api = (window->SetWindowPosAllowFlags & g.SetNextWindowPosCond) != 0;\n 3931          if (window_pos_set_by_api && ImLengthSqr(g.SetNextWindowPosVal - ImVec2(-FLT_MAX,-FLT_MAX)) < 0.001f)\n 3932          {\n 3933              window->SetWindowPosCenterWanted = true;                            // May be processed on the next frame if this is our first frame and we are measuring size\n 3934:             window->SetWindowPosAllowFlags &= ~(ImGuiSetCond_Once | ImGuiSetCond_FirstUseEver | ImGuiSetCond_Appearing);\n 3935          }\n 3936          else\n ....\n 3943      if (g.SetNextWindowSizeCond)\n 3944      {\n 3945:         if (!window_was_active || window_appearing_after_being_hidden) window->SetWindowSizeAllowFlags |= ImGuiSetCond_Appearing;\n 3946          window_size_set_by_api = (window->SetWindowSizeAllowFlags & g.SetNextWindowSizeCond) != 0;\n 3947          SetWindowSize(window, g.SetNextWindowSizeVal, g.SetNextWindowSizeCond);\n ....\n 3959      if (g.SetNextWindowCollapsedCond)\n 3960      {\n 3961:         if (!window_was_active || window_appearing_after_being_hidden) window->SetWindowCollapsedAllowFlags |= ImGuiSetCond_Appearing;\n 3962          SetWindowCollapsed(window, g.SetNextWindowCollapsedVal, g.SetNextWindowCollapsedCond);\n 3963          g.SetNextWindowCollapsedCond = 0;\n ....\n 3965      if (g.SetNextWindowFocus)\n 3966      {\n 3967:         ImGui::SetWindowFocus();\n 3968          g.SetNextWindowFocus = false;\n 3969      }\n ....\n 3972      int root_idx, root_non_popup_idx;\n 3973      for (root_idx = g.CurrentWindowStack.Size - 1; root_idx > 0; root_idx--)\n 3974:         if (!(g.CurrentWindowStack[root_idx]->Flags & ImGuiWindowFlags_ChildWindow))\n 3975              break;\n 3976      for (root_non_popup_idx = root_idx; root_non_popup_idx > 0; root_non_popup_idx--)\n 3977:         if (!(g.CurrentWindowStack[root_non_popup_idx]->Flags & (ImGuiWindowFlags_ChildWindow | ImGuiWindowFlags_Popup)))\n 3978              break;\n 3979      window->ParentWindow = parent_window;\n ....\n 3995          window->DrawList->PushTextureID(g.Font->ContainerAtlas->TexID);\n 3996          ImRect fullscreen_rect(GetVisibleRect());\n 3997:         if ((flags & ImGuiWindowFlags_ChildWindow) && !(flags & (ImGuiWindowFlags_ComboBox|ImGuiWindowFlags_Popup)))\n 3998              PushClipRect(parent_window->ClipRect.Min, parent_window->ClipRect.Max, true);\n 3999          else\n ....\n 4004              // Popup first latch mouse position, will position itself when it appears next frame\n 4005              window->AutoPosLastDirection = -1;\n 4006:             if ((flags & ImGuiWindowFlags_Popup) != 0 && !window_pos_set_by_api)\n 4007                  window->PosFloat = g.IO.MousePos;\n 4008          }\n ....\n 4010          // Collapse window by double-clicking on title bar\n 4011          // At this point we don't have a clipping rectangle setup yet, so we can use the title bar area for hit detection and drawing\n 4012:         if (!(flags & ImGuiWindowFlags_NoTitleBar) && !(flags & ImGuiWindowFlags_NoCollapse))\n 4013          {\n 4014              ImRect title_bar_rect = window->TitleBarRect();\n ....\n 4016              {\n 4017                  window->Collapsed = !window->Collapsed;\n 4018:                 if (!(flags & ImGuiWindowFlags_NoSavedSettings))\n 4019                      MarkIniSettingsDirty();\n 4020                  FocusWindow(window);\n ....\n 4035          if (window->HiddenFrames > 0)\n 4036              window->HiddenFrames--;\n 4037:         if ((flags & (ImGuiWindowFlags_Popup | ImGuiWindowFlags_Tooltip)) != 0 && !window_was_active)\n 4038          {\n 4039              window->HiddenFrames = 1;\n 4040:             if (flags & ImGuiWindowFlags_AlwaysAutoResize)\n 4041              {\n 4042                  if (!window_size_set_by_api)\n ....\n 4047  \n 4048          // Lock window padding so that altering the ShowBorders flag for children doesn't have side-effects.\n 4049:         window->WindowPadding = ((flags & ImGuiWindowFlags_ChildWindow) && !(flags & (ImGuiWindowFlags_AlwaysUseWindowPadding | ImGuiWindowFlags_ShowBorders | ImGuiWindowFlags_ComboBox | ImGuiWindowFlags_Popup))) ? ImVec2(0,0) : style.WindowPadding;\n 4050  \n 4051          // Calculate auto-fit size\n 4052          ImVec2 size_auto_fit;\n 4053:         if ((flags & ImGuiWindowFlags_Tooltip) != 0)\n 4054          {\n 4055              // Tooltip always resize. We keep the spacing symmetric on both axises for aesthetic purpose.\n ....\n 4061  \n 4062              // Handling case of auto fit window not fitting in screen on one axis, we are growing auto fit size on the other axis to compensate for expected scrollbar. FIXME: Might turn bigger than DisplaySize-WindowPadding.\n 4063:             if (size_auto_fit.x < window->SizeContents.x && !(flags & ImGuiWindowFlags_NoScrollbar) && (flags & ImGuiWindowFlags_HorizontalScrollbar))\n 4064                  size_auto_fit.y += style.ScrollbarSize;\n 4065:             if (size_auto_fit.y < window->SizeContents.y && !(flags & ImGuiWindowFlags_NoScrollbar))\n 4066                  size_auto_fit.x += style.ScrollbarSize;\n 4067              size_auto_fit.y = ImMax(size_auto_fit.y - style.ItemSpacing.y, 0.0f);\n ....\n 4072          {\n 4073              // We still process initial auto-fit on collapsed windows to get a window width,\n 4074:             // But otherwise we don't honor ImGuiWindowFlags_AlwaysAutoResize when collapsed.\n 4075              if (window->AutoFitFramesX > 0)\n 4076                  window->SizeFull.x = window->AutoFitOnlyGrows ? ImMax(window->SizeFull.x, size_auto_fit.x) : size_auto_fit.x;\n ....\n 4080          else\n 4081          {\n 4082:             if ((flags & ImGuiWindowFlags_AlwaysAutoResize) && !window_size_set_by_api)\n 4083              {\n 4084                  window->SizeFull = size_auto_fit;\n ....\n 4091                  if (window->AutoFitFramesY > 0)\n 4092                      window->SizeFull.y = window->AutoFitOnlyGrows ? ImMax(window->SizeFull.y, size_auto_fit.y) : size_auto_fit.y;\n 4093:                 if (!(flags & ImGuiWindowFlags_NoSavedSettings))\n 4094                      MarkIniSettingsDirty();\n 4095              }\n ....\n 4103  \n 4104          // Position child window\n 4105:         if (flags & ImGuiWindowFlags_ChildWindow)\n 4106          {\n 4107              window->IndexWithinParent = parent_window->DC.ChildWindows.Size;\n 4108              parent_window->DC.ChildWindows.push_back(window);\n 4109          }\n 4110:         if ((flags & ImGuiWindowFlags_ChildWindow) && !(flags & ImGuiWindowFlags_Popup))\n 4111          {\n 4112              window->Pos = window->PosFloat = parent_window->DC.CursorPos;\n ....\n 4116          bool window_pos_center = false;\n 4117          window_pos_center |= (window->SetWindowPosCenterWanted && window->HiddenFrames == 0);\n 4118:         window_pos_center |= ((flags & ImGuiWindowFlags_Modal) && !window_pos_set_by_api && window_appearing_after_being_hidden);\n 4119          if (window_pos_center)\n 4120          {\n ....\n 4122              SetWindowPos(window, ImMax(style.DisplaySafeAreaPadding, fullscreen_rect.GetCenter() - window->SizeFull * 0.5f), 0);\n 4123          }\n 4124:         else if (flags & ImGuiWindowFlags_ChildMenu)\n 4125          {\n 4126              // Child menus typically request _any_ position within the parent menu item, and then our FindBestPopupWindowPos() function will move the new menu outside the parent bounds.\n ....\n 4135              window->PosFloat = FindBestPopupWindowPos(window->PosFloat, window->Size, &window->AutoPosLastDirection, rect_to_avoid);\n 4136          }\n 4137:         else if ((flags & ImGuiWindowFlags_Popup) != 0 && !window_pos_set_by_api && window_appearing_after_being_hidden)\n 4138          {\n 4139              ImRect rect_to_avoid(window->PosFloat.x - 1, window->PosFloat.y - 1, window->PosFloat.x + 1, window->PosFloat.y + 1);\n ....\n 4142  \n 4143          // Position tooltip (always follows mouse)\n 4144:         if ((flags & ImGuiWindowFlags_Tooltip) != 0 && !window_pos_set_by_api)\n 4145          {\n 4146              ImRect rect_to_avoid(g.IO.MousePos.x - 16, g.IO.MousePos.y - 8, g.IO.MousePos.x + 24, g.IO.MousePos.y + 24); // FIXME: Completely hard-coded. Perhaps center on cursor hit-point instead?\n ....\n 4151  \n 4152          // Clamp position so it stays visible\n 4153:         if (!(flags & ImGuiWindowFlags_ChildWindow) && !(flags & ImGuiWindowFlags_Tooltip))\n 4154          {\n 4155              if (!window_pos_set_by_api && window->AutoFitFramesX <= 0 && window->AutoFitFramesY <= 0 && g.IO.DisplaySize.x > 0.0f && g.IO.DisplaySize.y > 0.0f) // Ignore zero-sized display explicitly to avoid losing positions if a window manager reports zero-sized window when initializing or minimizing.\n ....\n 4163  \n 4164          // Default item width. Make it proportional to window size if window manually resizes\n 4165:         if (window->Size.x > 0.0f && !(flags & ImGuiWindowFlags_Tooltip) && !(flags & ImGuiWindowFlags_AlwaysAutoResize))\n 4166              window->ItemWidthDefault = (float)(int)(window->Size.x * 0.65f);\n 4167          else\n ....\n 4191  \n 4192          // Modal window darkens what is behind them\n 4193:         if ((flags & ImGuiWindowFlags_Modal) != 0 && window == GetFrontMostModalRootWindow())\n 4194:             window->DrawList->AddRectFilled(fullscreen_rect.Min, fullscreen_rect.Max, GetColorU32(ImGuiCol_ModalWindowDarkening, g.ModalWindowDarkeningRatio));\n 4195  \n 4196          // Draw window + handle manual resize\n 4197          ImRect title_bar_rect = window->TitleBarRect();\n 4198:         const float window_rounding = (flags & ImGuiWindowFlags_ChildWindow) ? style.ChildWindowRounding : style.WindowRounding;\n 4199          if (window->Collapsed)\n 4200          {\n 4201              // Draw title bar only\n 4202:             RenderFrame(title_bar_rect.GetTL(), title_bar_rect.GetBR(),  GetColorU32(ImGuiCol_TitleBgCollapsed), true, window_rounding);\n 4203          }\n 4204          else\n ....\n 4206              ImU32 resize_col = 0;\n 4207              const float resize_corner_size = ImMax(g.FontSize * 1.35f, window_rounding + 1.0f + g.FontSize * 0.2f);\n 4208:             if (!(flags & ImGuiWindowFlags_AlwaysAutoResize) && window->AutoFitFramesX <= 0 && window->AutoFitFramesY <= 0 && !(flags & ImGuiWindowFlags_NoResize))\n 4209              {\n 4210                  // Manual resize\n 4211                  const ImVec2 br = window->Rect().GetBR();\n 4212                  const ImRect resize_rect(br - ImVec2(resize_corner_size * 0.75f, resize_corner_size * 0.75f), br);\n 4213:                 const ImGuiID resize_id = window->GetID(\"#RESIZE\");\n 4214                  bool hovered, held;\n 4215:                 ButtonBehavior(resize_rect, resize_id, &hovered, &held, ImGuiButtonFlags_FlattenChilds);\n 4216:                 resize_col = GetColorU32(held ? ImGuiCol_ResizeGripActive : hovered ? ImGuiCol_ResizeGripHovered : ImGuiCol_ResizeGrip);\n 4217  \n 4218                  if (hovered || held)\n 4219:                     g.MouseCursor = ImGuiMouseCursor_ResizeNWSE;\n 4220  \n 4221                  if (g.HoveredWindow == window && held && g.IO.MouseDoubleClicked[0])\n ....\n 4223                      // Manual auto-fit when double-clicking\n 4224                      ApplySizeFullWithConstraint(window, size_auto_fit);\n 4225:                     if (!(flags & ImGuiWindowFlags_NoSavedSettings))\n 4226                          MarkIniSettingsDirty();\n 4227                      ClearActiveID();\n ....\n 4231                      // We don't use an incremental MouseDelta but rather compute an absolute target size based on mouse position\n 4232                      ApplySizeFullWithConstraint(window, (g.IO.MousePos - g.ActiveIdClickOffset + resize_rect.GetSize()) - window->Pos);\n 4233:                     if (!(flags & ImGuiWindowFlags_NoSavedSettings))\n 4234                          MarkIniSettingsDirty();\n 4235                  }\n ....\n 4240  \n 4241              // Scrollbars\n 4242:             window->ScrollbarY = (flags & ImGuiWindowFlags_AlwaysVerticalScrollbar) || ((window->SizeContents.y > window->Size.y + style.ItemSpacing.y) && !(flags & ImGuiWindowFlags_NoScrollbar));\n 4243:             window->ScrollbarX = (flags & ImGuiWindowFlags_AlwaysHorizontalScrollbar) || ((window->SizeContents.x > window->Size.x - (window->ScrollbarY ? style.ScrollbarSize : 0.0f) - window->WindowPadding.x) && !(flags & ImGuiWindowFlags_NoScrollbar) && (flags & ImGuiWindowFlags_HorizontalScrollbar));\n 4244              window->ScrollbarSizes = ImVec2(window->ScrollbarY ? style.ScrollbarSize : 0.0f, window->ScrollbarX ? style.ScrollbarSize : 0.0f);\n 4245:             window->BorderSize = (flags & ImGuiWindowFlags_ShowBorders) ? 1.0f : 0.0f;\n 4246  \n 4247              // Window background, Default Alpha\n 4248:             ImGuiCol bg_color_idx = ImGuiCol_WindowBg;\n 4249:             if ((flags & ImGuiWindowFlags_ComboBox) != 0)\n 4250:                 bg_color_idx = ImGuiCol_ComboBg;\n 4251:             else if ((flags & ImGuiWindowFlags_Tooltip) != 0 || (flags & ImGuiWindowFlags_Popup) != 0)\n 4252:                 bg_color_idx = ImGuiCol_PopupBg;\n 4253:             else if ((flags & ImGuiWindowFlags_ChildWindow) != 0)\n 4254:                 bg_color_idx = ImGuiCol_ChildWindowBg;\n 4255              ImVec4 bg_color = style.Colors[bg_color_idx];\n 4256              if (bg_alpha >= 0.0f)\n ....\n 4258              bg_color.w *= style.Alpha;\n 4259              if (bg_color.w > 0.0f)\n 4260:                 window->DrawList->AddRectFilled(window->Pos+ImVec2(0,window->TitleBarHeight()), window->Pos+window->Size, ColorConvertFloat4ToU32(bg_color), window_rounding, (flags & ImGuiWindowFlags_NoTitleBar) ? ImGuiCorner_All : ImGuiCorner_BottomLeft|ImGuiCorner_BottomRight);\n 4261  \n 4262              // Title bar\n 4263:             if (!(flags & ImGuiWindowFlags_NoTitleBar))\n 4264:                 window->DrawList->AddRectFilled(title_bar_rect.GetTL(), title_bar_rect.GetBR(), GetColorU32((g.FocusedWindow && window->RootNonPopupWindow == g.FocusedWindow->RootNonPopupWindow) ? ImGuiCol_TitleBgActive : ImGuiCol_TitleBg), window_rounding, ImGuiCorner_TopLeft|ImGuiCorner_TopRight);\n 4265  \n 4266              // Menu bar\n 4267:             if (flags & ImGuiWindowFlags_MenuBar)\n 4268              {\n 4269                  ImRect menu_bar_rect = window->MenuBarRect();\n 4270:                 if (flags & ImGuiWindowFlags_ShowBorders)\n 4271:                     window->DrawList->AddLine(menu_bar_rect.GetBL(), menu_bar_rect.GetBR(), GetColorU32(ImGuiCol_Border));\n 4272:                 window->DrawList->AddRectFilled(menu_bar_rect.GetTL(), menu_bar_rect.GetBR(), GetColorU32(ImGuiCol_MenuBarBg), (flags & ImGuiWindowFlags_NoTitleBar) ? window_rounding : 0.0f, ImGuiCorner_TopLeft|ImGuiCorner_TopRight);\n 4273              }\n 4274  \n ....\n 4281              // Render resize grip\n 4282              // (after the input handling so we don't have a frame of latency)\n 4283:             if (!(flags & ImGuiWindowFlags_NoResize))\n 4284              {\n 4285                  const ImVec2 br = window->Rect().GetBR();\n ....\n 4291  \n 4292              // Borders\n 4293:             if (flags & ImGuiWindowFlags_ShowBorders)\n 4294              {\n 4295:                 window->DrawList->AddRect(window->Pos+ImVec2(1,1), window->Pos+window->Size+ImVec2(1,1), GetColorU32(ImGuiCol_BorderShadow), window_rounding);\n 4296:                 window->DrawList->AddRect(window->Pos, window->Pos+window->Size, GetColorU32(ImGuiCol_Border), window_rounding);\n 4297:                 if (!(flags & ImGuiWindowFlags_NoTitleBar))\n 4298:                     window->DrawList->AddLine(title_bar_rect.GetBL()+ImVec2(1,0), title_bar_rect.GetBR()-ImVec2(1,0), GetColorU32(ImGuiCol_Border));\n 4299              }\n 4300          }\n ....\n 4320          window->DC.LogLinePosY = window->DC.CursorPos.y - 9999.0f;\n 4321          window->DC.ChildWindows.resize(0);\n 4322:         window->DC.LayoutType = ImGuiLayoutType_Vertical;\n 4323          window->DC.ItemWidth = window->ItemWidthDefault;\n 4324          window->DC.TextWrapPos = -1.0f; // disabled\n ....\n 4336          window->DC.StateStorage = &window->StateStorage;\n 4337          window->DC.GroupStack.resize(0);\n 4338:         window->DC.ColorEditMode = ImGuiColorEditMode_UserSelect;\n 4339          window->MenuColumns.Update(3, style.ItemSpacing.x, !window_was_active);\n 4340  \n ....\n 4345  \n 4346          // New windows appears in front (we need to do that AFTER setting DC.CursorStartPos so our initial navigation reference rectangle can start around there)\n 4347:         if (!window_was_active && !(flags & ImGuiWindowFlags_NoFocusOnAppearing))\n 4348:             if (!(flags & (ImGuiWindowFlags_ChildWindow|ImGuiWindowFlags_Tooltip)) || (flags & ImGuiWindowFlags_Popup))\n 4349                  FocusWindow(window);\n 4350  \n 4351          // Title bar\n 4352:         if (!(flags & ImGuiWindowFlags_NoTitleBar))\n 4353          {\n 4354              if (p_open != NULL)\n ....\n 4361  \n 4362              const ImVec2 text_size = CalcTextSize(name, NULL, true);\n 4363:             if (!(flags & ImGuiWindowFlags_NoCollapse))\n 4364                  RenderCollapseTriangle(window->Pos + style.FramePadding, !window->Collapsed, 1.0f);\n 4365  \n ....\n 4368              ImRect clip_rect;\n 4369              clip_rect.Max = ImVec2(window->Pos.x + window->Size.x - (p_open ? title_bar_rect.GetHeight() - 3 : style.FramePadding.x), text_max.y); // Match the size of CloseWindowButton()\n 4370:             float pad_left = (flags & ImGuiWindowFlags_NoCollapse) == 0 ? (style.FramePadding.x + g.FontSize + style.ItemInnerSpacing.x) : style.FramePadding.x;\n 4371              float pad_right = (p_open != NULL) ? (style.FramePadding.x + g.FontSize + style.ItemInnerSpacing.x) : style.FramePadding.x;\n 4372              if (style.WindowTitleAlign.x > 0.0f) pad_right = ImLerp(pad_right, pad_left, style.WindowTitleAlign.x);\n ....\n 4386          /*\n 4387          if (g.ActiveId == move_id)\n 4388:             if (g.IO.KeyCtrl && IsKeyPressedMap(ImGuiKey_C))\n 4389:                 ImGui::LogToClipboard();\n 4390          */\n 4391      }\n ....\n 4411      // Child window can be out of sight and have \"negative\" clip windows.\n 4412      // Mark them as collapsed so commands are skipped earlier (we can't manually collapse because they have no title bar).\n 4413:     if (flags & ImGuiWindowFlags_ChildWindow)\n 4414      {\n 4415:         IM_ASSERT((flags & ImGuiWindowFlags_NoTitleBar) != 0);\n 4416          window->Collapsed = parent_window && parent_window->Collapsed;\n 4417  \n 4418:         if (!(flags & ImGuiWindowFlags_AlwaysAutoResize) && window->AutoFitFramesX <= 0 && window->AutoFitFramesY <= 0)\n 4419              window->Collapsed |= (window->WindowRectClipped.Min.x >= window->WindowRectClipped.Max.x || window->WindowRectClipped.Min.y >= window->WindowRectClipped.Max.y);\n 4420  \n ....\n 4432  }\n 4433  \n 4434: void ImGui::End()\n 4435  {\n 4436:     ImGuiContext& g = *GImGui;\n 4437:     ImGuiWindow* window = g.CurrentWindow;\n 4438  \n 4439      if (window->DC.ColumnsCount != 1) // close columns set if any is open\n ....\n 4442  \n 4443      // Stop logging\n 4444:     if (!(window->Flags & ImGuiWindowFlags_ChildWindow))    // FIXME: add more options for scope of logging\n 4445          LogFinish();\n 4446  \n ....\n 4448      // NB: we don't clear 'window->RootWindow'. The pointer is allowed to live until the next call to Begin().\n 4449      g.CurrentWindowStack.pop_back();\n 4450:     if (window->Flags & ImGuiWindowFlags_Popup)\n 4451          g.CurrentPopupStack.pop_back();\n 4452      CheckStacksSize(window, false);\n ....\n 4459  // - We store values as normalized ratio and in a form that allows the window content to change while we are holding on a scrollbar\n 4460  // - We handle both horizontal and vertical scrollbars, which makes the terminology not ideal.\n 4461: static void Scrollbar(ImGuiWindow* window, bool horizontal)\n 4462  {\n 4463:     ImGuiContext& g = *GImGui;\n 4464:     const ImGuiStyle& style = g.Style;\n 4465:     const ImGuiID id = window->GetID(horizontal ? \"#SCROLLX\" : \"#SCROLLY\");\n 4466  \n 4467      // Render background\n ....\n 4474          : ImRect(window_rect.Max.x - style.ScrollbarSize, window->Pos.y + border_size, window_rect.Max.x - border_size, window_rect.Max.y - other_scrollbar_size_w - border_size);\n 4475      if (!horizontal)\n 4476:         bb.Min.y += window->TitleBarHeight() + ((window->Flags & ImGuiWindowFlags_MenuBar) ? window->MenuBarHeight() : 0.0f);\n 4477  \n 4478:     float window_rounding = (window->Flags & ImGuiWindowFlags_ChildWindow) ? style.ChildWindowRounding : style.WindowRounding;\n 4479      int window_rounding_corners;\n 4480      if (horizontal)\n 4481:         window_rounding_corners = ImGuiCorner_BottomLeft | (other_scrollbar ? 0 : ImGuiCorner_BottomRight);\n 4482      else\n 4483:         window_rounding_corners = (((window->Flags & ImGuiWindowFlags_NoTitleBar) && !(window->Flags & ImGuiWindowFlags_MenuBar)) ? ImGuiCorner_TopRight : 0) | (other_scrollbar ? 0 : ImGuiCorner_BottomRight);\n 4484:     window->DrawList->AddRectFilled(bb.Min, bb.Max, ImGui::GetColorU32(ImGuiCol_ScrollbarBg), window_rounding, window_rounding_corners);\n 4485      bb.Reduce(ImVec2(ImClamp((float)(int)((bb.Max.x - bb.Min.x - 2.0f) * 0.5f), 0.0f, 3.0f), ImClamp((float)(int)((bb.Max.y - bb.Min.y - 2.0f) * 0.5f), 0.0f, 3.0f)));\n 4486  \n ....\n 4500      bool hovered = false;\n 4501      const bool previously_held = (g.ActiveId == id);\n 4502:     ImGui::ButtonBehavior(bb, id, &hovered, &held);\n 4503  \n 4504      float scroll_max = ImMax(1.0f, win_size_contents_v - win_size_avail_v);\n ....\n 4513          // Click position in scrollbar normalized space (0.0f->1.0f)\n 4514          const float clicked_v_norm = ImSaturate((mouse_pos_v - scrollbar_pos_v) / scrollbar_size_v);\n 4515:         ImGui::SetHoveredID(id);\n 4516  \n 4517          bool seek_absolute = false;\n ....\n 4549  \n 4550      // Render\n 4551:     const ImU32 grab_col = ImGui::GetColorU32(held ? ImGuiCol_ScrollbarGrabActive : hovered ? ImGuiCol_ScrollbarGrabHovered : ImGuiCol_ScrollbarGrab);\n 4552      if (horizontal)\n 4553          window->DrawList->AddRectFilled(ImVec2(ImLerp(bb.Min.x, bb.Max.x, grab_v_norm), bb.Min.y), ImVec2(ImLerp(bb.Min.x, bb.Max.x, grab_v_norm) + grab_h_pixels, bb.Max.y), grab_col, style.ScrollbarRounding);\n ....\n 4557  \n 4558  // Moving window to front of display (which happens to be back of our sorted list)\n 4559: void ImGui::FocusWindow(ImGuiWindow* window)\n 4560  {\n 4561:     ImGuiContext& g = *GImGui;\n 4562  \n 4563      // Always mark the window we passed as focused. This is used for keyboard interactions such as tabbing.\n ....\n 4573  \n 4574      // Steal focus on active widgets\n 4575:     if (window->Flags & ImGuiWindowFlags_Popup) // FIXME: This statement should be unnecessary. Need further testing before removing it..\n 4576          if (g.ActiveId != 0 && g.ActiveIdWindow && g.ActiveIdWindow->RootWindow != window)\n 4577              ClearActiveID();\n 4578  \n 4579      // Bring to front\n 4580:     if ((window->Flags & ImGuiWindowFlags_NoBringToFrontOnFocus) || g.Windows.back() == window)\n 4581          return;\n 4582      for (int i = 0; i < g.Windows.Size; i++)\n ....\n 4589  }\n 4590  \n 4591: void ImGui::PushItemWidth(float item_width)\n 4592  {\n 4593:     ImGuiWindow* window = GetCurrentWindow();\n 4594      window->DC.ItemWidth = (item_width == 0.0f ? window->ItemWidthDefault : item_width);\n 4595      window->DC.ItemWidthStack.push_back(window->DC.ItemWidth);\n ....\n 4598  static void PushMultiItemsWidths(int components, float w_full)\n 4599  {\n 4600:     ImGuiWindow* window = ImGui::GetCurrentWindow();\n 4601:     const ImGuiStyle& style = GImGui->Style;\n 4602      if (w_full <= 0.0f)\n 4603:         w_full = ImGui::CalcItemWidth();\n 4604      const float w_item_one  = ImMax(1.0f, (float)(int)((w_full - (style.ItemInnerSpacing.x) * (components-1)) / (float)components));\n 4605      const float w_item_last = ImMax(1.0f, (float)(int)(w_full - (w_item_one + style.ItemInnerSpacing.x) * (components-1)));\n ....\n 4610  }\n 4611  \n 4612: void ImGui::PopItemWidth()\n 4613  {\n 4614:     ImGuiWindow* window = GetCurrentWindow();\n 4615      window->DC.ItemWidthStack.pop_back();\n 4616      window->DC.ItemWidth = window->DC.ItemWidthStack.empty() ? window->ItemWidthDefault : window->DC.ItemWidthStack.back();\n 4617  }\n 4618  \n 4619: float ImGui::CalcItemWidth()\n 4620  {\n 4621:     ImGuiWindow* window = GetCurrentWindowRead();\n 4622      float w = window->DC.ItemWidth;\n 4623      if (w < 0.0f)\n ....\n 4633  static ImFont* GetDefaultFont()\n 4634  {\n 4635:     ImGuiContext& g = *GImGui;\n 4636      return g.IO.FontDefault ? g.IO.FontDefault : g.IO.Fonts->Fonts[0];\n 4637  }\n ....\n 4639  static void SetCurrentFont(ImFont* font)\n 4640  {\n 4641:     ImGuiContext& g = *GImGui;\n 4642      IM_ASSERT(font && font->IsLoaded());    // Font Atlas not created. Did you call io.Fonts->GetTexDataAsRGBA32 / GetTexDataAsAlpha8 ?\n 4643      IM_ASSERT(font->Scale > 0.0f);\n ....\n 4648  }\n 4649  \n 4650: void ImGui::PushFont(ImFont* font)\n 4651  {\n 4652:     ImGuiContext& g = *GImGui;\n 4653      if (!font)\n 4654          font = GetDefaultFont();\n ....\n 4658  }\n 4659  \n 4660: void  ImGui::PopFont()\n 4661  {\n 4662:     ImGuiContext& g = *GImGui;\n 4663      g.CurrentWindow->DrawList->PopTextureID();\n 4664      g.FontStack.pop_back();\n ....\n 4666  }\n 4667  \n 4668: void ImGui::PushAllowKeyboardFocus(bool allow_keyboard_focus)\n 4669  {\n 4670:     ImGuiWindow* window = GetCurrentWindow();\n 4671      window->DC.AllowKeyboardFocus = allow_keyboard_focus;\n 4672      window->DC.AllowKeyboardFocusStack.push_back(allow_keyboard_focus);\n 4673  }\n 4674  \n 4675: void ImGui::PopAllowKeyboardFocus()\n 4676  {\n 4677:     ImGuiWindow* window = GetCurrentWindow();\n 4678      window->DC.AllowKeyboardFocusStack.pop_back();\n 4679      window->DC.AllowKeyboardFocus = window->DC.AllowKeyboardFocusStack.empty() ? true : window->DC.AllowKeyboardFocusStack.back();\n 4680  }\n 4681  \n 4682: void ImGui::PushButtonRepeat(bool repeat)\n 4683  {\n 4684:     ImGuiWindow* window = GetCurrentWindow();\n 4685      window->DC.ButtonRepeat = repeat;\n 4686      window->DC.ButtonRepeatStack.push_back(repeat);\n 4687  }\n 4688  \n 4689: void ImGui::PopButtonRepeat()\n 4690  {\n 4691:     ImGuiWindow* window = GetCurrentWindow();\n 4692      window->DC.ButtonRepeatStack.pop_back();\n 4693      window->DC.ButtonRepeat = window->DC.ButtonRepeatStack.empty() ? false : window->DC.ButtonRepeatStack.back();\n 4694  }\n 4695  \n 4696: void ImGui::PushTextWrapPos(float wrap_pos_x)\n 4697  {\n 4698:     ImGuiWindow* window = GetCurrentWindow();\n 4699      window->DC.TextWrapPos = wrap_pos_x;\n 4700      window->DC.TextWrapPosStack.push_back(wrap_pos_x);\n 4701  }\n 4702  \n 4703: void ImGui::PopTextWrapPos()\n 4704  {\n 4705:     ImGuiWindow* window = GetCurrentWindow();\n 4706      window->DC.TextWrapPosStack.pop_back();\n 4707      window->DC.TextWrapPos = window->DC.TextWrapPosStack.empty() ? -1.0f : window->DC.TextWrapPosStack.back();\n 4708  }\n 4709  \n 4710: void ImGui::PushStyleColor(ImGuiCol idx, const ImVec4& col)\n 4711  {\n 4712:     ImGuiContext& g = *GImGui;\n 4713:     ImGuiColMod backup;\n 4714      backup.Col = idx;\n 4715      backup.BackupValue = g.Style.Colors[idx];\n ....\n 4718  }\n 4719  \n 4720: void ImGui::PopStyleColor(int count)\n 4721  {\n 4722:     ImGuiContext& g = *GImGui;\n 4723      while (count > 0)\n 4724      {\n 4725:         ImGuiColMod& backup = g.ColorModifiers.back();\n 4726          g.Style.Colors[backup.Col] = backup.BackupValue;\n 4727          g.ColorModifiers.pop_back();\n ....\n 4730  }\n 4731  \n 4732: struct ImGuiStyleVarInfo\n 4733  {\n 4734:     ImGuiDataType   Type;\n 4735      ImU32           Offset;\n 4736:     void*           GetVarPtr() const { return (void*)((unsigned char*)&GImGui->Style + Offset); }\n 4737  };\n 4738  \n 4739: static const ImGuiStyleVarInfo GStyleVarInfo[ImGuiStyleVar_Count_] =\n 4740  {\n 4741:     { ImGuiDataType_Float,  (ImU32)IM_OFFSETOF(ImGuiStyle, Alpha) },\n 4742:     { ImGuiDataType_Float2, (ImU32)IM_OFFSETOF(ImGuiStyle, WindowPadding) },\n 4743:     { ImGuiDataType_Float,  (ImU32)IM_OFFSETOF(ImGuiStyle, WindowRounding) },\n 4744:     { ImGuiDataType_Float2, (ImU32)IM_OFFSETOF(ImGuiStyle, WindowMinSize) },\n 4745:     { ImGuiDataType_Float,  (ImU32)IM_OFFSETOF(ImGuiStyle, ChildWindowRounding) },\n 4746:     { ImGuiDataType_Float2, (ImU32)IM_OFFSETOF(ImGuiStyle, FramePadding) },\n 4747:     { ImGuiDataType_Float,  (ImU32)IM_OFFSETOF(ImGuiStyle, FrameRounding) },\n 4748:     { ImGuiDataType_Float2, (ImU32)IM_OFFSETOF(ImGuiStyle, ItemSpacing) },\n 4749:     { ImGuiDataType_Float2, (ImU32)IM_OFFSETOF(ImGuiStyle, ItemInnerSpacing) },\n 4750:     { ImGuiDataType_Float,  (ImU32)IM_OFFSETOF(ImGuiStyle, IndentSpacing) },\n 4751:     { ImGuiDataType_Float,  (ImU32)IM_OFFSETOF(ImGuiStyle, GrabMinSize) },\n 4752:     { ImGuiDataType_Float2, (ImU32)IM_OFFSETOF(ImGuiStyle, ButtonTextAlign) },\n 4753  };\n 4754  \n 4755: static const ImGuiStyleVarInfo* GetStyleVarInfo(ImGuiStyleVar idx)\n 4756  {\n 4757:     IM_ASSERT(idx >= 0 && idx < ImGuiStyleVar_Count_);\n 4758      return &GStyleVarInfo[idx];\n 4759  }\n 4760  \n 4761: void ImGui::PushStyleVar(ImGuiStyleVar idx, float val)\n 4762  {\n 4763:     const ImGuiStyleVarInfo* var_info = GetStyleVarInfo(idx);\n 4764:     if (var_info->Type == ImGuiDataType_Float)\n 4765      {\n 4766          float* pvar = (float*)var_info->GetVarPtr();\n 4767:         GImGui->StyleModifiers.push_back(ImGuiStyleMod(idx, *pvar));\n 4768          *pvar = val;\n 4769          return;\n ....\n 4772  }\n 4773  \n 4774: void ImGui::PushStyleVar(ImGuiStyleVar idx, const ImVec2& val)\n 4775  {\n 4776:     const ImGuiStyleVarInfo* var_info = GetStyleVarInfo(idx);\n 4777:     if (var_info->Type == ImGuiDataType_Float2)\n 4778      {\n 4779          ImVec2* pvar = (ImVec2*)var_info->GetVarPtr();\n 4780:         GImGui->StyleModifiers.push_back(ImGuiStyleMod(idx, *pvar));\n 4781          *pvar = val;\n 4782          return;\n ....\n 4785  }\n 4786  \n 4787: void ImGui::PopStyleVar(int count)\n 4788  {\n 4789:     ImGuiContext& g = *GImGui;\n 4790      while (count > 0)\n 4791      {\n 4792:         ImGuiStyleMod& backup = g.StyleModifiers.back();\n 4793:         const ImGuiStyleVarInfo* info = GetStyleVarInfo(backup.VarIdx);\n 4794:         if (info->Type == ImGuiDataType_Float)          (*(float*)info->GetVarPtr()) = backup.BackupFloat[0];\n 4795:         else if (info->Type == ImGuiDataType_Float2)    (*(ImVec2*)info->GetVarPtr()) = ImVec2(backup.BackupFloat[0], backup.BackupFloat[1]);\n 4796:         else if (info->Type == ImGuiDataType_Int)       (*(int*)info->GetVarPtr()) = backup.BackupInt[0];\n 4797          g.StyleModifiers.pop_back();\n 4798          count--;\n ....\n 4800  }\n 4801  \n 4802: const char* ImGui::GetStyleColName(ImGuiCol idx)\n 4803  {\n 4804:     // Create switch-case from enum with regexp: ImGuiCol_{.*}, --> case ImGuiCol_\\1: return \"\\1\";\n 4805      switch (idx)\n 4806      {\n 4807:     case ImGuiCol_Text: return \"Text\";\n 4808:     case ImGuiCol_TextDisabled: return \"TextDisabled\";\n 4809:     case ImGuiCol_WindowBg: return \"WindowBg\";\n 4810:     case ImGuiCol_ChildWindowBg: return \"ChildWindowBg\";\n 4811:     case ImGuiCol_PopupBg: return \"PopupBg\";\n 4812:     case ImGuiCol_Border: return \"Border\";\n 4813:     case ImGuiCol_BorderShadow: return \"BorderShadow\";\n 4814:     case ImGuiCol_FrameBg: return \"FrameBg\";\n 4815:     case ImGuiCol_FrameBgHovered: return \"FrameBgHovered\";\n 4816:     case ImGuiCol_FrameBgActive: return \"FrameBgActive\";\n 4817:     case ImGuiCol_TitleBg: return \"TitleBg\";\n 4818:     case ImGuiCol_TitleBgCollapsed: return \"TitleBgCollapsed\";\n 4819:     case ImGuiCol_TitleBgActive: return \"TitleBgActive\";\n 4820:     case ImGuiCol_MenuBarBg: return \"MenuBarBg\";\n 4821:     case ImGuiCol_ScrollbarBg: return \"ScrollbarBg\";\n 4822:     case ImGuiCol_ScrollbarGrab: return \"ScrollbarGrab\";\n 4823:     case ImGuiCol_ScrollbarGrabHovered: return \"ScrollbarGrabHovered\";\n 4824:     case ImGuiCol_ScrollbarGrabActive: return \"ScrollbarGrabActive\";\n 4825:     case ImGuiCol_ComboBg: return \"ComboBg\";\n 4826:     case ImGuiCol_CheckMark: return \"CheckMark\";\n 4827:     case ImGuiCol_SliderGrab: return \"SliderGrab\";\n 4828:     case ImGuiCol_SliderGrabActive: return \"SliderGrabActive\";\n 4829:     case ImGuiCol_Button: return \"Button\";\n 4830:     case ImGuiCol_ButtonHovered: return \"ButtonHovered\";\n 4831:     case ImGuiCol_ButtonActive: return \"ButtonActive\";\n 4832:     case ImGuiCol_Header: return \"Header\";\n 4833:     case ImGuiCol_HeaderHovered: return \"HeaderHovered\";\n 4834:     case ImGuiCol_HeaderActive: return \"HeaderActive\";\n 4835:     case ImGuiCol_Column: return \"Column\";\n 4836:     case ImGuiCol_ColumnHovered: return \"ColumnHovered\";\n 4837:     case ImGuiCol_ColumnActive: return \"ColumnActive\";\n 4838:     case ImGuiCol_ResizeGrip: return \"ResizeGrip\";\n 4839:     case ImGuiCol_ResizeGripHovered: return \"ResizeGripHovered\";\n 4840:     case ImGuiCol_ResizeGripActive: return \"ResizeGripActive\";\n 4841:     case ImGuiCol_CloseButton: return \"CloseButton\";\n 4842:     case ImGuiCol_CloseButtonHovered: return \"CloseButtonHovered\";\n 4843:     case ImGuiCol_CloseButtonActive: return \"CloseButtonActive\";\n 4844:     case ImGuiCol_PlotLines: return \"PlotLines\";\n 4845:     case ImGuiCol_PlotLinesHovered: return \"PlotLinesHovered\";\n 4846:     case ImGuiCol_PlotHistogram: return \"PlotHistogram\";\n 4847:     case ImGuiCol_PlotHistogramHovered: return \"PlotHistogramHovered\";\n 4848:     case ImGuiCol_TextSelectedBg: return \"TextSelectedBg\";\n 4849:     case ImGuiCol_ModalWindowDarkening: return \"ModalWindowDarkening\";\n 4850      }\n 4851      IM_ASSERT(0);\n ....\n 4853  }\n 4854  \n 4855: bool ImGui::IsWindowHovered()\n 4856  {\n 4857:     ImGuiContext& g = *GImGui;\n 4858      return g.HoveredWindow == g.CurrentWindow && IsWindowContentHoverable(g.HoveredRootWindow);\n 4859  }\n 4860  \n 4861: bool ImGui::IsWindowFocused()\n 4862  {\n 4863:     ImGuiContext& g = *GImGui;\n 4864      return g.FocusedWindow == g.CurrentWindow;\n 4865  }\n 4866  \n 4867: bool ImGui::IsRootWindowFocused()\n 4868  {\n 4869:     ImGuiContext& g = *GImGui;\n 4870      return g.FocusedWindow == g.CurrentWindow->RootWindow;\n 4871  }\n 4872  \n 4873: bool ImGui::IsRootWindowOrAnyChildFocused()\n 4874  {\n 4875:     ImGuiContext& g = *GImGui;\n 4876      return g.FocusedWindow && g.FocusedWindow->RootWindow == g.CurrentWindow->RootWindow;\n 4877  }\n 4878  \n 4879: bool ImGui::IsRootWindowOrAnyChildHovered()\n 4880  {\n 4881:     ImGuiContext& g = *GImGui;\n 4882      return g.HoveredRootWindow && (g.HoveredRootWindow == g.CurrentWindow->RootWindow) && IsWindowContentHoverable(g.HoveredRootWindow);\n 4883  }\n 4884  \n 4885: float ImGui::GetWindowWidth()\n 4886  {\n 4887:     ImGuiWindow* window = GImGui->CurrentWindow;\n 4888      return window->Size.x;\n 4889  }\n 4890  \n 4891: float ImGui::GetWindowHeight()\n 4892  {\n 4893:     ImGuiWindow* window = GImGui->CurrentWindow;\n 4894      return window->Size.y;\n 4895  }\n 4896  \n 4897: ImVec2 ImGui::GetWindowPos()\n 4898  {\n 4899:     ImGuiContext& g = *GImGui;\n 4900:     ImGuiWindow* window = g.CurrentWindow;\n 4901      return window->Pos;\n 4902  }\n 4903  \n 4904: static void SetWindowScrollY(ImGuiWindow* window, float new_scroll_y)\n 4905  {\n 4906      window->DC.CursorMaxPos.y += window->Scroll.y;\n ....\n 4909  }\n 4910  \n 4911: static void SetWindowPos(ImGuiWindow* window, const ImVec2& pos, ImGuiSetCond cond)\n 4912  {\n 4913      // Test condition (NB: bit 0 is always true) and clear flags for next time\n 4914      if (cond && (window->SetWindowPosAllowFlags & cond) == 0)\n 4915          return;\n 4916:     window->SetWindowPosAllowFlags &= ~(ImGuiSetCond_Once | ImGuiSetCond_FirstUseEver | ImGuiSetCond_Appearing);\n 4917      window->SetWindowPosCenterWanted = false;\n 4918  \n ....\n 4925  }\n 4926  \n 4927: void ImGui::SetWindowPos(const ImVec2& pos, ImGuiSetCond cond)\n 4928  {\n 4929:     ImGuiWindow* window = GetCurrentWindowRead();\n 4930      SetWindowPos(window, pos, cond);\n 4931  }\n 4932  \n 4933: void ImGui::SetWindowPos(const char* name, const ImVec2& pos, ImGuiSetCond cond)\n 4934  {\n 4935:     if (ImGuiWindow* window = FindWindowByName(name))\n 4936          SetWindowPos(window, pos, cond);\n 4937  }\n 4938  \n 4939: ImVec2 ImGui::GetWindowSize()\n 4940  {\n 4941:     ImGuiWindow* window = GetCurrentWindowRead();\n 4942      return window->Size;\n 4943  }\n 4944  \n 4945: static void SetWindowSize(ImGuiWindow* window, const ImVec2& size, ImGuiSetCond cond)\n 4946  {\n 4947      // Test condition (NB: bit 0 is always true) and clear flags for next time\n 4948      if (cond && (window->SetWindowSizeAllowFlags & cond) == 0)\n 4949          return;\n 4950:     window->SetWindowSizeAllowFlags &= ~(ImGuiSetCond_Once | ImGuiSetCond_FirstUseEver | ImGuiSetCond_Appearing);\n 4951  \n 4952      // Set\n ....\n 4973  }\n 4974  \n 4975: void ImGui::SetWindowSize(const ImVec2& size, ImGuiSetCond cond)\n 4976  {\n 4977:     SetWindowSize(GImGui->CurrentWindow, size, cond);\n 4978  }\n 4979  \n 4980: void ImGui::SetWindowSize(const char* name, const ImVec2& size, ImGuiSetCond cond)\n 4981  {\n 4982:     ImGuiWindow* window = FindWindowByName(name);\n 4983      if (window)\n 4984          SetWindowSize(window, size, cond);\n 4985  }\n 4986  \n 4987: static void SetWindowCollapsed(ImGuiWindow* window, bool collapsed, ImGuiSetCond cond)\n 4988  {\n 4989      // Test condition (NB: bit 0 is always true) and clear flags for next time\n 4990      if (cond && (window->SetWindowCollapsedAllowFlags & cond) == 0)\n 4991          return;\n 4992:     window->SetWindowCollapsedAllowFlags &= ~(ImGuiSetCond_Once | ImGuiSetCond_FirstUseEver | ImGuiSetCond_Appearing);\n 4993  \n 4994      // Set\n ....\n 4996  }\n 4997  \n 4998: void ImGui::SetWindowCollapsed(bool collapsed, ImGuiSetCond cond)\n 4999  {\n 5000:     SetWindowCollapsed(GImGui->CurrentWindow, collapsed, cond);\n 5001  }\n 5002  \n 5003: bool ImGui::IsWindowCollapsed()\n 5004  {\n 5005:     return GImGui->CurrentWindow->Collapsed;\n 5006  }\n 5007  \n 5008: void ImGui::SetWindowCollapsed(const char* name, bool collapsed, ImGuiSetCond cond)\n 5009  {\n 5010:     ImGuiWindow* window = FindWindowByName(name);\n 5011      if (window)\n 5012          SetWindowCollapsed(window, collapsed, cond);\n 5013  }\n 5014  \n 5015: void ImGui::SetWindowFocus()\n 5016  {\n 5017:     FocusWindow(GImGui->CurrentWindow);\n 5018  }\n 5019  \n 5020: void ImGui::SetWindowFocus(const char* name)\n 5021  {\n 5022      if (name)\n 5023      {\n 5024:         if (ImGuiWindow* window = FindWindowByName(name))\n 5025              FocusWindow(window);\n 5026      }\n ....\n 5031  }\n 5032  \n 5033: void ImGui::SetNextWindowPos(const ImVec2& pos, ImGuiSetCond cond)\n 5034  {\n 5035:     ImGuiContext& g = *GImGui;\n 5036      g.SetNextWindowPosVal = pos;\n 5037:     g.SetNextWindowPosCond = cond ? cond : ImGuiSetCond_Always;\n 5038  }\n 5039  \n 5040: void ImGui::SetNextWindowPosCenter(ImGuiSetCond cond)\n 5041  {\n 5042:     ImGuiContext& g = *GImGui;\n 5043      g.SetNextWindowPosVal = ImVec2(-FLT_MAX, -FLT_MAX);\n 5044:     g.SetNextWindowPosCond = cond ? cond : ImGuiSetCond_Always;\n 5045  }\n 5046  \n 5047: void ImGui::SetNextWindowSize(const ImVec2& size, ImGuiSetCond cond)\n 5048  {\n 5049:     ImGuiContext& g = *GImGui;\n 5050      g.SetNextWindowSizeVal = size;\n 5051:     g.SetNextWindowSizeCond = cond ? cond : ImGuiSetCond_Always;\n 5052  }\n 5053  \n 5054: void ImGui::SetNextWindowSizeConstraints(const ImVec2& size_min, const ImVec2& size_max, ImGuiSizeConstraintCallback custom_callback, void* custom_callback_user_data)\n 5055  {\n 5056:     ImGuiContext& g = *GImGui;\n 5057      g.SetNextWindowSizeConstraint = true;\n 5058      g.SetNextWindowSizeConstraintRect = ImRect(size_min, size_max);\n ....\n 5061  }\n 5062  \n 5063: void ImGui::SetNextWindowContentSize(const ImVec2& size)\n 5064  {\n 5065:     ImGuiContext& g = *GImGui;\n 5066      g.SetNextWindowContentSizeVal = size;\n 5067:     g.SetNextWindowContentSizeCond = ImGuiSetCond_Always;\n 5068  }\n 5069  \n 5070: void ImGui::SetNextWindowContentWidth(float width)\n 5071  {\n 5072:     ImGuiContext& g = *GImGui;\n 5073      g.SetNextWindowContentSizeVal = ImVec2(width, g.SetNextWindowContentSizeCond ? g.SetNextWindowContentSizeVal.y : 0.0f);\n 5074:     g.SetNextWindowContentSizeCond = ImGuiSetCond_Always;\n 5075  }\n 5076  \n 5077: void ImGui::SetNextWindowCollapsed(bool collapsed, ImGuiSetCond cond)\n 5078  {\n 5079:     ImGuiContext& g = *GImGui;\n 5080      g.SetNextWindowCollapsedVal = collapsed;\n 5081:     g.SetNextWindowCollapsedCond = cond ? cond : ImGuiSetCond_Always;\n 5082  }\n 5083  \n 5084: void ImGui::SetNextWindowFocus()\n 5085  {\n 5086:     ImGuiContext& g = *GImGui;\n 5087      g.SetNextWindowFocus = true;\n 5088  }\n 5089  \n 5090  // In window space (not screen space!)\n 5091: ImVec2 ImGui::GetContentRegionMax()\n 5092  {\n 5093:     ImGuiWindow* window = GetCurrentWindowRead();\n 5094      ImVec2 mx = window->ContentsRegionRect.Max;\n 5095      if (window->DC.ColumnsCount != 1)\n ....\n 5098  }\n 5099  \n 5100: ImVec2 ImGui::GetContentRegionAvail()\n 5101  {\n 5102:     ImGuiWindow* window = GetCurrentWindowRead();\n 5103      return GetContentRegionMax() - (window->DC.CursorPos - window->Pos);\n 5104  }\n 5105  \n 5106: float ImGui::GetContentRegionAvailWidth()\n 5107  {\n 5108      return GetContentRegionAvail().x;\n ....\n 5110  \n 5111  // In window space (not screen space!)\n 5112: ImVec2 ImGui::GetWindowContentRegionMin()\n 5113  {\n 5114:     ImGuiWindow* window = GetCurrentWindowRead();\n 5115      return window->ContentsRegionRect.Min;\n 5116  }\n 5117  \n 5118: ImVec2 ImGui::GetWindowContentRegionMax()\n 5119  {\n 5120:     ImGuiWindow* window = GetCurrentWindowRead();\n 5121      return window->ContentsRegionRect.Max;\n 5122  }\n 5123  \n 5124: float ImGui::GetWindowContentRegionWidth()\n 5125  {\n 5126:     ImGuiWindow* window = GetCurrentWindowRead();\n 5127      return window->ContentsRegionRect.Max.x - window->ContentsRegionRect.Min.x;\n 5128  }\n 5129  \n 5130: float ImGui::GetTextLineHeight()\n 5131  {\n 5132:     ImGuiContext& g = *GImGui;\n 5133      return g.FontSize;\n 5134  }\n 5135  \n 5136: float ImGui::GetTextLineHeightWithSpacing()\n 5137  {\n 5138:     ImGuiContext& g = *GImGui;\n 5139      return g.FontSize + g.Style.ItemSpacing.y;\n 5140  }\n 5141  \n 5142: float ImGui::GetItemsLineHeightWithSpacing()\n 5143  {\n 5144:     ImGuiContext& g = *GImGui;\n 5145      return g.FontSize + g.Style.FramePadding.y * 2.0f + g.Style.ItemSpacing.y;\n 5146  }\n 5147  \n 5148: ImDrawList* ImGui::GetWindowDrawList()\n 5149  {\n 5150:     ImGuiWindow* window = GetCurrentWindow();\n 5151      return window->DrawList;\n 5152  }\n 5153  \n 5154: ImFont* ImGui::GetFont()\n 5155  {\n 5156:     return GImGui->Font;\n 5157  }\n 5158  \n 5159: float ImGui::GetFontSize()\n 5160  {\n 5161:     return GImGui->FontSize;\n 5162  }\n 5163  \n 5164: ImVec2 ImGui::GetFontTexUvWhitePixel()\n 5165  {\n 5166:     return GImGui->FontTexUvWhitePixel;\n 5167  }\n 5168  \n 5169: void ImGui::SetWindowFontScale(float scale)\n 5170  {\n 5171:     ImGuiContext& g = *GImGui;\n 5172:     ImGuiWindow* window = GetCurrentWindow();\n 5173      window->FontWindowScale = scale;\n 5174      g.FontSize = window->CalcFontSize();\n ....\n 5177  // User generally sees positions in window coordinates. Internally we store CursorPos in absolute screen coordinates because it is more convenient.\n 5178  // Conversion happens as we pass the value to user, but it makes our naming convention confusing because GetCursorPos() == (DC.CursorPos - window.Pos). May want to rename 'DC.CursorPos'.\n 5179: ImVec2 ImGui::GetCursorPos()\n 5180  {\n 5181:     ImGuiWindow* window = GetCurrentWindowRead();\n 5182      return window->DC.CursorPos - window->Pos + window->Scroll;\n 5183  }\n 5184  \n 5185: float ImGui::GetCursorPosX()\n 5186  {\n 5187:     ImGuiWindow* window = GetCurrentWindowRead();\n 5188      return window->DC.CursorPos.x - window->Pos.x + window->Scroll.x;\n 5189  }\n 5190  \n 5191: float ImGui::GetCursorPosY()\n 5192  {\n 5193:     ImGuiWindow* window = GetCurrentWindowRead();\n 5194      return window->DC.CursorPos.y - window->Pos.y + window->Scroll.y;\n 5195  }\n 5196  \n 5197: void ImGui::SetCursorPos(const ImVec2& local_pos)\n 5198  {\n 5199:     ImGuiWindow* window = GetCurrentWindow();\n 5200      window->DC.CursorPos = window->Pos - window->Scroll + local_pos;\n 5201      window->DC.CursorMaxPos = ImMax(window->DC.CursorMaxPos, window->DC.CursorPos);\n 5202  }\n 5203  \n 5204: void ImGui::SetCursorPosX(float x)\n 5205  {\n 5206:     ImGuiWindow* window = GetCurrentWindow();\n 5207      window->DC.CursorPos.x = window->Pos.x - window->Scroll.x + x;\n 5208      window->DC.CursorMaxPos.x = ImMax(window->DC.CursorMaxPos.x, window->DC.CursorPos.x);\n 5209  }\n 5210  \n 5211: void ImGui::SetCursorPosY(float y)\n 5212  {\n 5213:     ImGuiWindow* window = GetCurrentWindow();\n 5214      window->DC.CursorPos.y = window->Pos.y - window->Scroll.y + y;\n 5215      window->DC.CursorMaxPos.y = ImMax(window->DC.CursorMaxPos.y, window->DC.CursorPos.y);\n 5216  }\n 5217  \n 5218: ImVec2 ImGui::GetCursorStartPos()\n 5219  {\n 5220:     ImGuiWindow* window = GetCurrentWindowRead();\n 5221      return window->DC.CursorStartPos - window->Pos;\n 5222  }\n 5223  \n 5224: ImVec2 ImGui::GetCursorScreenPos()\n 5225  {\n 5226:     ImGuiWindow* window = GetCurrentWindowRead();\n 5227      return window->DC.CursorPos;\n 5228  }\n 5229  \n 5230: void ImGui::SetCursorScreenPos(const ImVec2& screen_pos)\n 5231  {\n 5232:     ImGuiWindow* window = GetCurrentWindow();\n 5233      window->DC.CursorPos = screen_pos;\n 5234      window->DC.CursorMaxPos = ImMax(window->DC.CursorMaxPos, window->DC.CursorPos);\n 5235  }\n 5236  \n 5237: float ImGui::GetScrollX()\n 5238  {\n 5239:     return GImGui->CurrentWindow->Scroll.x;\n 5240  }\n 5241  \n 5242: float ImGui::GetScrollY()\n 5243  {\n 5244:     return GImGui->CurrentWindow->Scroll.y;\n 5245  }\n 5246  \n 5247: float ImGui::GetScrollMaxX()\n 5248  {\n 5249:     ImGuiWindow* window = GetCurrentWindowRead();\n 5250      return window->SizeContents.x - window->SizeFull.x - window->ScrollbarSizes.x;\n 5251  }\n 5252  \n 5253: float ImGui::GetScrollMaxY()\n 5254  {\n 5255:     ImGuiWindow* window = GetCurrentWindowRead();\n 5256      return window->SizeContents.y - window->SizeFull.y - window->ScrollbarSizes.y;\n 5257  }\n 5258  \n 5259: void ImGui::SetScrollX(float scroll_x)\n 5260  {\n 5261:     ImGuiWindow* window = GetCurrentWindow();\n 5262      window->ScrollTarget.x = scroll_x;\n 5263      window->ScrollTargetCenterRatio.x = 0.0f;\n 5264  }\n 5265  \n 5266: void ImGui::SetScrollY(float scroll_y)\n 5267  {\n 5268:     ImGuiWindow* window = GetCurrentWindow();\n 5269      window->ScrollTarget.y = scroll_y + window->TitleBarHeight() + window->MenuBarHeight(); // title bar height canceled out when using ScrollTargetRelY\n 5270      window->ScrollTargetCenterRatio.y = 0.0f;\n 5271  }\n 5272  \n 5273: void ImGui::SetScrollFromPosY(float pos_y, float center_y_ratio)\n 5274  {\n 5275      // We store a target position so centering can occur on the next frame when we are guaranteed to have a known window size\n 5276:     ImGuiWindow* window = GetCurrentWindow();\n 5277      IM_ASSERT(center_y_ratio >= 0.0f && center_y_ratio <= 1.0f);\n 5278      window->ScrollTarget.y = (float)(int)(pos_y + window->Scroll.y);\n ....\n 5283  \n 5284  // center_y_ratio: 0.0f top of last item, 0.5f vertical center of last item, 1.0f bottom of last item.\n 5285: void ImGui::SetScrollHere(float center_y_ratio)\n 5286  {\n 5287:     ImGuiWindow* window = GetCurrentWindow();\n 5288:     float target_y = window->DC.CursorPosPrevLine.y + (window->DC.PrevLineHeight * center_y_ratio) + (GImGui->Style.ItemSpacing.y * (center_y_ratio - 0.5f) * 2.0f); // Precisely aim above, in the middle or below the last line.\n 5289      SetScrollFromPosY(target_y - window->Pos.y, center_y_ratio);\n 5290  }\n 5291  \n 5292: void ImGui::SetKeyboardFocusHere(int offset)\n 5293  {\n 5294:     ImGuiWindow* window = GetCurrentWindow();\n 5295      window->FocusIdxAllRequestNext = window->FocusIdxAllCounter + 1 + offset;\n 5296      window->FocusIdxTabRequestNext = INT_MAX;\n 5297  }\n 5298  \n 5299: void ImGui::SetStateStorage(ImGuiStorage* tree)\n 5300  {\n 5301:     ImGuiWindow* window = GetCurrentWindow();\n 5302      window->DC.StateStorage = tree ? tree : &window->StateStorage;\n 5303  }\n 5304  \n 5305: ImGuiStorage* ImGui::GetStateStorage()\n 5306  {\n 5307:     ImGuiWindow* window = GetCurrentWindowRead();\n 5308      return window->DC.StateStorage;\n 5309  }\n 5310  \n 5311: void ImGui::TextV(const char* fmt, va_list args)\n 5312  {\n 5313:     ImGuiWindow* window = GetCurrentWindow();\n 5314      if (window->SkipItems)\n 5315          return;\n 5316  \n 5317:     ImGuiContext& g = *GImGui;\n 5318      const char* text_end = g.TempBuffer + ImFormatStringV(g.TempBuffer, IM_ARRAYSIZE(g.TempBuffer), fmt, args);\n 5319      TextUnformatted(g.TempBuffer, text_end);\n 5320  }\n 5321  \n 5322: void ImGui::Text(const char* fmt, ...)\n 5323  {\n 5324      va_list args;\n ....\n 5328  }\n 5329  \n 5330: void ImGui::TextColoredV(const ImVec4& col, const char* fmt, va_list args)\n 5331  {\n 5332:     PushStyleColor(ImGuiCol_Text, col);\n 5333      TextV(fmt, args);\n 5334      PopStyleColor();\n 5335  }\n 5336  \n 5337: void ImGui::TextColored(const ImVec4& col, const char* fmt, ...)\n 5338  {\n 5339      va_list args;\n ....\n 5343  }\n 5344  \n 5345: void ImGui::TextDisabledV(const char* fmt, va_list args)\n 5346  {\n 5347:     PushStyleColor(ImGuiCol_Text, GImGui->Style.Colors[ImGuiCol_TextDisabled]);\n 5348      TextV(fmt, args);\n 5349      PopStyleColor();\n 5350  }\n 5351  \n 5352: void ImGui::TextDisabled(const char* fmt, ...)\n 5353  {\n 5354      va_list args;\n ....\n 5358  }\n 5359  \n 5360: void ImGui::TextWrappedV(const char* fmt, va_list args)\n 5361  {\n 5362:     bool need_wrap = (GImGui->CurrentWindow->DC.TextWrapPos < 0.0f);    // Keep existing wrap position is one ia already set\n 5363      if (need_wrap) PushTextWrapPos(0.0f);\n 5364      TextV(fmt, args);\n ....\n 5366  }\n 5367  \n 5368: void ImGui::TextWrapped(const char* fmt, ...)\n 5369  {\n 5370      va_list args;\n ....\n 5374  }\n 5375  \n 5376: void ImGui::TextUnformatted(const char* text, const char* text_end)\n 5377  {\n 5378:     ImGuiWindow* window = GetCurrentWindow();\n 5379      if (window->SkipItems)\n 5380          return;\n 5381  \n 5382:     ImGuiContext& g = *GImGui;\n 5383      IM_ASSERT(text != NULL);\n 5384      const char* text_begin = text;\n ....\n 5481  }\n 5482  \n 5483: void ImGui::AlignFirstTextHeightToWidgets()\n 5484  {\n 5485:     ImGuiWindow* window = GetCurrentWindow();\n 5486      if (window->SkipItems)\n 5487          return;\n 5488  \n 5489      // Declare a dummy item size to that upcoming items that are smaller will center-align on the newly expanded line height.\n 5490:     ImGuiContext& g = *GImGui;\n 5491      ItemSize(ImVec2(0, g.FontSize + g.Style.FramePadding.y*2), g.Style.FramePadding.y);\n 5492      SameLine(0, 0);\n ....\n 5494  \n 5495  // Add a label+text combo aligned to other label+value widgets\n 5496: void ImGui::LabelTextV(const char* label, const char* fmt, va_list args)\n 5497  {\n 5498:     ImGuiWindow* window = GetCurrentWindow();\n 5499      if (window->SkipItems)\n 5500          return;\n 5501  \n 5502:     ImGuiContext& g = *GImGui;\n 5503:     const ImGuiStyle& style = g.Style;\n 5504      const float w = CalcItemWidth();\n 5505  \n ....\n 5519  }\n 5520  \n 5521: void ImGui::LabelText(const char* label, const char* fmt, ...)\n 5522  {\n 5523      va_list args;\n ....\n 5527  }\n 5528  \n 5529: static inline bool IsWindowContentHoverable(ImGuiWindow* window)\n 5530  {\n 5531      // An active popup disable hovering on other windows (apart from its own children)\n 5532:     ImGuiContext& g = *GImGui;\n 5533:     if (ImGuiWindow* focused_window = g.FocusedWindow)\n 5534:         if (ImGuiWindow* focused_root_window = focused_window->RootWindow)\n 5535:             if ((focused_root_window->Flags & ImGuiWindowFlags_Popup) != 0 && focused_root_window->WasActive && focused_root_window != window->RootWindow)\n 5536                  return false;\n 5537  \n ....\n 5539  }\n 5540  \n 5541: bool ImGui::ButtonBehavior(const ImRect& bb, ImGuiID id, bool* out_hovered, bool* out_held, ImGuiButtonFlags flags)\n 5542  {\n 5543:     ImGuiContext& g = *GImGui;\n 5544:     ImGuiWindow* window = GetCurrentWindow();\n 5545  \n 5546:     if (flags & ImGuiButtonFlags_Disabled)\n 5547      {\n 5548          if (out_hovered) *out_hovered = false;\n ....\n 5552      }\n 5553  \n 5554:     if ((flags & (ImGuiButtonFlags_PressedOnClickRelease | ImGuiButtonFlags_PressedOnClick | ImGuiButtonFlags_PressedOnRelease | ImGuiButtonFlags_PressedOnDoubleClick)) == 0)\n 5555:         flags |= ImGuiButtonFlags_PressedOnClickRelease;\n 5556  \n 5557      bool pressed = false;\n 5558:     bool hovered = IsHovered(bb, id, (flags & ImGuiButtonFlags_FlattenChilds) != 0);\n 5559      if (hovered)\n 5560      {\n 5561          SetHoveredID(id);\n 5562:         if (!(flags & ImGuiButtonFlags_NoKeyModifiers) || (!g.IO.KeyCtrl && !g.IO.KeyShift && !g.IO.KeyAlt))\n 5563          {\n 5564:             //                        | CLICKING        | HOLDING with ImGuiButtonFlags_Repeat\n 5565              // PressedOnClickRelease  |  <on release>*  |  <on repeat> <on repeat> .. (NOT on release)  <-- MOST COMMON! (*) only if both click/release were over bounds\n 5566              // PressedOnClick         |  <on click>     |  <on click> <on repeat> <on repeat> ..\n 5567              // PressedOnRelease       |  <on release>   |  <on repeat> <on repeat> .. (NOT on release)\n 5568              // PressedOnDoubleClick   |  <on dclick>    |  <on dclick> <on repeat> <on repeat> ..\n 5569:             if ((flags & ImGuiButtonFlags_PressedOnClickRelease) && g.IO.MouseClicked[0])\n 5570              {\n 5571                  SetActiveID(id, window); // Hold on ID\n ....\n 5573                  g.ActiveIdClickOffset = g.IO.MousePos - bb.Min;\n 5574              }\n 5575:             if (((flags & ImGuiButtonFlags_PressedOnClick) && g.IO.MouseClicked[0]) || ((flags & ImGuiButtonFlags_PressedOnDoubleClick) && g.IO.MouseDoubleClicked[0]))\n 5576              {\n 5577                  pressed = true;\n ....\n 5579                  FocusWindow(window);\n 5580              }\n 5581:             if ((flags & ImGuiButtonFlags_PressedOnRelease) && g.IO.MouseReleased[0])\n 5582              {\n 5583:                 if (!((flags & ImGuiButtonFlags_Repeat) && g.IO.MouseDownDurationPrev[0] >= g.IO.KeyRepeatDelay))  // Repeat mode trumps <on release>\n 5584                      pressed = true;\n 5585                  ClearActiveID();\n ....\n 5588              // 'Repeat' mode acts when held regardless of _PressedOn flags (see table above). \n 5589              // Relies on repeat logic of IsMouseClicked() but we may as well do it ourselves if we end up exposing finer RepeatDelay/RepeatRate settings.\n 5590:             if ((flags & ImGuiButtonFlags_Repeat) && g.ActiveId == id && g.IO.MouseDownDuration[0] > 0.0f && IsMouseClicked(0, true))\n 5591                  pressed = true;\n 5592          }\n ....\n 5602          else\n 5603          {\n 5604:             if (hovered && (flags & ImGuiButtonFlags_PressedOnClickRelease))\n 5605:                 if (!((flags & ImGuiButtonFlags_Repeat) && g.IO.MouseDownDurationPrev[0] >= g.IO.KeyRepeatDelay))  // Repeat mode trumps <on release>\n 5606                      pressed = true;\n 5607              ClearActiveID();\n ....\n 5610  \n 5611      // AllowOverlap mode (rarely used) requires previous frame HoveredId to be null or to match. This allows using patterns where a later submitted widget overlaps a previous one.\n 5612:     if (hovered && (flags & ImGuiButtonFlags_AllowOverlapMode) && (g.HoveredIdPreviousFrame != id && g.HoveredIdPreviousFrame != 0))\n 5613          hovered = pressed = held = false;\n 5614  \n ....\n 5619  }\n 5620  \n 5621: bool ImGui::ButtonEx(const char* label, const ImVec2& size_arg, ImGuiButtonFlags flags)\n 5622  {\n 5623:     ImGuiWindow* window = GetCurrentWindow();\n 5624      if (window->SkipItems)\n 5625          return false;\n 5626  \n 5627:     ImGuiContext& g = *GImGui;\n 5628:     const ImGuiStyle& style = g.Style;\n 5629:     const ImGuiID id = window->GetID(label);\n 5630      const ImVec2 label_size = CalcTextSize(label, NULL, true);\n 5631  \n 5632      ImVec2 pos = window->DC.CursorPos;\n 5633:     if ((flags & ImGuiButtonFlags_AlignTextBaseLine) && style.FramePadding.y < window->DC.CurrentLineTextBaseOffset) // Try to vertically align buttons that are smaller/have no padding so that text baseline matches (bit hacky, since it shouldn't be a flag)\n 5634          pos.y += window->DC.CurrentLineTextBaseOffset - style.FramePadding.y;\n 5635      ImVec2 size = CalcItemSize(size_arg, label_size.x + style.FramePadding.x * 2.0f, label_size.y + style.FramePadding.y * 2.0f);\n ....\n 5640          return false;\n 5641  \n 5642:     if (window->DC.ButtonRepeat) flags |= ImGuiButtonFlags_Repeat;\n 5643      bool hovered, held;\n 5644      bool pressed = ButtonBehavior(bb, id, &hovered, &held, flags);\n 5645  \n 5646      // Render\n 5647:     const ImU32 col = GetColorU32((hovered && held) ? ImGuiCol_ButtonActive : hovered ? ImGuiCol_ButtonHovered : ImGuiCol_Button);\n 5648      RenderFrame(bb.Min, bb.Max, col, true, style.FrameRounding);\n 5649      RenderTextClipped(bb.Min + style.FramePadding, bb.Max - style.FramePadding, label, NULL, &label_size, style.ButtonTextAlign, &bb);\n 5650  \n 5651      // Automatically close popups\n 5652:     //if (pressed && !(flags & ImGuiButtonFlags_DontClosePopups) && (window->Flags & ImGuiWindowFlags_Popup))\n 5653      //    CloseCurrentPopup();\n 5654  \n ....\n 5656  }\n 5657  \n 5658: bool ImGui::Button(const char* label, const ImVec2& size_arg)\n 5659  {\n 5660      return ButtonEx(label, size_arg, 0);\n ....\n 5662  \n 5663  // Small buttons fits within text without additional vertical spacing.\n 5664: bool ImGui::SmallButton(const char* label)\n 5665  {\n 5666:     ImGuiContext& g = *GImGui;\n 5667      float backup_padding_y = g.Style.FramePadding.y;\n 5668      g.Style.FramePadding.y = 0.0f;\n 5669:     bool pressed = ButtonEx(label, ImVec2(0,0), ImGuiButtonFlags_AlignTextBaseLine);\n 5670      g.Style.FramePadding.y = backup_padding_y;\n 5671      return pressed;\n 5672  }\n 5673  \n 5674: // Tip: use ImGui::PushID()/PopID() to push indices or pointers in the ID stack.\n 5675  // Then you can keep 'str_id' empty or the same for all your buttons (instead of creating a string based on a non-string id)\n 5676: bool ImGui::InvisibleButton(const char* str_id, const ImVec2& size_arg)\n 5677  {\n 5678:     ImGuiWindow* window = GetCurrentWindow();\n 5679      if (window->SkipItems)\n 5680          return false;\n 5681  \n 5682:     const ImGuiID id = window->GetID(str_id);\n 5683      ImVec2 size = CalcItemSize(size_arg, 0.0f, 0.0f);\n 5684      const ImRect bb(window->DC.CursorPos, window->DC.CursorPos + size);\n ....\n 5694  \n 5695  // Upper-right button to close a window.\n 5696: bool ImGui::CloseButton(ImGuiID id, const ImVec2& pos, float radius)\n 5697  {\n 5698:     ImGuiWindow* window = GetCurrentWindow();\n 5699  \n 5700      const ImRect bb(pos - ImVec2(radius,radius), pos + ImVec2(radius,radius));\n ....\n 5704  \n 5705      // Render\n 5706:     const ImU32 col = GetColorU32((held && hovered) ? ImGuiCol_CloseButtonActive : hovered ? ImGuiCol_CloseButtonHovered : ImGuiCol_CloseButton);\n 5707      const ImVec2 center = bb.GetCenter();\n 5708      window->DrawList->AddCircleFilled(center, ImMax(2.0f, radius), col, 12);\n ....\n 5711      if (hovered)\n 5712      {\n 5713:         window->DrawList->AddLine(center + ImVec2(+cross_extent,+cross_extent), center + ImVec2(-cross_extent,-cross_extent), GetColorU32(ImGuiCol_Text));\n 5714:         window->DrawList->AddLine(center + ImVec2(+cross_extent,-cross_extent), center + ImVec2(-cross_extent,+cross_extent), GetColorU32(ImGuiCol_Text));\n 5715      }\n 5716  \n ....\n 5718  }\n 5719  \n 5720: void ImGui::Image(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0, const ImVec2& uv1, const ImVec4& tint_col, const ImVec4& border_col)\n 5721  {\n 5722:     ImGuiWindow* window = GetCurrentWindow();\n 5723      if (window->SkipItems)\n 5724          return;\n ....\n 5746  // frame_padding > 0: set framing size\n 5747  // The color used are the button colors.\n 5748: bool ImGui::ImageButton(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0, const ImVec2& uv1, int frame_padding, const ImVec4& bg_col, const ImVec4& tint_col)\n 5749  {\n 5750:     ImGuiWindow* window = GetCurrentWindow();\n 5751      if (window->SkipItems)\n 5752          return false;\n 5753  \n 5754:     ImGuiContext& g = *GImGui;\n 5755:     const ImGuiStyle& style = g.Style;\n 5756  \n 5757      // Default to using texture ID as ID. User can still push string/integer prefixes.\n 5758      // We could hash the size/uv to create a unique ID but that would prevent the user from animating UV.\n 5759      PushID((void *)user_texture_id);\n 5760:     const ImGuiID id = window->GetID(\"#image\");\n 5761      PopID();\n 5762  \n ....\n 5772  \n 5773      // Render\n 5774:     const ImU32 col = GetColorU32((hovered && held) ? ImGuiCol_ButtonActive : hovered ? ImGuiCol_ButtonHovered : ImGuiCol_Button);\n 5775      RenderFrame(bb.Min, bb.Max, col, true, ImClamp((float)ImMin(padding.x, padding.y), 0.0f, style.FrameRounding));\n 5776      if (bg_col.w > 0.0f)\n ....\n 5781  }\n 5782  \n 5783: // Start logging ImGui output to TTY\n 5784: void ImGui::LogToTTY(int max_depth)\n 5785  {\n 5786:     ImGuiContext& g = *GImGui;\n 5787      if (g.LogEnabled)\n 5788          return;\n 5789:     ImGuiWindow* window = GetCurrentWindowRead();\n 5790  \n 5791      g.LogEnabled = true;\n ....\n 5796  }\n 5797  \n 5798: // Start logging ImGui output to given file\n 5799: void ImGui::LogToFile(int max_depth, const char* filename)\n 5800  {\n 5801:     ImGuiContext& g = *GImGui;\n 5802      if (g.LogEnabled)\n 5803          return;\n 5804:     ImGuiWindow* window = GetCurrentWindowRead();\n 5805  \n 5806      if (!filename)\n ....\n 5823  }\n 5824  \n 5825: // Start logging ImGui output to clipboard\n 5826: void ImGui::LogToClipboard(int max_depth)\n 5827  {\n 5828:     ImGuiContext& g = *GImGui;\n 5829      if (g.LogEnabled)\n 5830          return;\n 5831:     ImGuiWindow* window = GetCurrentWindowRead();\n 5832  \n 5833      g.LogEnabled = true;\n ....\n 5838  }\n 5839  \n 5840: void ImGui::LogFinish()\n 5841  {\n 5842:     ImGuiContext& g = *GImGui;\n 5843      if (!g.LogEnabled)\n 5844          return;\n ....\n 5862  \n 5863  // Helper to display logging buttons\n 5864: void ImGui::LogButtons()\n 5865  {\n 5866:     ImGuiContext& g = *GImGui;\n 5867  \n 5868      PushID(\"LogButtons\");\n ....\n 5886  }\n 5887  \n 5888: bool ImGui::TreeNodeBehaviorIsOpen(ImGuiID id, ImGuiTreeNodeFlags flags)\n 5889  {\n 5890:     if (flags & ImGuiTreeNodeFlags_Leaf)\n 5891          return true;\n 5892  \n 5893      // We only write to the tree storage if the user clicks (or explicitely use SetNextTreeNode*** functions)\n 5894:     ImGuiContext& g = *GImGui;\n 5895:     ImGuiWindow* window = g.CurrentWindow;\n 5896:     ImGuiStorage* storage = window->DC.StateStorage;\n 5897  \n 5898      bool is_open;\n 5899      if (g.SetNextTreeNodeOpenCond != 0)\n 5900      {\n 5901:         if (g.SetNextTreeNodeOpenCond & ImGuiSetCond_Always)\n 5902          {\n 5903              is_open = g.SetNextTreeNodeOpenVal;\n ....\n 5906          else\n 5907          {\n 5908:             // We treat ImGuiSetCondition_Once and ImGuiSetCondition_FirstUseEver the same because tree node state are not saved persistently.\n 5909              const int stored_value = storage->GetInt(id, -1);\n 5910              if (stored_value == -1)\n ....\n 5922      else\n 5923      {\n 5924:         is_open = storage->GetInt(id, (flags & ImGuiTreeNodeFlags_DefaultOpen) ? 1 : 0) != 0;\n 5925      }\n 5926  \n 5927      // When logging is enabled, we automatically expand tree nodes (but *NOT* collapsing headers.. seems like sensible behavior).\n 5928      // NB- If we are above max depth we still allow manually opened nodes to be logged.\n 5929:     if (g.LogEnabled && !(flags & ImGuiTreeNodeFlags_NoAutoOpenOnLog) && window->DC.TreeDepth < g.LogAutoExpandMaxDepth)\n 5930          is_open = true;\n 5931  \n ....\n 5933  }\n 5934  \n 5935: bool ImGui::TreeNodeBehavior(ImGuiID id, ImGuiTreeNodeFlags flags, const char* label, const char* label_end)\n 5936  {\n 5937:     ImGuiWindow* window = GetCurrentWindow();\n 5938      if (window->SkipItems)\n 5939          return false;\n 5940  \n 5941:     ImGuiContext& g = *GImGui;\n 5942:     const ImGuiStyle& style = g.Style;\n 5943:     const bool display_frame = (flags & ImGuiTreeNodeFlags_Framed) != 0;\n 5944      const ImVec2 padding = display_frame ? style.FramePadding : ImVec2(style.FramePadding.x, 0.0f);\n 5945  \n ....\n 5969      if (!ItemAdd(interact_bb, &id))\n 5970      {\n 5971:         if (is_open && !(flags & ImGuiTreeNodeFlags_NoTreePushOnOpen))\n 5972              TreePushRawID(id);\n 5973          return is_open;\n ....\n 5979      // - OpenOnArrow .................... single-click on arrow to open\n 5980      // - OpenOnDoubleClick|OpenOnArrow .. single-click on arrow or double-click anywhere to open\n 5981:     ImGuiButtonFlags button_flags = ImGuiButtonFlags_NoKeyModifiers | ((flags & ImGuiTreeNodeFlags_AllowOverlapMode) ? ImGuiButtonFlags_AllowOverlapMode : 0);\n 5982:     if (flags & ImGuiTreeNodeFlags_OpenOnDoubleClick)\n 5983:         button_flags |= ImGuiButtonFlags_PressedOnDoubleClick | ((flags & ImGuiTreeNodeFlags_OpenOnArrow) ? ImGuiButtonFlags_PressedOnClickRelease : 0);\n 5984      bool hovered, held, pressed = ButtonBehavior(interact_bb, id, &hovered, &held, button_flags);\n 5985:     if (pressed && !(flags & ImGuiTreeNodeFlags_Leaf))\n 5986      {\n 5987:         bool toggled = !(flags & (ImGuiTreeNodeFlags_OpenOnArrow | ImGuiTreeNodeFlags_OpenOnDoubleClick));\n 5988:         if (flags & ImGuiTreeNodeFlags_OpenOnArrow)\n 5989              toggled |= IsMouseHoveringRect(interact_bb.Min, ImVec2(interact_bb.Min.x + text_offset_x, interact_bb.Max.y));\n 5990:         if (flags & ImGuiTreeNodeFlags_OpenOnDoubleClick)\n 5991              toggled |= g.IO.MouseDoubleClicked[0];\n 5992          if (toggled)\n ....\n 5996          }\n 5997      }\n 5998:     if (flags & ImGuiTreeNodeFlags_AllowOverlapMode)\n 5999          SetItemAllowOverlap();\n 6000  \n 6001      // Render\n 6002:     const ImU32 col = GetColorU32((held && hovered) ? ImGuiCol_HeaderActive : hovered ? ImGuiCol_HeaderHovered : ImGuiCol_Header);\n 6003      const ImVec2 text_pos = bb.Min + ImVec2(text_offset_x, padding.y + text_base_offset_y);\n 6004      if (display_frame)\n ....\n 6024      {\n 6025          // Unframed typed for tree nodes\n 6026:         if (hovered || (flags & ImGuiTreeNodeFlags_Selected))\n 6027              RenderFrame(bb.Min, bb.Max, col, false);\n 6028  \n 6029:         if (flags & ImGuiTreeNodeFlags_Bullet)\n 6030              RenderBullet(bb.Min + ImVec2(text_offset_x * 0.5f, g.FontSize*0.50f + text_base_offset_y));\n 6031:         else if (!(flags & ImGuiTreeNodeFlags_Leaf))\n 6032              RenderCollapseTriangle(bb.Min + ImVec2(padding.x, g.FontSize*0.15f + text_base_offset_y), is_open, 0.70f);\n 6033          if (g.LogEnabled)\n ....\n 6036      }\n 6037  \n 6038:     if (is_open && !(flags & ImGuiTreeNodeFlags_NoTreePushOnOpen))\n 6039          TreePushRawID(id);\n 6040      return is_open;\n 6041  }\n 6042  \n 6043: // CollapsingHeader returns true when opened but do not indent nor push into the ID stack (because of the ImGuiTreeNodeFlags_NoTreePushOnOpen flag).\n 6044: // This is basically the same as calling TreeNodeEx(label, ImGuiTreeNodeFlags_CollapsingHeader | ImGuiTreeNodeFlags_NoTreePushOnOpen). You can remove the _NoTreePushOnOpen flag if you want behavior closer to normal TreeNode().\n 6045: bool ImGui::CollapsingHeader(const char* label, ImGuiTreeNodeFlags flags)\n 6046  {\n 6047:     ImGuiWindow* window = GetCurrentWindow();\n 6048      if (window->SkipItems)\n 6049          return false;\n 6050  \n 6051:     return TreeNodeBehavior(window->GetID(label), flags | ImGuiTreeNodeFlags_CollapsingHeader | ImGuiTreeNodeFlags_NoTreePushOnOpen, label);\n 6052  }\n 6053  \n 6054: bool ImGui::CollapsingHeader(const char* label, bool* p_open, ImGuiTreeNodeFlags flags)\n 6055  {\n 6056:     ImGuiWindow* window = GetCurrentWindow();\n 6057      if (window->SkipItems)\n 6058          return false;\n ....\n 6061          return false;\n 6062  \n 6063:     ImGuiID id = window->GetID(label);\n 6064:     bool is_open = TreeNodeBehavior(id, flags | ImGuiTreeNodeFlags_CollapsingHeader | ImGuiTreeNodeFlags_NoTreePushOnOpen | (p_open ? ImGuiTreeNodeFlags_AllowOverlapMode : 0), label);\n 6065      if (p_open)\n 6066      {\n 6067          // Create a small overlapping close button // FIXME: We can evolve this into user accessible helpers to add extra buttons on title bars, headers, etc.\n 6068:         ImGuiContext& g = *GImGui;\n 6069          float button_sz = g.FontSize * 0.5f;\n 6070          if (CloseButton(window->GetID((void*)(intptr_t)(id+1)), ImVec2(ImMin(window->DC.LastItemRect.Max.x, window->ClipRect.Max.x) - g.Style.FramePadding.x - button_sz, window->DC.LastItemRect.Min.y + g.Style.FramePadding.y + button_sz), button_sz))\n ....\n 6075  }\n 6076  \n 6077: bool ImGui::TreeNodeEx(const char* label, ImGuiTreeNodeFlags flags)\n 6078  {\n 6079:     ImGuiWindow* window = GetCurrentWindow();\n 6080      if (window->SkipItems)\n 6081          return false;\n ....\n 6084  }\n 6085  \n 6086: bool ImGui::TreeNodeExV(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list args)\n 6087  {\n 6088:     ImGuiWindow* window = GetCurrentWindow();\n 6089      if (window->SkipItems)\n 6090          return false;\n 6091  \n 6092:     ImGuiContext& g = *GImGui;\n 6093      const char* label_end = g.TempBuffer + ImFormatStringV(g.TempBuffer, IM_ARRAYSIZE(g.TempBuffer), fmt, args);\n 6094      return TreeNodeBehavior(window->GetID(str_id), flags, g.TempBuffer, label_end);\n 6095  }\n 6096  \n 6097: bool ImGui::TreeNodeExV(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list args)\n 6098  {\n 6099:     ImGuiWindow* window = GetCurrentWindow();\n 6100      if (window->SkipItems)\n 6101          return false;\n 6102  \n 6103:     ImGuiContext& g = *GImGui;\n 6104      const char* label_end = g.TempBuffer + ImFormatStringV(g.TempBuffer, IM_ARRAYSIZE(g.TempBuffer), fmt, args);\n 6105      return TreeNodeBehavior(window->GetID(ptr_id), flags, g.TempBuffer, label_end);\n 6106  }\n 6107  \n 6108: bool ImGui::TreeNodeV(const char* str_id, const char* fmt, va_list args)\n 6109  {\n 6110      return TreeNodeExV(str_id, 0, fmt, args);\n 6111  }\n 6112  \n 6113: bool ImGui::TreeNodeV(const void* ptr_id, const char* fmt, va_list args)\n 6114  {\n 6115      return TreeNodeExV(ptr_id, 0, fmt, args);\n 6116  }\n 6117  \n 6118: bool ImGui::TreeNodeEx(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, ...)\n 6119  {\n 6120      va_list args;\n ....\n 6125  }\n 6126  \n 6127: bool ImGui::TreeNodeEx(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, ...)\n 6128  {\n 6129      va_list args;\n ....\n 6134  }\n 6135  \n 6136: bool ImGui::TreeNode(const char* str_id, const char* fmt, ...)\n 6137  {\n 6138      va_list args;\n ....\n 6143  }\n 6144  \n 6145: bool ImGui::TreeNode(const void* ptr_id, const char* fmt, ...)\n 6146  {\n 6147      va_list args;\n ....\n 6152  }\n 6153  \n 6154: bool ImGui::TreeNode(const char* label)\n 6155  {\n 6156:     ImGuiWindow* window = GetCurrentWindow();\n 6157      if (window->SkipItems)\n 6158          return false;\n ....\n 6160  }\n 6161  \n 6162: void ImGui::TreeAdvanceToLabelPos()\n 6163  {\n 6164:     ImGuiContext& g = *GImGui;\n 6165      g.CurrentWindow->DC.CursorPos.x += GetTreeNodeToLabelSpacing();\n 6166  }\n 6167  \n 6168  // Horizontal distance preceding label when using TreeNode() or Bullet()\n 6169: float ImGui::GetTreeNodeToLabelSpacing()\n 6170  {\n 6171:     ImGuiContext& g = *GImGui;\n 6172      return g.FontSize + (g.Style.FramePadding.x * 2.0f);\n 6173  }\n 6174  \n 6175: void ImGui::SetNextTreeNodeOpen(bool is_open, ImGuiSetCond cond)\n 6176  {\n 6177:     ImGuiContext& g = *GImGui;\n 6178      g.SetNextTreeNodeOpenVal = is_open;\n 6179:     g.SetNextTreeNodeOpenCond = cond ? cond : ImGuiSetCond_Always;\n 6180  }\n 6181  \n 6182: void ImGui::PushID(const char* str_id)\n 6183  {\n 6184:     ImGuiWindow* window = GetCurrentWindow();\n 6185      window->IDStack.push_back(window->GetID(str_id));\n 6186  }\n 6187  \n 6188: void ImGui::PushID(const char* str_id_begin, const char* str_id_end)\n 6189  {\n 6190:     ImGuiWindow* window = GetCurrentWindow();\n 6191      window->IDStack.push_back(window->GetID(str_id_begin, str_id_end));\n 6192  }\n 6193  \n 6194: void ImGui::PushID(const void* ptr_id)\n 6195  {\n 6196:     ImGuiWindow* window = GetCurrentWindow();\n 6197      window->IDStack.push_back(window->GetID(ptr_id));\n 6198  }\n 6199  \n 6200: void ImGui::PushID(int int_id)\n 6201  {\n 6202      const void* ptr_id = (void*)(intptr_t)int_id;\n 6203:     ImGuiWindow* window = GetCurrentWindow();\n 6204      window->IDStack.push_back(window->GetID(ptr_id));\n 6205  }\n 6206  \n 6207: void ImGui::PopID()\n 6208  {\n 6209:     ImGuiWindow* window = GetCurrentWindow();\n 6210      window->IDStack.pop_back();\n 6211  }\n 6212  \n 6213: ImGuiID ImGui::GetID(const char* str_id)\n 6214  {\n 6215:     return GImGui->CurrentWindow->GetID(str_id);\n 6216  }\n 6217  \n 6218: ImGuiID ImGui::GetID(const char* str_id_begin, const char* str_id_end)\n 6219  {\n 6220:     return GImGui->CurrentWindow->GetID(str_id_begin, str_id_end);\n 6221  }\n 6222  \n 6223: ImGuiID ImGui::GetID(const void* ptr_id)\n 6224  {\n 6225:     return GImGui->CurrentWindow->GetID(ptr_id);\n 6226  }\n 6227  \n 6228: void ImGui::Bullet()\n 6229  {\n 6230:     ImGuiWindow* window = GetCurrentWindow();\n 6231      if (window->SkipItems)\n 6232          return;\n 6233  \n 6234:     ImGuiContext& g = *GImGui;\n 6235:     const ImGuiStyle& style = g.Style;\n 6236      const float line_height = ImMax(ImMin(window->DC.CurrentLineHeight, g.FontSize + g.Style.FramePadding.y*2), g.FontSize);\n 6237      const ImRect bb(window->DC.CursorPos, window->DC.CursorPos + ImVec2(g.FontSize, line_height));\n ....\n 6249  \n 6250  // Text with a little bullet aligned to the typical tree node.\n 6251: void ImGui::BulletTextV(const char* fmt, va_list args)\n 6252  {\n 6253:     ImGuiWindow* window = GetCurrentWindow();\n 6254      if (window->SkipItems)\n 6255          return;\n 6256  \n 6257:     ImGuiContext& g = *GImGui;\n 6258:     const ImGuiStyle& style = g.Style;\n 6259  \n 6260      const char* text_begin = g.TempBuffer;\n ....\n 6273  }\n 6274  \n 6275: void ImGui::BulletText(const char* fmt, ...)\n 6276  {\n 6277      va_list args;\n ....\n 6281  }\n 6282  \n 6283: static inline void DataTypeFormatString(ImGuiDataType data_type, void* data_ptr, const char* display_format, char* buf, int buf_size)\n 6284  {\n 6285:     if (data_type == ImGuiDataType_Int)\n 6286          ImFormatString(buf, buf_size, display_format, *(int*)data_ptr);\n 6287:     else if (data_type == ImGuiDataType_Float)\n 6288          ImFormatString(buf, buf_size, display_format, *(float*)data_ptr);\n 6289  }\n 6290  \n 6291: static inline void DataTypeFormatString(ImGuiDataType data_type, void* data_ptr, int decimal_precision, char* buf, int buf_size)\n 6292  {\n 6293:     if (data_type == ImGuiDataType_Int)\n 6294      {\n 6295          if (decimal_precision < 0)\n ....\n 6298              ImFormatString(buf, buf_size, \"%.*d\", decimal_precision, *(int*)data_ptr);\n 6299      }\n 6300:     else if (data_type == ImGuiDataType_Float)\n 6301      {\n 6302          if (decimal_precision < 0)\n ....\n 6307  }\n 6308  \n 6309: static void DataTypeApplyOp(ImGuiDataType data_type, int op, void* value1, const void* value2)// Store into value1\n 6310  {\n 6311:     if (data_type == ImGuiDataType_Int)\n 6312      {\n 6313          if (op == '+')\n ....\n 6316              *(int*)value1 = *(int*)value1 - *(const int*)value2;\n 6317      }\n 6318:     else if (data_type == ImGuiDataType_Float)\n 6319      {\n 6320          if (op == '+')\n ....\n 6326  \n 6327  // User can input math operators (e.g. +100) to edit a numerical values.\n 6328: static bool DataTypeApplyOpFromText(const char* buf, const char* initial_value_buf, ImGuiDataType data_type, void* data_ptr, const char* scalar_format)\n 6329  {\n 6330      while (ImCharIsSpace(*buf))\n ....\n 6347          return false;\n 6348  \n 6349:     if (data_type == ImGuiDataType_Int)\n 6350      {\n 6351          if (!scalar_format)\n ....\n 6365          return (old_v != *v);\n 6366      }\n 6367:     else if (data_type == ImGuiDataType_Float)\n 6368      {\n 6369          // For floats we have to ignore format with precision (e.g. \"%.2f\") because sscanf doesn't take them in\n ....\n 6389  \n 6390  // Create text input in place of a slider (when CTRL+Clicking on slider)\n 6391: bool ImGui::InputScalarAsWidgetReplacement(const ImRect& aabb, const char* label, ImGuiDataType data_type, void* data_ptr, ImGuiID id, int decimal_precision)\n 6392  {\n 6393:     ImGuiContext& g = *GImGui;\n 6394:     ImGuiWindow* window = GetCurrentWindow();\n 6395  \n 6396      // Our replacement widget will override the focus ID (registered previously to allow for a TAB focus to happen)\n ....\n 6401      char buf[32];\n 6402      DataTypeFormatString(data_type, data_ptr, decimal_precision, buf, IM_ARRAYSIZE(buf));\n 6403:     bool text_value_changed = InputTextEx(label, buf, IM_ARRAYSIZE(buf), aabb.GetSize(), ImGuiInputTextFlags_CharsDecimal | ImGuiInputTextFlags_AutoSelectAll);\n 6404      if (g.ScalarAsInputTextId == 0)\n 6405      {\n ....\n 6415      }\n 6416      if (text_value_changed)\n 6417:         return DataTypeApplyOpFromText(buf, GImGui->InputTextState.InitialText.begin(), data_type, data_ptr, NULL);\n 6418      return false;\n 6419  }\n 6420  \n 6421  // Parse display precision back from the display format string\n 6422: int ImGui::ParseFormatPrecision(const char* fmt, int default_precision)\n 6423  {\n 6424      int precision = default_precision;\n ....\n 6440  }\n 6441  \n 6442: float ImGui::RoundScalar(float value, int decimal_precision)\n 6443  {\n 6444      // Round past decimal precision\n ....\n 6482  }\n 6483  \n 6484: bool ImGui::SliderBehavior(const ImRect& frame_bb, ImGuiID id, float* v, float v_min, float v_max, float power, int decimal_precision, ImGuiSliderFlags flags)\n 6485  {\n 6486:     ImGuiContext& g = *GImGui;\n 6487:     ImGuiWindow* window = GetCurrentWindow();\n 6488:     const ImGuiStyle& style = g.Style;\n 6489  \n 6490      // Draw frame\n 6491:     RenderFrame(frame_bb.Min, frame_bb.Max, GetColorU32(ImGuiCol_FrameBg), true, style.FrameRounding);\n 6492  \n 6493      const bool is_non_linear = (power < 1.0f-0.00001f) || (power > 1.0f+0.00001f);\n 6494:     const bool is_horizontal = (flags & ImGuiSliderFlags_Vertical) == 0;\n 6495  \n 6496      const float grab_padding = 2.0f;\n ....\n 6586      else\n 6587          grab_bb = ImRect(ImVec2(frame_bb.Min.x + grab_padding, grab_pos - grab_sz*0.5f), ImVec2(frame_bb.Max.x - grab_padding, grab_pos + grab_sz*0.5f));\n 6588:     window->DrawList->AddRectFilled(grab_bb.Min, grab_bb.Max, GetColorU32(g.ActiveId == id ? ImGuiCol_SliderGrabActive : ImGuiCol_SliderGrab), style.GrabRounding);\n 6589  \n 6590      return value_changed;\n ....\n 6596  //   \"%5.2f secs\"   01.23 secs\n 6597  //   \"Gold: %.0f\"   Gold: 1\n 6598: bool ImGui::SliderFloat(const char* label, float* v, float v_min, float v_max, const char* display_format, float power)\n 6599  {\n 6600:     ImGuiWindow* window = GetCurrentWindow();\n 6601      if (window->SkipItems)\n 6602          return false;\n 6603  \n 6604:     ImGuiContext& g = *GImGui;\n 6605:     const ImGuiStyle& style = g.Style;\n 6606:     const ImGuiID id = window->GetID(label);\n 6607      const float w = CalcItemWidth();\n 6608  \n ....\n 6641      }\n 6642      if (start_text_input || (g.ActiveId == id && g.ScalarAsInputTextId == id))\n 6643:         return InputScalarAsWidgetReplacement(frame_bb, label, ImGuiDataType_Float, v, id, decimal_precision);\n 6644  \n 6645      ItemSize(total_bb, style.FramePadding.y);\n ....\n 6659  }\n 6660  \n 6661: bool ImGui::VSliderFloat(const char* label, const ImVec2& size, float* v, float v_min, float v_max, const char* display_format, float power)\n 6662  {\n 6663:     ImGuiWindow* window = GetCurrentWindow();\n 6664      if (window->SkipItems)\n 6665          return false;\n 6666  \n 6667:     ImGuiContext& g = *GImGui;\n 6668:     const ImGuiStyle& style = g.Style;\n 6669:     const ImGuiID id = window->GetID(label);\n 6670  \n 6671      const ImVec2 label_size = CalcTextSize(label, NULL, true);\n ....\n 6692  \n 6693      // Actual slider behavior + render grab\n 6694:     bool value_changed = SliderBehavior(frame_bb, id, v, v_min, v_max, power, decimal_precision, ImGuiSliderFlags_Vertical);\n 6695  \n 6696      // Display value using user-provided display format so user can add prefix/suffix/decorations to the value.\n ....\n 6705  }\n 6706  \n 6707: bool ImGui::SliderAngle(const char* label, float* v_rad, float v_degrees_min, float v_degrees_max)\n 6708  {\n 6709      float v_deg = (*v_rad) * 360.0f / (2*IM_PI);\n ....\n 6713  }\n 6714  \n 6715: bool ImGui::SliderInt(const char* label, int* v, int v_min, int v_max, const char* display_format)\n 6716  {\n 6717      if (!display_format)\n ....\n 6723  }\n 6724  \n 6725: bool ImGui::VSliderInt(const char* label, const ImVec2& size, int* v, int v_min, int v_max, const char* display_format)\n 6726  {\n 6727      if (!display_format)\n ....\n 6734  \n 6735  // Add multiple sliders on 1 line for compact edition of multiple components\n 6736: bool ImGui::SliderFloatN(const char* label, float* v, int components, float v_min, float v_max, const char* display_format, float power)\n 6737  {\n 6738:     ImGuiWindow* window = GetCurrentWindow();\n 6739      if (window->SkipItems)\n 6740          return false;\n 6741  \n 6742:     ImGuiContext& g = *GImGui;\n 6743      bool value_changed = false;\n 6744      BeginGroup();\n ....\n 6761  }\n 6762  \n 6763: bool ImGui::SliderFloat2(const char* label, float v[2], float v_min, float v_max, const char* display_format, float power)\n 6764  {\n 6765      return SliderFloatN(label, v, 2, v_min, v_max, display_format, power);\n 6766  }\n 6767  \n 6768: bool ImGui::SliderFloat3(const char* label, float v[3], float v_min, float v_max, const char* display_format, float power)\n 6769  {\n 6770      return SliderFloatN(label, v, 3, v_min, v_max, display_format, power);\n 6771  }\n 6772  \n 6773: bool ImGui::SliderFloat4(const char* label, float v[4], float v_min, float v_max, const char* display_format, float power)\n 6774  {\n 6775      return SliderFloatN(label, v, 4, v_min, v_max, display_format, power);\n 6776  }\n 6777  \n 6778: bool ImGui::SliderIntN(const char* label, int* v, int components, int v_min, int v_max, const char* display_format)\n 6779  {\n 6780:     ImGuiWindow* window = GetCurrentWindow();\n 6781      if (window->SkipItems)\n 6782          return false;\n 6783  \n 6784:     ImGuiContext& g = *GImGui;\n 6785      bool value_changed = false;\n 6786      BeginGroup();\n ....\n 6803  }\n 6804  \n 6805: bool ImGui::SliderInt2(const char* label, int v[2], int v_min, int v_max, const char* display_format)\n 6806  {\n 6807      return SliderIntN(label, v, 2, v_min, v_max, display_format);\n 6808  }\n 6809  \n 6810: bool ImGui::SliderInt3(const char* label, int v[3], int v_min, int v_max, const char* display_format)\n 6811  {\n 6812      return SliderIntN(label, v, 3, v_min, v_max, display_format);\n 6813  }\n 6814  \n 6815: bool ImGui::SliderInt4(const char* label, int v[4], int v_min, int v_max, const char* display_format)\n 6816  {\n 6817      return SliderIntN(label, v, 4, v_min, v_max, display_format);\n 6818  }\n 6819  \n 6820: bool ImGui::DragBehavior(const ImRect& frame_bb, ImGuiID id, float* v, float v_speed, float v_min, float v_max, int decimal_precision, float power)\n 6821  {\n 6822:     ImGuiContext& g = *GImGui;\n 6823:     const ImGuiStyle& style = g.Style;\n 6824  \n 6825      // Draw frame\n 6826:     const ImU32 frame_col = GetColorU32(g.ActiveId == id ? ImGuiCol_FrameBgActive : g.HoveredId == id ? ImGuiCol_FrameBgHovered : ImGuiCol_FrameBg);\n 6827      RenderFrame(frame_bb.Min, frame_bb.Max, frame_col, true, style.FrameRounding);\n 6828  \n ....\n 6893  }\n 6894  \n 6895: bool ImGui::DragFloat(const char* label, float* v, float v_speed, float v_min, float v_max, const char* display_format, float power)\n 6896  {\n 6897:     ImGuiWindow* window = GetCurrentWindow();\n 6898      if (window->SkipItems)\n 6899          return false;\n 6900  \n 6901:     ImGuiContext& g = *GImGui;\n 6902:     const ImGuiStyle& style = g.Style;\n 6903:     const ImGuiID id = window->GetID(label);\n 6904      const float w = CalcItemWidth();\n 6905  \n ....\n 6939      }\n 6940      if (start_text_input || (g.ActiveId == id && g.ScalarAsInputTextId == id))\n 6941:         return InputScalarAsWidgetReplacement(frame_bb, label, ImGuiDataType_Float, v, id, decimal_precision);\n 6942  \n 6943      // Actual drag behavior\n ....\n 6956  }\n 6957  \n 6958: bool ImGui::DragFloatN(const char* label, float* v, int components, float v_speed, float v_min, float v_max, const char* display_format, float power)\n 6959  {\n 6960:     ImGuiWindow* window = GetCurrentWindow();\n 6961      if (window->SkipItems)\n 6962          return false;\n 6963  \n 6964:     ImGuiContext& g = *GImGui;\n 6965      bool value_changed = false;\n 6966      BeginGroup();\n ....\n 6983  }\n 6984  \n 6985: bool ImGui::DragFloat2(const char* label, float v[2], float v_speed, float v_min, float v_max, const char* display_format, float power)\n 6986  {\n 6987      return DragFloatN(label, v, 2, v_speed, v_min, v_max, display_format, power);\n 6988  }\n 6989  \n 6990: bool ImGui::DragFloat3(const char* label, float v[3], float v_speed, float v_min, float v_max, const char* display_format, float power)\n 6991  {\n 6992      return DragFloatN(label, v, 3, v_speed, v_min, v_max, display_format, power);\n 6993  }\n 6994  \n 6995: bool ImGui::DragFloat4(const char* label, float v[4], float v_speed, float v_min, float v_max, const char* display_format, float power)\n 6996  {\n 6997      return DragFloatN(label, v, 4, v_speed, v_min, v_max, display_format, power);\n 6998  }\n 6999  \n 7000: bool ImGui::DragFloatRange2(const char* label, float* v_current_min, float* v_current_max, float v_speed, float v_min, float v_max, const char* display_format, const char* display_format_max, float power)\n 7001  {\n 7002:     ImGuiWindow* window = GetCurrentWindow();\n 7003      if (window->SkipItems)\n 7004          return false;\n 7005  \n 7006:     ImGuiContext& g = *GImGui;\n 7007      PushID(label);\n 7008      BeginGroup();\n ....\n 7024  \n 7025  // NB: v_speed is float to allow adjusting the drag speed with more precision\n 7026: bool ImGui::DragInt(const char* label, int* v, float v_speed, int v_min, int v_max, const char* display_format)\n 7027  {\n 7028      if (!display_format)\n ....\n 7034  }\n 7035  \n 7036: bool ImGui::DragIntN(const char* label, int* v, int components, float v_speed, int v_min, int v_max, const char* display_format)\n 7037  {\n 7038:     ImGuiWindow* window = GetCurrentWindow();\n 7039      if (window->SkipItems)\n 7040          return false;\n 7041  \n 7042:     ImGuiContext& g = *GImGui;\n 7043      bool value_changed = false;\n 7044      BeginGroup();\n ....\n 7061  }\n 7062  \n 7063: bool ImGui::DragInt2(const char* label, int v[2], float v_speed, int v_min, int v_max, const char* display_format)\n 7064  {\n 7065      return DragIntN(label, v, 2, v_speed, v_min, v_max, display_format);\n 7066  }\n 7067  \n 7068: bool ImGui::DragInt3(const char* label, int v[3], float v_speed, int v_min, int v_max, const char* display_format)\n 7069  {\n 7070      return DragIntN(label, v, 3, v_speed, v_min, v_max, display_format);\n 7071  }\n 7072  \n 7073: bool ImGui::DragInt4(const char* label, int v[4], float v_speed, int v_min, int v_max, const char* display_format)\n 7074  {\n 7075      return DragIntN(label, v, 4, v_speed, v_min, v_max, display_format);\n 7076  }\n 7077  \n 7078: bool ImGui::DragIntRange2(const char* label, int* v_current_min, int* v_current_max, float v_speed, int v_min, int v_max, const char* display_format, const char* display_format_max)\n 7079  {\n 7080:     ImGuiWindow* window = GetCurrentWindow();\n 7081      if (window->SkipItems)\n 7082          return false;\n 7083  \n 7084:     ImGuiContext& g = *GImGui;\n 7085      PushID(label);\n 7086      BeginGroup();\n ....\n 7101  }\n 7102  \n 7103: void ImGui::PlotEx(ImGuiPlotType plot_type, const char* label, float (*values_getter)(void* data, int idx), void* data, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size)\n 7104  {\n 7105:     ImGuiWindow* window = GetCurrentWindow();\n 7106      if (window->SkipItems)\n 7107          return;\n 7108  \n 7109:     ImGuiContext& g = *GImGui;\n 7110:     const ImGuiStyle& style = g.Style;\n 7111  \n 7112      const ImVec2 label_size = CalcTextSize(label, NULL, true);\n ....\n 7140      }\n 7141  \n 7142:     RenderFrame(frame_bb.Min, frame_bb.Max, GetColorU32(ImGuiCol_FrameBg), true, style.FrameRounding);\n 7143  \n 7144      if (values_count > 0)\n 7145      {\n 7146:         int res_w = ImMin((int)graph_size.x, values_count) + ((plot_type == ImGuiPlotType_Lines) ? -1 : 0);\n 7147:         int item_count = values_count + ((plot_type == ImGuiPlotType_Lines) ? -1 : 0);\n 7148  \n 7149          // Tooltip on hover\n ....\n 7157              const float v0 = values_getter(data, (v_idx + values_offset) % values_count);\n 7158              const float v1 = values_getter(data, (v_idx + 1 + values_offset) % values_count);\n 7159:             if (plot_type == ImGuiPlotType_Lines)\n 7160                  SetTooltip(\"%d: %8.4g\\n%d: %8.4g\", v_idx, v0, v_idx+1, v1);\n 7161:             else if (plot_type == ImGuiPlotType_Histogram)\n 7162                  SetTooltip(\"%d: %8.4g\", v_idx, v0);\n 7163              v_hovered = v_idx;\n ....\n 7170          ImVec2 tp0 = ImVec2( t0, 1.0f - ImSaturate((v0 - scale_min) / (scale_max - scale_min)) );    // Point in the normalized space of our target rectangle\n 7171  \n 7172:         const ImU32 col_base = GetColorU32((plot_type == ImGuiPlotType_Lines) ? ImGuiCol_PlotLines : ImGuiCol_PlotHistogram);\n 7173:         const ImU32 col_hovered = GetColorU32((plot_type == ImGuiPlotType_Lines) ? ImGuiCol_PlotLinesHovered : ImGuiCol_PlotHistogramHovered);\n 7174  \n 7175          for (int n = 0; n < res_w; n++)\n ....\n 7183              // NB: Draw calls are merged together by the DrawList system. Still, we should render our batch are lower level to save a bit of CPU.\n 7184              ImVec2 pos0 = ImLerp(inner_bb.Min, inner_bb.Max, tp0);\n 7185:             ImVec2 pos1 = ImLerp(inner_bb.Min, inner_bb.Max, (plot_type == ImGuiPlotType_Lines) ? tp1 : ImVec2(tp1.x, 1.0f));\n 7186:             if (plot_type == ImGuiPlotType_Lines)\n 7187              {\n 7188                  window->DrawList->AddLine(pos0, pos1, v_hovered == v1_idx ? col_hovered : col_base);\n 7189              }\n 7190:             else if (plot_type == ImGuiPlotType_Histogram)\n 7191              {\n 7192                  if (pos1.x >= pos0.x + 2.0f)\n ....\n 7208  }\n 7209  \n 7210: struct ImGuiPlotArrayGetterData\n 7211  {\n 7212      const float* Values;\n 7213      int Stride;\n 7214  \n 7215:     ImGuiPlotArrayGetterData(const float* values, int stride) { Values = values; Stride = stride; }\n 7216  };\n 7217  \n 7218  static float Plot_ArrayGetter(void* data, int idx)\n 7219  {\n 7220:     ImGuiPlotArrayGetterData* plot_data = (ImGuiPlotArrayGetterData*)data;\n 7221      const float v = *(float*)(void*)((unsigned char*)plot_data->Values + (size_t)idx * plot_data->Stride);\n 7222      return v;\n 7223  }\n 7224  \n 7225: void ImGui::PlotLines(const char* label, const float* values, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size, int stride)\n 7226  {\n 7227:     ImGuiPlotArrayGetterData data(values, stride);\n 7228:     PlotEx(ImGuiPlotType_Lines, label, &Plot_ArrayGetter, (void*)&data, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size);\n 7229  }\n 7230  \n 7231: void ImGui::PlotLines(const char* label, float (*values_getter)(void* data, int idx), void* data, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size)\n 7232  {\n 7233:     PlotEx(ImGuiPlotType_Lines, label, values_getter, data, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size);\n 7234  }\n 7235  \n 7236: void ImGui::PlotHistogram(const char* label, const float* values, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size, int stride)\n 7237  {\n 7238:     ImGuiPlotArrayGetterData data(values, stride);\n 7239:     PlotEx(ImGuiPlotType_Histogram, label, &Plot_ArrayGetter, (void*)&data, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size);\n 7240  }\n 7241  \n 7242: void ImGui::PlotHistogram(const char* label, float (*values_getter)(void* data, int idx), void* data, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size)\n 7243  {\n 7244:     PlotEx(ImGuiPlotType_Histogram, label, values_getter, data, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size);\n 7245  }\n 7246  \n 7247  // size_arg (for each axis) < 0.0f: align to end, 0.0f: auto, > 0.0f: specified size\n 7248: void ImGui::ProgressBar(float fraction, const ImVec2& size_arg, const char* overlay)\n 7249  {\n 7250:     ImGuiWindow* window = GetCurrentWindow();\n 7251      if (window->SkipItems)\n 7252          return;\n 7253  \n 7254:     ImGuiContext& g = *GImGui;\n 7255:     const ImGuiStyle& style = g.Style;\n 7256  \n 7257      ImVec2 pos = window->DC.CursorPos;\n ....\n 7263      // Render\n 7264      fraction = ImSaturate(fraction);\n 7265:     RenderFrame(bb.Min, bb.Max, GetColorU32(ImGuiCol_FrameBg), true, style.FrameRounding);\n 7266      bb.Reduce(ImVec2(window->BorderSize, window->BorderSize));\n 7267      const ImVec2 fill_br = ImVec2(ImLerp(bb.Min.x, bb.Max.x, fraction), bb.Max.y);\n 7268:     RenderFrame(bb.Min, fill_br, GetColorU32(ImGuiCol_PlotHistogram), false, style.FrameRounding);\n 7269  \n 7270      // Default displaying the fraction as percentage string, but user can override it\n ....\n 7281  }\n 7282  \n 7283: bool ImGui::Checkbox(const char* label, bool* v)\n 7284  {\n 7285:     ImGuiWindow* window = GetCurrentWindow();\n 7286      if (window->SkipItems)\n 7287          return false;\n 7288  \n 7289:     ImGuiContext& g = *GImGui;\n 7290:     const ImGuiStyle& style = g.Style;\n 7291:     const ImGuiID id = window->GetID(label);\n 7292      const ImVec2 label_size = CalcTextSize(label, NULL, true);\n 7293  \n ....\n 7313          *v = !(*v);\n 7314  \n 7315:     RenderFrame(check_bb.Min, check_bb.Max, GetColorU32((held && hovered) ? ImGuiCol_FrameBgActive : hovered ? ImGuiCol_FrameBgHovered : ImGuiCol_FrameBg), true, style.FrameRounding);\n 7316      if (*v)\n 7317      {\n 7318          const float check_sz = ImMin(check_bb.GetWidth(), check_bb.GetHeight());\n 7319          const float pad = ImMax(1.0f, (float)(int)(check_sz / 6.0f));\n 7320:         window->DrawList->AddRectFilled(check_bb.Min+ImVec2(pad,pad), check_bb.Max-ImVec2(pad,pad), GetColorU32(ImGuiCol_CheckMark), style.FrameRounding);\n 7321      }\n 7322  \n ....\n 7329  }\n 7330  \n 7331: bool ImGui::CheckboxFlags(const char* label, unsigned int* flags, unsigned int flags_value)\n 7332  {\n 7333      bool v = ((*flags & flags_value) == flags_value);\n ....\n 7344  }\n 7345  \n 7346: bool ImGui::RadioButton(const char* label, bool active)\n 7347  {\n 7348:     ImGuiWindow* window = GetCurrentWindow();\n 7349      if (window->SkipItems)\n 7350          return false;\n 7351  \n 7352:     ImGuiContext& g = *GImGui;\n 7353:     const ImGuiStyle& style = g.Style;\n 7354:     const ImGuiID id = window->GetID(label);\n 7355      const ImVec2 label_size = CalcTextSize(label, NULL, true);\n 7356  \n ....\n 7379      bool pressed = ButtonBehavior(total_bb, id, &hovered, &held);\n 7380  \n 7381:     window->DrawList->AddCircleFilled(center, radius, GetColorU32((held && hovered) ? ImGuiCol_FrameBgActive : hovered ? ImGuiCol_FrameBgHovered : ImGuiCol_FrameBg), 16);\n 7382      if (active)\n 7383      {\n 7384          const float check_sz = ImMin(check_bb.GetWidth(), check_bb.GetHeight());\n 7385          const float pad = ImMax(1.0f, (float)(int)(check_sz / 6.0f));\n 7386:         window->DrawList->AddCircleFilled(center, radius-pad, GetColorU32(ImGuiCol_CheckMark), 16);\n 7387      }\n 7388  \n 7389:     if (window->Flags & ImGuiWindowFlags_ShowBorders)\n 7390      {\n 7391:         window->DrawList->AddCircle(center+ImVec2(1,1), radius, GetColorU32(ImGuiCol_BorderShadow), 16);\n 7392:         window->DrawList->AddCircle(center, radius, GetColorU32(ImGuiCol_Border), 16);\n 7393      }\n 7394  \n ....\n 7401  }\n 7402  \n 7403: bool ImGui::RadioButton(const char* label, int* v, int v_button)\n 7404  {\n 7405      const bool pressed = RadioButton(label, *v == v_button);\n ....\n 7427  static ImVec2 InputTextCalcTextSizeW(const ImWchar* text_begin, const ImWchar* text_end, const ImWchar** remaining, ImVec2* out_offset, bool stop_on_new_line)\n 7428  {\n 7429:     ImFont* font = GImGui->Font;\n 7430:     const float line_height = GImGui->FontSize;\n 7431      const float scale = line_height / font->FontSize;\n 7432  \n ....\n 7470  \n 7471  // Wrapper for stb_textedit.h to edit text (our wrapper is for: statically sized buffer, single-line, wchar characters. InputText converts between UTF-8 and wchar)\n 7472: namespace ImGuiStb\n 7473  {\n 7474  \n 7475  static int     STB_TEXTEDIT_STRINGLEN(const STB_TEXTEDIT_STRING* obj)                             { return obj->CurLenW; }\n 7476  static ImWchar STB_TEXTEDIT_GETCHAR(const STB_TEXTEDIT_STRING* obj, int idx)                      { return obj->Text[idx]; }\n 7477: static float   STB_TEXTEDIT_GETWIDTH(STB_TEXTEDIT_STRING* obj, int line_start_idx, int char_idx)  { ImWchar c = obj->Text[line_start_idx+char_idx]; if (c == '\\n') return STB_TEXTEDIT_GETWIDTH_NEWLINE; return GImGui->Font->GetCharAdvance(c) * (GImGui->FontSize / GImGui->Font->FontSize); }\n 7478  static int     STB_TEXTEDIT_KEYTOTEXT(int key)                                                    { return key >= 0x10000 ? 0 : key; }\n 7479  static ImWchar STB_TEXTEDIT_NEWLINE = '\\n';\n ....\n 7563  }\n 7564  \n 7565: void ImGuiTextEditState::OnKeyPressed(int key)\n 7566  {\n 7567      stb_textedit_key(this, &StbState, key);\n ....\n 7573  // We expose UTF-8 to the user (unlike the STB_TEXTEDIT_* functions which are manipulating wchar)\n 7574  // FIXME: The existence of this rarely exercised code path is a bit of a nuisance.\n 7575: void ImGuiTextEditCallbackData::DeleteChars(int pos, int bytes_count)\n 7576  {\n 7577      IM_ASSERT(pos + bytes_count <= BufTextLen);\n ....\n 7591  }\n 7592  \n 7593: void ImGuiTextEditCallbackData::InsertChars(int pos, const char* new_text, const char* new_text_end)\n 7594  {\n 7595      const int new_text_len = new_text_end ? (int)(new_text_end - new_text) : (int)strlen(new_text);\n ....\n 7610  \n 7611  // Return false to discard a character.\n 7612: static bool InputTextFilterCharacter(unsigned int* p_char, ImGuiInputTextFlags flags, ImGuiTextEditCallback callback, void* user_data)\n 7613  {\n 7614      unsigned int c = *p_char;\n ....\n 7617      {\n 7618          bool pass = false;\n 7619:         pass |= (c == '\\n' && (flags & ImGuiInputTextFlags_Multiline));\n 7620:         pass |= (c == '\\t' && (flags & ImGuiInputTextFlags_AllowTabInput));\n 7621          if (!pass)\n 7622              return false;\n ....\n 7626          return false;\n 7627  \n 7628:     if (flags & (ImGuiInputTextFlags_CharsDecimal | ImGuiInputTextFlags_CharsHexadecimal | ImGuiInputTextFlags_CharsUppercase | ImGuiInputTextFlags_CharsNoBlank))\n 7629      {\n 7630:         if (flags & ImGuiInputTextFlags_CharsDecimal)\n 7631              if (!(c >= '0' && c <= '9') && (c != '.') && (c != '-') && (c != '+') && (c != '*') && (c != '/'))\n 7632                  return false;\n 7633  \n 7634:         if (flags & ImGuiInputTextFlags_CharsHexadecimal)\n 7635              if (!(c >= '0' && c <= '9') && !(c >= 'a' && c <= 'f') && !(c >= 'A' && c <= 'F'))\n 7636                  return false;\n 7637  \n 7638:         if (flags & ImGuiInputTextFlags_CharsUppercase)\n 7639              if (c >= 'a' && c <= 'z')\n 7640                  *p_char = (c += (unsigned int)('A'-'a'));\n 7641  \n 7642:         if (flags & ImGuiInputTextFlags_CharsNoBlank)\n 7643              if (ImCharIsSpace(c))\n 7644                  return false;\n 7645      }\n 7646  \n 7647:     if (flags & ImGuiInputTextFlags_CallbackCharFilter)\n 7648      {\n 7649:         ImGuiTextEditCallbackData callback_data;\n 7650:         memset(&callback_data, 0, sizeof(ImGuiTextEditCallbackData));\n 7651:         callback_data.EventFlag = ImGuiInputTextFlags_CallbackCharFilter;\n 7652          callback_data.EventChar = (ImWchar)c;\n 7653          callback_data.Flags = flags;\n ....\n 7666  // NB: when active, hold on a privately held copy of the text (and apply back to 'buf'). So changing 'buf' while active has no effect.\n 7667  // FIXME: Rather messy function partly because we are doing UTF8 > u16 > UTF8 conversions on the go to more easily handle stb_textedit calls. Ideally we should stay in UTF-8 all the time. See https://github.com/nothings/stb/issues/188\n 7668: bool ImGui::InputTextEx(const char* label, char* buf, int buf_size, const ImVec2& size_arg, ImGuiInputTextFlags flags, ImGuiTextEditCallback callback, void* user_data)\n 7669  {\n 7670:     ImGuiWindow* window = GetCurrentWindow();\n 7671      if (window->SkipItems)\n 7672          return false;\n 7673  \n 7674:     IM_ASSERT(!((flags & ImGuiInputTextFlags_CallbackHistory) && (flags & ImGuiInputTextFlags_Multiline))); // Can't use both together (they both use up/down keys)\n 7675:     IM_ASSERT(!((flags & ImGuiInputTextFlags_CallbackCompletion) && (flags & ImGuiInputTextFlags_AllowTabInput))); // Can't use both together (they both use tab key)\n 7676  \n 7677:     ImGuiContext& g = *GImGui;\n 7678:     const ImGuiIO& io = g.IO;\n 7679:     const ImGuiStyle& style = g.Style;\n 7680  \n 7681:     const bool is_multiline = (flags & ImGuiInputTextFlags_Multiline) != 0;\n 7682:     const bool is_editable = (flags & ImGuiInputTextFlags_ReadOnly) == 0;\n 7683:     const bool is_password = (flags & ImGuiInputTextFlags_Password) != 0;\n 7684  \n 7685      if (is_multiline) // Open group before calling GetID() because groups tracks id created during their spawn\n 7686          BeginGroup();\n 7687:     const ImGuiID id = window->GetID(label);\n 7688      const ImVec2 label_size = CalcTextSize(label, NULL, true);\n 7689      ImVec2 size = CalcItemSize(size_arg, CalcItemWidth(), (is_multiline ? GetTextLineHeight() * 8.0f : label_size.y) + style.FramePadding.y*2.0f); // Arbitrary default of 8 lines high for multi-line\n ....\n 7691      const ImRect total_bb(frame_bb.Min, frame_bb.Max + ImVec2(label_size.x > 0.0f ? (style.ItemInnerSpacing.x + label_size.x) : 0.0f, 0.0f));\n 7692  \n 7693:     ImGuiWindow* draw_window = window;\n 7694      if (is_multiline)\n 7695      {\n ....\n 7728  \n 7729      // NB: we are only allowed to access 'edit_state' if we are the active widget.\n 7730:     ImGuiTextEditState& edit_state = g.InputTextState;\n 7731  \n 7732:     const bool focus_requested = FocusableItemRegister(window, g.ActiveId == id, (flags & (ImGuiInputTextFlags_CallbackCompletion|ImGuiInputTextFlags_AllowTabInput)) == 0);    // Using completion callback disable keyboard tabbing\n 7733      const bool focus_requested_by_code = focus_requested && (window->FocusIdxAllCounter == window->FocusIdxAllRequestCurrent);\n 7734      const bool focus_requested_by_tab = focus_requested && !focus_requested_by_code;\n ....\n 7738      {\n 7739          SetHoveredID(id);\n 7740:         g.MouseCursor = ImGuiMouseCursor_TextInput;\n 7741      }\n 7742      const bool user_clicked = hovered && io.MouseClicked[0];\n 7743      const bool user_scrolled = is_multiline && g.ActiveId == 0 && edit_state.Id == id && g.ActiveIdPreviousFrame == draw_window->GetIDNoKeepAlive(\"#SCROLLY\");\n 7744  \n 7745:     bool select_all = (g.ActiveId != id) && (flags & ImGuiInputTextFlags_AutoSelectAll) != 0;\n 7746      if (focus_requested || user_clicked || user_scrolled)\n 7747      {\n ....\n 7777                      select_all = true;\n 7778              }\n 7779:             if (flags & ImGuiInputTextFlags_AlwaysInsertMode)\n 7780                  edit_state.StbState.insert_mode = true;\n 7781              if (!is_multiline && (focus_requested_by_tab || (user_clicked && io.KeyCtrl)))\n ....\n 7870          const bool is_startend_key_down = io.OSXBehaviors && io.KeySuper && !io.KeyCtrl && !io.KeyAlt;  // OS X style: Line/Text Start and End using Cmd+Arrows instead of Home/End\n 7871  \n 7872:         if (IsKeyPressedMap(ImGuiKey_LeftArrow))                        { edit_state.OnKeyPressed((is_startend_key_down ? STB_TEXTEDIT_K_LINESTART : is_wordmove_key_down ? STB_TEXTEDIT_K_WORDLEFT : STB_TEXTEDIT_K_LEFT) | k_mask); }\n 7873:         else if (IsKeyPressedMap(ImGuiKey_RightArrow))                  { edit_state.OnKeyPressed((is_startend_key_down ? STB_TEXTEDIT_K_LINEEND : is_wordmove_key_down ? STB_TEXTEDIT_K_WORDRIGHT : STB_TEXTEDIT_K_RIGHT) | k_mask); }\n 7874:         else if (IsKeyPressedMap(ImGuiKey_UpArrow) && is_multiline)     { if (io.KeyCtrl) SetWindowScrollY(draw_window, ImMax(draw_window->Scroll.y - g.FontSize, 0.0f)); else edit_state.OnKeyPressed((is_startend_key_down ? STB_TEXTEDIT_K_TEXTSTART : STB_TEXTEDIT_K_UP) | k_mask); }\n 7875:         else if (IsKeyPressedMap(ImGuiKey_DownArrow) && is_multiline)   { if (io.KeyCtrl) SetWindowScrollY(draw_window, ImMin(draw_window->Scroll.y + g.FontSize, GetScrollMaxY())); else edit_state.OnKeyPressed((is_startend_key_down ? STB_TEXTEDIT_K_TEXTEND : STB_TEXTEDIT_K_DOWN) | k_mask); }\n 7876:         else if (IsKeyPressedMap(ImGuiKey_Home))                        { edit_state.OnKeyPressed(io.KeyCtrl ? STB_TEXTEDIT_K_TEXTSTART | k_mask : STB_TEXTEDIT_K_LINESTART | k_mask); }\n 7877:         else if (IsKeyPressedMap(ImGuiKey_End))                         { edit_state.OnKeyPressed(io.KeyCtrl ? STB_TEXTEDIT_K_TEXTEND | k_mask : STB_TEXTEDIT_K_LINEEND | k_mask); }\n 7878:         else if (IsKeyPressedMap(ImGuiKey_Delete) && is_editable)       { edit_state.OnKeyPressed(STB_TEXTEDIT_K_DELETE | k_mask); }\n 7879:         else if (IsKeyPressedMap(ImGuiKey_Backspace) && is_editable)\n 7880          {\n 7881              if (!edit_state.HasSelection())\n ....\n 7886              edit_state.OnKeyPressed(STB_TEXTEDIT_K_BACKSPACE | k_mask);\n 7887          }\n 7888:         else if (IsKeyPressedMap(ImGuiKey_Enter))\n 7889          {\n 7890:             bool ctrl_enter_for_new_line = (flags & ImGuiInputTextFlags_CtrlEnterForNewLine) != 0;\n 7891              if (!is_multiline || (ctrl_enter_for_new_line && !io.KeyCtrl) || (!ctrl_enter_for_new_line && io.KeyCtrl))\n 7892              {\n ....\n 7901              }\n 7902          }\n 7903:         else if ((flags & ImGuiInputTextFlags_AllowTabInput) && IsKeyPressedMap(ImGuiKey_Tab) && !io.KeyCtrl && !io.KeyShift && !io.KeyAlt && is_editable)\n 7904          {\n 7905              unsigned int c = '\\t'; // Insert TAB\n ....\n 7907                  edit_state.OnKeyPressed((int)c);\n 7908          }\n 7909:         else if (IsKeyPressedMap(ImGuiKey_Escape))                                     { ClearActiveID(); cancel_edit = true; }\n 7910:         else if (is_shortcut_key_only && IsKeyPressedMap(ImGuiKey_Z) && is_editable)   { edit_state.OnKeyPressed(STB_TEXTEDIT_K_UNDO); edit_state.ClearSelection(); }\n 7911:         else if (is_shortcut_key_only && IsKeyPressedMap(ImGuiKey_Y) && is_editable)   { edit_state.OnKeyPressed(STB_TEXTEDIT_K_REDO); edit_state.ClearSelection(); }\n 7912:         else if (is_shortcut_key_only && IsKeyPressedMap(ImGuiKey_A))                  { edit_state.SelectAll(); edit_state.CursorFollow = true; }\n 7913:         else if (is_shortcut_key_only && !is_password && ((IsKeyPressedMap(ImGuiKey_X) && is_editable) || IsKeyPressedMap(ImGuiKey_C)) && (!is_multiline || edit_state.HasSelection()))\n 7914          {\n 7915              // Cut, Copy\n 7916:             const bool cut = IsKeyPressedMap(ImGuiKey_X);\n 7917              if (cut && !edit_state.HasSelection())\n 7918                  edit_state.SelectAll();\n ....\n 7933              }\n 7934          }\n 7935:         else if (is_shortcut_key_only && IsKeyPressedMap(ImGuiKey_V) && is_editable)\n 7936          {\n 7937              // Paste\n ....\n 7940                  // Filter pasted buffer\n 7941                  const int clipboard_len = (int)strlen(clipboard);\n 7942:                 ImWchar* clipboard_filtered = (ImWchar*)ImGui::MemAlloc((clipboard_len+1) * sizeof(ImWchar));\n 7943                  int clipboard_filtered_len = 0;\n 7944                  for (const char* s = clipboard; *s; )\n ....\n 7958                      edit_state.CursorFollow = true;\n 7959                  }\n 7960:                 ImGui::MemFree(clipboard_filtered);\n 7961              }\n 7962          }\n ....\n 7984  \n 7985              // User callback\n 7986:             if ((flags & (ImGuiInputTextFlags_CallbackCompletion | ImGuiInputTextFlags_CallbackHistory | ImGuiInputTextFlags_CallbackAlways)) != 0)\n 7987              {\n 7988                  IM_ASSERT(callback != NULL);\n 7989  \n 7990                  // The reason we specify the usage semantic (Completion/History) is that Completion needs to disable keyboard TABBING at the moment.\n 7991:                 ImGuiInputTextFlags event_flag = 0;\n 7992:                 ImGuiKey event_key = ImGuiKey_COUNT;\n 7993:                 if ((flags & ImGuiInputTextFlags_CallbackCompletion) != 0 && IsKeyPressedMap(ImGuiKey_Tab))\n 7994                  {\n 7995:                     event_flag = ImGuiInputTextFlags_CallbackCompletion;\n 7996:                     event_key = ImGuiKey_Tab;\n 7997                  }\n 7998:                 else if ((flags & ImGuiInputTextFlags_CallbackHistory) != 0 && IsKeyPressedMap(ImGuiKey_UpArrow))\n 7999                  {\n 8000:                     event_flag = ImGuiInputTextFlags_CallbackHistory;\n 8001:                     event_key = ImGuiKey_UpArrow;\n 8002                  }\n 8003:                 else if ((flags & ImGuiInputTextFlags_CallbackHistory) != 0 && IsKeyPressedMap(ImGuiKey_DownArrow))\n 8004                  {\n 8005:                     event_flag = ImGuiInputTextFlags_CallbackHistory;\n 8006:                     event_key = ImGuiKey_DownArrow;\n 8007                  }\n 8008:                 else if (flags & ImGuiInputTextFlags_CallbackAlways)\n 8009:                     event_flag = ImGuiInputTextFlags_CallbackAlways;\n 8010  \n 8011                  if (event_flag)\n 8012                  {\n 8013:                     ImGuiTextEditCallbackData callback_data;\n 8014:                     memset(&callback_data, 0, sizeof(ImGuiTextEditCallbackData));\n 8015                      callback_data.EventFlag = event_flag;\n 8016                      callback_data.Flags = flags;\n ....\n 8060  \n 8061      // Render\n 8062:     // Select which buffer we are going to display. When ImGuiInputTextFlags_NoLiveEdit is set 'buf' might still be the old value. We set buf to NULL to prevent accidental usage from now on.\n 8063      const char* buf_display = (g.ActiveId == id && is_editable) ? edit_state.TempTextBuffer.Data : buf; buf = NULL; \n 8064  \n 8065      if (!is_multiline)\n 8066:         RenderFrame(frame_bb.Min, frame_bb.Max, GetColorU32(ImGuiCol_FrameBg), true, style.FrameRounding);\n 8067  \n 8068      const ImVec4 clip_rect(frame_bb.Min.x, frame_bb.Min.y, frame_bb.Min.x + size.x, frame_bb.Min.y + size.y); // Not using frame_bb.Max because we have adjusted size\n ....\n 8130          {\n 8131              // Horizontal scroll in chunks of quarter width\n 8132:             if (!(flags & ImGuiInputTextFlags_NoHorizontalScroll))\n 8133              {\n 8134                  const float scroll_increment_x = size.x * 0.25f;\n ....\n 8167              float bg_offy_up = is_multiline ? 0.0f : -1.0f;    // FIXME: those offsets should be part of the style? they don't play so well with multi-line selection.\n 8168              float bg_offy_dn = is_multiline ? 0.0f : 2.0f;\n 8169:             ImU32 bg_color = GetColorU32(ImGuiCol_TextSelectedBg);\n 8170              ImVec2 rect_pos = render_pos + select_start_offset - render_scroll;\n 8171              for (const ImWchar* p = text_selected_begin; p < text_selected_end; )\n ....\n 8193          }\n 8194  \n 8195:         draw_window->DrawList->AddText(g.Font, g.FontSize, render_pos - render_scroll, GetColorU32(ImGuiCol_Text), buf_display, buf_display + edit_state.CurLenA, 0.0f, is_multiline ? NULL : &clip_rect);\n 8196  \n 8197          // Draw blinking cursor\n ....\n 8200          ImRect cursor_screen_rect(cursor_screen_pos.x, cursor_screen_pos.y-g.FontSize+0.5f, cursor_screen_pos.x+1.0f, cursor_screen_pos.y-1.5f);\n 8201          if (cursor_is_visible && cursor_screen_rect.Overlaps(clip_rect))\n 8202:             draw_window->DrawList->AddLine(cursor_screen_rect.Min, cursor_screen_rect.GetBL(), GetColorU32(ImGuiCol_Text));\n 8203  \n 8204          // Notify OS of text input position for advanced IME (-1 x offset so that Windows IME can cover our cursor. Bit of an extra nicety.)\n ....\n 8212          if (is_multiline)\n 8213              text_size = ImVec2(size.x, InputTextCalcTextLenAndLineCount(buf_display, &buf_end) * g.FontSize); // We don't need width\n 8214:         draw_window->DrawList->AddText(g.Font, g.FontSize, render_pos, GetColorU32(ImGuiCol_Text), buf_display, buf_end, 0.0f, is_multiline ? NULL : &clip_rect);\n 8215      }\n 8216  \n ....\n 8232          RenderText(ImVec2(frame_bb.Max.x + style.ItemInnerSpacing.x, frame_bb.Min.y + style.FramePadding.y), label);\n 8233  \n 8234:     if ((flags & ImGuiInputTextFlags_EnterReturnsTrue) != 0)\n 8235          return enter_pressed;\n 8236      else\n ....\n 8238  }\n 8239  \n 8240: bool ImGui::InputText(const char* label, char* buf, size_t buf_size, ImGuiInputTextFlags flags, ImGuiTextEditCallback callback, void* user_data)\n 8241  {\n 8242:     IM_ASSERT(!(flags & ImGuiInputTextFlags_Multiline)); // call InputTextMultiline()\n 8243      return InputTextEx(label, buf, (int)buf_size, ImVec2(0,0), flags, callback, user_data);\n 8244  }\n 8245  \n 8246: bool ImGui::InputTextMultiline(const char* label, char* buf, size_t buf_size, const ImVec2& size, ImGuiInputTextFlags flags, ImGuiTextEditCallback callback, void* user_data)\n 8247  {\n 8248:     return InputTextEx(label, buf, (int)buf_size, size, flags | ImGuiInputTextFlags_Multiline, callback, user_data);\n 8249  }\n 8250  \n 8251  // NB: scalar_format here must be a simple \"%xx\" format string with no prefix/suffix (unlike the Drag/Slider functions \"display_format\" argument)\n 8252: bool ImGui::InputScalarEx(const char* label, ImGuiDataType data_type, void* data_ptr, void* step_ptr, void* step_fast_ptr, const char* scalar_format, ImGuiInputTextFlags extra_flags)\n 8253  {\n 8254:     ImGuiWindow* window = GetCurrentWindow();\n 8255      if (window->SkipItems)\n 8256          return false;\n 8257  \n 8258:     ImGuiContext& g = *GImGui;\n 8259:     const ImGuiStyle& style = g.Style;\n 8260      const ImVec2 label_size = CalcTextSize(label, NULL, true);\n 8261  \n ....\n 8270  \n 8271      bool value_changed = false;\n 8272:     if (!(extra_flags & ImGuiInputTextFlags_CharsHexadecimal))\n 8273:         extra_flags |= ImGuiInputTextFlags_CharsDecimal;\n 8274:     extra_flags |= ImGuiInputTextFlags_AutoSelectAll;\n 8275      if (InputText(\"\", buf, IM_ARRAYSIZE(buf), extra_flags)) // PushId(label) + \"\" gives us the expected ID from outside point of view\n 8276:         value_changed = DataTypeApplyOpFromText(buf, GImGui->InputTextState.InitialText.begin(), data_type, data_ptr, scalar_format);\n 8277  \n 8278      // Step buttons\n ....\n 8281          PopItemWidth();\n 8282          SameLine(0, style.ItemInnerSpacing.x);\n 8283:         if (ButtonEx(\"-\", button_sz, ImGuiButtonFlags_Repeat | ImGuiButtonFlags_DontClosePopups))\n 8284          {\n 8285              DataTypeApplyOp(data_type, '-', data_ptr, g.IO.KeyCtrl && step_fast_ptr ? step_fast_ptr : step_ptr);\n ....\n 8287          }\n 8288          SameLine(0, style.ItemInnerSpacing.x);\n 8289:         if (ButtonEx(\"+\", button_sz, ImGuiButtonFlags_Repeat | ImGuiButtonFlags_DontClosePopups))\n 8290          {\n 8291              DataTypeApplyOp(data_type, '+', data_ptr, g.IO.KeyCtrl && step_fast_ptr ? step_fast_ptr : step_ptr);\n ....\n 8306  }\n 8307  \n 8308: bool ImGui::InputFloat(const char* label, float* v, float step, float step_fast, int decimal_precision, ImGuiInputTextFlags extra_flags)\n 8309  {\n 8310      char display_format[16];\n ....\n 8313      else\n 8314          ImFormatString(display_format, IM_ARRAYSIZE(display_format), \"%%.%df\", decimal_precision);\n 8315:     return InputScalarEx(label, ImGuiDataType_Float, (void*)v, (void*)(step>0.0f ? &step : NULL), (void*)(step_fast>0.0f ? &step_fast : NULL), display_format, extra_flags);\n 8316  }\n 8317  \n 8318: bool ImGui::InputInt(const char* label, int* v, int step, int step_fast, ImGuiInputTextFlags extra_flags)\n 8319  {\n 8320      // Hexadecimal input provided as a convenience but the flag name is awkward. Typically you'd use InputText() to parse your own data, if you want to handle prefixes.\n 8321:     const char* scalar_format = (extra_flags & ImGuiInputTextFlags_CharsHexadecimal) ? \"%08X\" : \"%d\";\n 8322:     return InputScalarEx(label, ImGuiDataType_Int, (void*)v, (void*)(step>0.0f ? &step : NULL), (void*)(step_fast>0.0f ? &step_fast : NULL), scalar_format, extra_flags);\n 8323  }\n 8324  \n 8325: bool ImGui::InputFloatN(const char* label, float* v, int components, int decimal_precision, ImGuiInputTextFlags extra_flags)\n 8326  {\n 8327:     ImGuiWindow* window = GetCurrentWindow();\n 8328      if (window->SkipItems)\n 8329          return false;\n 8330  \n 8331:     ImGuiContext& g = *GImGui;\n 8332      bool value_changed = false;\n 8333      BeginGroup();\n ....\n 8351  }\n 8352  \n 8353: bool ImGui::InputFloat2(const char* label, float v[2], int decimal_precision, ImGuiInputTextFlags extra_flags)\n 8354  {\n 8355      return InputFloatN(label, v, 2, decimal_precision, extra_flags);\n 8356  }\n 8357  \n 8358: bool ImGui::InputFloat3(const char* label, float v[3], int decimal_precision, ImGuiInputTextFlags extra_flags)\n 8359  {\n 8360      return InputFloatN(label, v, 3, decimal_precision, extra_flags);\n 8361  }\n 8362  \n 8363: bool ImGui::InputFloat4(const char* label, float v[4], int decimal_precision, ImGuiInputTextFlags extra_flags)\n 8364  {\n 8365      return InputFloatN(label, v, 4, decimal_precision, extra_flags);\n 8366  }\n 8367  \n 8368: bool ImGui::InputIntN(const char* label, int* v, int components, ImGuiInputTextFlags extra_flags)\n 8369  {\n 8370:     ImGuiWindow* window = GetCurrentWindow();\n 8371      if (window->SkipItems)\n 8372          return false;\n 8373  \n 8374:     ImGuiContext& g = *GImGui;\n 8375      bool value_changed = false;\n 8376      BeginGroup();\n ....\n 8394  }\n 8395  \n 8396: bool ImGui::InputInt2(const char* label, int v[2], ImGuiInputTextFlags extra_flags)\n 8397  {\n 8398      return InputIntN(label, v, 2, extra_flags);\n 8399  }\n 8400  \n 8401: bool ImGui::InputInt3(const char* label, int v[3], ImGuiInputTextFlags extra_flags)\n 8402  {\n 8403      return InputIntN(label, v, 3, extra_flags);\n 8404  }\n 8405  \n 8406: bool ImGui::InputInt4(const char* label, int v[4], ImGuiInputTextFlags extra_flags)\n 8407  {\n 8408      return InputIntN(label, v, 4, extra_flags);\n ....\n 8438  \n 8439  // Combo box helper allowing to pass an array of strings.\n 8440: bool ImGui::Combo(const char* label, int* current_item, const char* const* items, int items_count, int height_in_items)\n 8441  {\n 8442      const bool value_changed = Combo(label, current_item, Items_ArrayGetter, (void*)items, items_count, height_in_items);\n ....\n 8445  \n 8446  // Combo box helper allowing to pass all items in a single string.\n 8447: bool ImGui::Combo(const char* label, int* current_item, const char* items_separated_by_zeros, int height_in_items)\n 8448  {\n 8449      int items_count = 0;\n ....\n 8459  \n 8460  // Combo box function.\n 8461: bool ImGui::Combo(const char* label, int* current_item, bool (*items_getter)(void*, int, const char**), void* data, int items_count, int height_in_items)\n 8462  {\n 8463:     ImGuiWindow* window = GetCurrentWindow();\n 8464      if (window->SkipItems)\n 8465          return false;\n 8466  \n 8467:     ImGuiContext& g = *GImGui;\n 8468:     const ImGuiStyle& style = g.Style;\n 8469:     const ImGuiID id = window->GetID(label);\n 8470      const float w = CalcItemWidth();\n 8471  \n ....\n 8483  \n 8484      const ImRect value_bb(frame_bb.Min, frame_bb.Max - ImVec2(arrow_size, 0.0f));\n 8485:     RenderFrame(frame_bb.Min, frame_bb.Max, GetColorU32(ImGuiCol_FrameBg), true, style.FrameRounding);\n 8486:     RenderFrame(ImVec2(frame_bb.Max.x-arrow_size, frame_bb.Min.y), frame_bb.Max, GetColorU32(popup_open || hovered ? ImGuiCol_ButtonHovered : ImGuiCol_Button), true, style.FrameRounding); // FIXME-ROUNDING\n 8487      RenderCollapseTriangle(ImVec2(frame_bb.Max.x-arrow_size, frame_bb.Min.y) + style.FramePadding, true);\n 8488  \n ....\n 8535          SetNextWindowPos(popup_rect.Min);\n 8536          SetNextWindowSize(popup_rect.GetSize());\n 8537:         PushStyleVar(ImGuiStyleVar_WindowPadding, style.FramePadding);\n 8538  \n 8539:         const ImGuiWindowFlags flags = ImGuiWindowFlags_ComboBox | ((window->Flags & ImGuiWindowFlags_ShowBorders) ? ImGuiWindowFlags_ShowBorders : 0);\n 8540          if (BeginPopupEx(label, flags))\n 8541          {\n ....\n 8568  // Tip: pass an empty label (e.g. \"##dummy\") then you can use the space to draw other text or image.\n 8569  // But you need to make sure the ID is unique, e.g. enclose calls in PushID/PopID.\n 8570: bool ImGui::Selectable(const char* label, bool selected, ImGuiSelectableFlags flags, const ImVec2& size_arg)\n 8571  {\n 8572:     ImGuiWindow* window = GetCurrentWindow();\n 8573      if (window->SkipItems)\n 8574          return false;\n 8575  \n 8576:     ImGuiContext& g = *GImGui;\n 8577:     const ImGuiStyle& style = g.Style;\n 8578  \n 8579:     if ((flags & ImGuiSelectableFlags_SpanAllColumns) && window->DC.ColumnsCount > 1)\n 8580          PopClipRect();\n 8581  \n 8582:     ImGuiID id = window->GetID(label);\n 8583      ImVec2 label_size = CalcTextSize(label, NULL, true);\n 8584      ImVec2 size(size_arg.x != 0.0f ? size_arg.x : label_size.x, size_arg.y != 0.0f ? size_arg.y : label_size.y);\n ....\n 8590      // Fill horizontal space.\n 8591      ImVec2 window_padding = window->WindowPadding;\n 8592:     float max_x = (flags & ImGuiSelectableFlags_SpanAllColumns) ? GetWindowContentRegionMax().x : GetContentRegionMax().x;\n 8593      float w_draw = ImMax(label_size.x, window->Pos.x + max_x - window_padding.x - window->DC.CursorPos.x);\n 8594:     ImVec2 size_draw((size_arg.x != 0 && !(flags & ImGuiSelectableFlags_DrawFillAvailWidth)) ? size_arg.x : w_draw, size_arg.y != 0.0f ? size_arg.y : size.y);\n 8595      ImRect bb_with_spacing(pos, pos + size_draw);\n 8596:     if (size_arg.x == 0.0f || (flags & ImGuiSelectableFlags_DrawFillAvailWidth))\n 8597          bb_with_spacing.Max.x += window_padding.x;\n 8598  \n ....\n 8608      if (!ItemAdd(bb_with_spacing, &id))\n 8609      {\n 8610:         if ((flags & ImGuiSelectableFlags_SpanAllColumns) && window->DC.ColumnsCount > 1)\n 8611              PushColumnClipRect();\n 8612          return false;\n 8613      }\n 8614  \n 8615:     ImGuiButtonFlags button_flags = 0;\n 8616:     if (flags & ImGuiSelectableFlags_Menu) button_flags |= ImGuiButtonFlags_PressedOnClick;\n 8617:     if (flags & ImGuiSelectableFlags_MenuItem) button_flags |= ImGuiButtonFlags_PressedOnClick|ImGuiButtonFlags_PressedOnRelease;\n 8618:     if (flags & ImGuiSelectableFlags_Disabled) button_flags |= ImGuiButtonFlags_Disabled;\n 8619:     if (flags & ImGuiSelectableFlags_AllowDoubleClick) button_flags |= ImGuiButtonFlags_PressedOnClickRelease | ImGuiButtonFlags_PressedOnDoubleClick;\n 8620      bool hovered, held;\n 8621      bool pressed = ButtonBehavior(bb_with_spacing, id, &hovered, &held, button_flags);\n 8622:     if (flags & ImGuiSelectableFlags_Disabled)\n 8623          selected = false;\n 8624  \n ....\n 8626      if (hovered || selected)\n 8627      {\n 8628:         const ImU32 col = GetColorU32((held && hovered) ? ImGuiCol_HeaderActive : hovered ? ImGuiCol_HeaderHovered : ImGuiCol_Header);\n 8629          RenderFrame(bb_with_spacing.Min, bb_with_spacing.Max, col, false, 0.0f);\n 8630      }\n 8631  \n 8632:     if ((flags & ImGuiSelectableFlags_SpanAllColumns) && window->DC.ColumnsCount > 1)\n 8633      {\n 8634          PushColumnClipRect();\n ....\n 8636      }\n 8637  \n 8638:     if (flags & ImGuiSelectableFlags_Disabled) PushStyleColor(ImGuiCol_Text, g.Style.Colors[ImGuiCol_TextDisabled]);\n 8639      RenderTextClipped(bb.Min, bb_with_spacing.Max, label, NULL, &label_size, ImVec2(0.0f,0.0f));\n 8640:     if (flags & ImGuiSelectableFlags_Disabled) PopStyleColor();\n 8641  \n 8642      // Automatically close popups\n 8643:     if (pressed && !(flags & ImGuiSelectableFlags_DontClosePopups) && (window->Flags & ImGuiWindowFlags_Popup))\n 8644          CloseCurrentPopup();\n 8645      return pressed;\n 8646  }\n 8647  \n 8648: bool ImGui::Selectable(const char* label, bool* p_selected, ImGuiSelectableFlags flags, const ImVec2& size_arg)\n 8649  {\n 8650      if (Selectable(label, *p_selected, flags, size_arg))\n ....\n 8658  // Helper to calculate the size of a listbox and display a label on the right.\n 8659  // Tip: To have a list filling the entire window width, PushItemWidth(-1) and pass an empty label \"##empty\"\n 8660: bool ImGui::ListBoxHeader(const char* label, const ImVec2& size_arg)\n 8661  {\n 8662:     ImGuiWindow* window = GetCurrentWindow();\n 8663      if (window->SkipItems)\n 8664          return false;\n 8665  \n 8666:     const ImGuiStyle& style = GetStyle();\n 8667:     const ImGuiID id = GetID(label);\n 8668      const ImVec2 label_size = CalcTextSize(label, NULL, true);\n 8669  \n ....\n 8683  }\n 8684  \n 8685: bool ImGui::ListBoxHeader(const char* label, int items_count, int height_in_items)\n 8686  {\n 8687      // Size default to hold ~7 items. Fractional number of items helps seeing that we can scroll down/up without looking at scrollbar.\n ....\n 8699  }\n 8700  \n 8701: void ImGui::ListBoxFooter()\n 8702  {\n 8703:     ImGuiWindow* parent_window = GetParentWindow();\n 8704      const ImRect bb = parent_window->DC.LastItemRect;\n 8705:     const ImGuiStyle& style = GetStyle();\n 8706  \n 8707      EndChildFrame();\n ....\n 8715  }\n 8716  \n 8717: bool ImGui::ListBox(const char* label, int* current_item, const char* const* items, int items_count, int height_items)\n 8718  {\n 8719      const bool value_changed = ListBox(label, current_item, Items_ArrayGetter, (void*)items, items_count, height_items);\n ....\n 8721  }\n 8722  \n 8723: bool ImGui::ListBox(const char* label, int* current_item, bool (*items_getter)(void*, int, const char**), void* data, int items_count, int height_in_items)\n 8724  {\n 8725      if (!ListBoxHeader(label, items_count, height_in_items))\n ....\n 8728      // Assume all items have even height (= 1 line of text). If you need items of different or variable sizes you can create a custom version of ListBox() in your code without using the clipper.\n 8729      bool value_changed = false;\n 8730:     ImGuiListClipper clipper(items_count, GetTextLineHeightWithSpacing());\n 8731      while (clipper.Step())\n 8732          for (int i = clipper.DisplayStart; i < clipper.DisplayEnd; i++)\n ....\n 8749  }\n 8750  \n 8751: bool ImGui::MenuItem(const char* label, const char* shortcut, bool selected, bool enabled)\n 8752  {\n 8753:     ImGuiWindow* window = GetCurrentWindow();\n 8754      if (window->SkipItems)\n 8755          return false;\n 8756  \n 8757:     ImGuiContext& g = *GImGui;\n 8758      ImVec2 pos = window->DC.CursorPos;\n 8759      ImVec2 label_size = CalcTextSize(label, NULL, true);\n ....\n 8762      float extra_w = ImMax(0.0f, GetContentRegionAvail().x - w);\n 8763  \n 8764:     bool pressed = Selectable(label, false, ImGuiSelectableFlags_MenuItem | ImGuiSelectableFlags_DrawFillAvailWidth | (enabled ? 0 : ImGuiSelectableFlags_Disabled), ImVec2(w, 0.0f));\n 8765      if (shortcut_size.x > 0.0f)\n 8766      {\n 8767:         PushStyleColor(ImGuiCol_Text, g.Style.Colors[ImGuiCol_TextDisabled]);\n 8768          RenderText(pos + ImVec2(window->MenuColumns.Pos[1] + extra_w, 0.0f), shortcut, NULL, false);\n 8769          PopStyleColor();\n ....\n 8771  \n 8772      if (selected)\n 8773:         RenderCheckMark(pos + ImVec2(window->MenuColumns.Pos[2] + extra_w + g.FontSize * 0.20f, 0.0f), GetColorU32(enabled ? ImGuiCol_Text : ImGuiCol_TextDisabled));\n 8774  \n 8775      return pressed;\n 8776  }\n 8777  \n 8778: bool ImGui::MenuItem(const char* label, const char* shortcut, bool* p_selected, bool enabled)\n 8779  {\n 8780      if (MenuItem(label, shortcut, p_selected ? *p_selected : false, enabled))\n ....\n 8787  }\n 8788  \n 8789: bool ImGui::BeginMainMenuBar()\n 8790  {\n 8791:     ImGuiContext& g = *GImGui;\n 8792      SetNextWindowPos(ImVec2(0.0f, 0.0f));\n 8793      SetNextWindowSize(ImVec2(g.IO.DisplaySize.x, g.FontBaseSize + g.Style.FramePadding.y * 2.0f));\n 8794:     PushStyleVar(ImGuiStyleVar_WindowRounding, 0.0f);\n 8795:     PushStyleVar(ImGuiStyleVar_WindowMinSize, ImVec2(0,0));\n 8796:     if (!Begin(\"##MainMenuBar\", NULL, ImGuiWindowFlags_NoTitleBar|ImGuiWindowFlags_NoResize|ImGuiWindowFlags_NoMove|ImGuiWindowFlags_NoScrollbar|ImGuiWindowFlags_NoSavedSettings|ImGuiWindowFlags_MenuBar)\n 8797          || !BeginMenuBar())\n 8798      {\n ....\n 8805  }\n 8806  \n 8807: void ImGui::EndMainMenuBar()\n 8808  {\n 8809      EndMenuBar();\n ....\n 8812  }\n 8813  \n 8814: bool ImGui::BeginMenuBar()\n 8815  {\n 8816:     ImGuiWindow* window = GetCurrentWindow();\n 8817      if (window->SkipItems)\n 8818          return false;\n 8819:     if (!(window->Flags & ImGuiWindowFlags_MenuBar))\n 8820          return false;\n 8821  \n ....\n 8826      PushClipRect(ImVec2(ImFloor(rect.Min.x+0.5f), ImFloor(rect.Min.y + window->BorderSize + 0.5f)), ImVec2(ImFloor(rect.Max.x+0.5f), ImFloor(rect.Max.y+0.5f)), false);\n 8827      window->DC.CursorPos = ImVec2(rect.Min.x + window->DC.MenuBarOffsetX, rect.Min.y);// + g.Style.FramePadding.y);\n 8828:     window->DC.LayoutType = ImGuiLayoutType_Horizontal;\n 8829      window->DC.MenuBarAppending = true;\n 8830      AlignFirstTextHeightToWidgets();\n ....\n 8832  }\n 8833  \n 8834: void ImGui::EndMenuBar()\n 8835  {\n 8836:     ImGuiWindow* window = GetCurrentWindow();\n 8837      if (window->SkipItems)\n 8838          return;\n 8839  \n 8840:     IM_ASSERT(window->Flags & ImGuiWindowFlags_MenuBar);\n 8841      IM_ASSERT(window->DC.MenuBarAppending);\n 8842      PopClipRect();\n ....\n 8845      window->DC.GroupStack.back().AdvanceCursor = false;\n 8846      EndGroup();\n 8847:     window->DC.LayoutType = ImGuiLayoutType_Vertical;\n 8848      window->DC.MenuBarAppending = false;\n 8849  }\n 8850  \n 8851: bool ImGui::BeginMenu(const char* label, bool enabled)\n 8852  {\n 8853:     ImGuiWindow* window = GetCurrentWindow();\n 8854      if (window->SkipItems)\n 8855          return false;\n 8856  \n 8857:     ImGuiContext& g = *GImGui;\n 8858:     const ImGuiStyle& style = g.Style;\n 8859:     const ImGuiID id = window->GetID(label);\n 8860  \n 8861      ImVec2 label_size = CalcTextSize(label, NULL, true);\n 8862:     ImGuiWindow* backed_focused_window = g.FocusedWindow;\n 8863  \n 8864      bool pressed;\n 8865      bool menu_is_open = IsPopupOpen(id);\n 8866:     bool menuset_is_open = !(window->Flags & ImGuiWindowFlags_Popup) && (g.OpenPopupStack.Size > g.CurrentPopupStack.Size && g.OpenPopupStack[g.CurrentPopupStack.Size].ParentMenuSet == window->GetID(\"##menus\"));\n 8867      if (menuset_is_open)\n 8868          g.FocusedWindow = window;\n ....\n 8870      // The reference position stored in popup_pos will be used by Begin() to find a suitable position for the child menu (using FindBestPopupWindowPos).\n 8871      ImVec2 popup_pos, pos = window->DC.CursorPos;\n 8872:     if (window->DC.LayoutType == ImGuiLayoutType_Horizontal)\n 8873      {\n 8874          popup_pos = ImVec2(pos.x - window->WindowPadding.x, pos.y - style.FramePadding.y + window->MenuBarHeight());\n 8875          window->DC.CursorPos.x += (float)(int)(style.ItemSpacing.x * 0.5f);\n 8876:         PushStyleVar(ImGuiStyleVar_ItemSpacing, style.ItemSpacing * 2.0f);\n 8877          float w = label_size.x;\n 8878:         pressed = Selectable(label, menu_is_open, ImGuiSelectableFlags_Menu | ImGuiSelectableFlags_DontClosePopups | (!enabled ? ImGuiSelectableFlags_Disabled : 0), ImVec2(w, 0.0f));\n 8879          PopStyleVar();\n 8880          SameLine();\n ....\n 8886          float w = window->MenuColumns.DeclColumns(label_size.x, 0.0f, (float)(int)(g.FontSize * 1.20f)); // Feedback to next frame\n 8887          float extra_w = ImMax(0.0f, GetContentRegionAvail().x - w);\n 8888:         pressed = Selectable(label, menu_is_open, ImGuiSelectableFlags_Menu | ImGuiSelectableFlags_DontClosePopups | ImGuiSelectableFlags_DrawFillAvailWidth | (!enabled ? ImGuiSelectableFlags_Disabled : 0), ImVec2(w, 0.0f));\n 8889:         if (!enabled) PushStyleColor(ImGuiCol_Text, g.Style.Colors[ImGuiCol_TextDisabled]);\n 8890          RenderCollapseTriangle(pos + ImVec2(window->MenuColumns.Pos[2] + extra_w + g.FontSize * 0.20f, 0.0f), false);\n 8891          if (!enabled) PopStyleColor();\n ....\n 8897  \n 8898      bool want_open = false, want_close = false;\n 8899:     if (window->Flags & (ImGuiWindowFlags_Popup|ImGuiWindowFlags_ChildMenu))\n 8900      {\n 8901          // Implement http://bjk5.com/post/44698559168/breaking-down-amazons-mega-dropdown to avoid using timers, so menus feels more reactive.\n ....\n 8903          if (g.HoveredWindow == window && g.OpenPopupStack.Size > g.CurrentPopupStack.Size && g.OpenPopupStack[g.CurrentPopupStack.Size].ParentWindow == window)\n 8904          {\n 8905:             if (ImGuiWindow* next_window = g.OpenPopupStack[g.CurrentPopupStack.Size].Window)\n 8906              {\n 8907                  ImRect next_window_rect = next_window->Rect();\n ....\n 8931          want_close = true;\n 8932      if (want_close && IsPopupOpen(id))\n 8933:         ClosePopupToLevel(GImGui->CurrentPopupStack.Size);\n 8934  \n 8935      if (!menu_is_open && want_open && g.OpenPopupStack.Size > g.CurrentPopupStack.Size)\n ....\n 8946      if (menu_is_open)\n 8947      {\n 8948:         SetNextWindowPos(popup_pos, ImGuiSetCond_Always);\n 8949:         ImGuiWindowFlags flags = ImGuiWindowFlags_ShowBorders | ((window->Flags & (ImGuiWindowFlags_Popup|ImGuiWindowFlags_ChildMenu)) ? ImGuiWindowFlags_ChildMenu|ImGuiWindowFlags_ChildWindow : ImGuiWindowFlags_ChildMenu);\n 8950          menu_is_open = BeginPopupEx(label, flags); // menu_is_open can be 'false' when the popup is completely clipped (e.g. zero size display)\n 8951      }\n ....\n 8954  }\n 8955  \n 8956: void ImGui::EndMenu()\n 8957  {\n 8958      EndPopup();\n ....\n 8961  // A little colored square. Return true when clicked.\n 8962  // FIXME: May want to display/ignore the alpha component in the color display? Yet show it in the tooltip.\n 8963: bool ImGui::ColorButton(const ImVec4& col, bool small_height, bool outline_border)\n 8964  {\n 8965:     ImGuiWindow* window = GetCurrentWindow();\n 8966      if (window->SkipItems)\n 8967          return false;\n 8968  \n 8969:     ImGuiContext& g = *GImGui;\n 8970:     const ImGuiStyle& style = g.Style;\n 8971:     const ImGuiID id = window->GetID(\"#colorbutton\");\n 8972      const float square_size = g.FontSize;\n 8973      const ImRect bb(window->DC.CursorPos, window->DC.CursorPos + ImVec2(square_size + style.FramePadding.y*2, square_size + (small_height ? 0 : style.FramePadding.y*2)));\n ....\n 8986  }\n 8987  \n 8988: bool ImGui::ColorEdit3(const char* label, float col[3])\n 8989  {\n 8990      float col4[4];\n ....\n 9002  // Edit colors components (each component in 0.0f..1.0f range\n 9003  // Use CTRL-Click to input value and TAB to go to next item.\n 9004: bool ImGui::ColorEdit4(const char* label, float col[4], bool alpha)\n 9005  {\n 9006:     ImGuiWindow* window = GetCurrentWindow();\n 9007      if (window->SkipItems)\n 9008          return false;\n 9009  \n 9010:     ImGuiContext& g = *GImGui;\n 9011:     const ImGuiStyle& style = g.Style;\n 9012:     const ImGuiID id = window->GetID(label);\n 9013      const float w_full = CalcItemWidth();\n 9014      const float square_sz = (g.FontSize + style.FramePadding.y * 2.0f);\n 9015  \n 9016:     ImGuiColorEditMode edit_mode = window->DC.ColorEditMode;\n 9017:     if (edit_mode == ImGuiColorEditMode_UserSelect || edit_mode == ImGuiColorEditMode_UserSelectShowButton)\n 9018          edit_mode = g.ColorEditModeStorage.GetInt(id, 0) % 3;\n 9019  \n 9020      float f[4] = { col[0], col[1], col[2], col[3] };\n 9021:     if (edit_mode == ImGuiColorEditMode_HSV)\n 9022          ColorConvertRGBtoHSV(f[0], f[1], f[2], f[0], f[1], f[2]);\n 9023  \n ....\n 9033      switch (edit_mode)\n 9034      {\n 9035:     case ImGuiColorEditMode_RGB:\n 9036:     case ImGuiColorEditMode_HSV:\n 9037          {\n 9038              // RGB/HSV 0..255 Sliders\n ....\n 9064          }\n 9065          break;\n 9066:     case ImGuiColorEditMode_HEX:\n 9067          {\n 9068              // RGB Hexadecimal Input\n ....\n 9074                  ImFormatString(buf, IM_ARRAYSIZE(buf), \"#%02X%02X%02X\", i[0], i[1], i[2]);\n 9075              PushItemWidth(w_slider_all - style.ItemInnerSpacing.x);\n 9076:             if (InputText(\"##Text\", buf, IM_ARRAYSIZE(buf), ImGuiInputTextFlags_CharsHexadecimal | ImGuiInputTextFlags_CharsUppercase))\n 9077              {\n 9078                  value_changed |= true;\n ....\n 9101          SetTooltip(\"Color:\\n(%.2f,%.2f,%.2f,%.2f)\\n#%02X%02X%02X%02X\", col[0], col[1], col[2], col[3], IM_F32_TO_INT8_SAT(col[0]), IM_F32_TO_INT8_SAT(col[1]), IM_F32_TO_INT8_SAT(col[2]), IM_F32_TO_INT8_SAT(col[3]));\n 9102  \n 9103:     if (window->DC.ColorEditMode == ImGuiColorEditMode_UserSelectShowButton)\n 9104      {\n 9105          SameLine(0, style.ItemInnerSpacing.x);\n 9106          const char* button_titles[3] = { \"RGB\", \"HSV\", \"HEX\" };\n 9107:         if (ButtonEx(button_titles[edit_mode], ImVec2(0,0), ImGuiButtonFlags_DontClosePopups))\n 9108              g.ColorEditModeStorage.SetInt(id, (edit_mode + 1) % 3); // Don't set local copy of 'edit_mode' right away!\n 9109      }\n ....\n 9112      if (label != label_display_end)\n 9113      {\n 9114:         SameLine(0, (window->DC.ColorEditMode == ImGuiColorEditMode_UserSelectShowButton) ? -1.0f : style.ItemInnerSpacing.x);\n 9115          TextUnformatted(label, label_display_end);\n 9116      }\n ....\n 9137  }\n 9138  \n 9139: void ImGui::ColorEditMode(ImGuiColorEditMode mode)\n 9140  {\n 9141:     ImGuiWindow* window = GetCurrentWindow();\n 9142      window->DC.ColorEditMode = mode;\n 9143  }\n 9144  \n 9145  // Horizontal separating line.\n 9146: void ImGui::Separator()\n 9147  {\n 9148:     ImGuiWindow* window = GetCurrentWindow();\n 9149      if (window->SkipItems)\n 9150          return;\n ....\n 9167      }\n 9168  \n 9169:     window->DrawList->AddLine(bb.Min, ImVec2(bb.Max.x,bb.Min.y), GetColorU32(ImGuiCol_Border));\n 9170  \n 9171:     ImGuiContext& g = *GImGui;\n 9172      if (g.LogEnabled)\n 9173          LogText(IM_NEWLINE \"--------------------------------\");\n ....\n 9180  }\n 9181  \n 9182: void ImGui::Spacing()\n 9183  {\n 9184:     ImGuiWindow* window = GetCurrentWindow();\n 9185      if (window->SkipItems)\n 9186          return;\n ....\n 9188  }\n 9189  \n 9190: void ImGui::Dummy(const ImVec2& size)\n 9191  {\n 9192:     ImGuiWindow* window = GetCurrentWindow();\n 9193      if (window->SkipItems)\n 9194          return;\n ....\n 9199  }\n 9200  \n 9201: bool ImGui::IsRectVisible(const ImVec2& size)\n 9202  {\n 9203:     ImGuiWindow* window = GetCurrentWindowRead();\n 9204      return window->ClipRect.Overlaps(ImRect(window->DC.CursorPos, window->DC.CursorPos + size));\n 9205  }\n 9206  \n 9207: bool ImGui::IsRectVisible(const ImVec2& rect_min, const ImVec2& rect_max)\n 9208  {\n 9209:     ImGuiWindow* window = GetCurrentWindowRead();\n 9210      return window->ClipRect.Overlaps(ImRect(rect_min, rect_max));\n 9211  }\n 9212  \n 9213  // Lock horizontal starting position + capture group bounding box into one \"item\" (so you can use IsItemHovered() or layout primitives such as SameLine() on whole group, etc.)\n 9214: void ImGui::BeginGroup()\n 9215  {\n 9216:     ImGuiWindow* window = GetCurrentWindow();\n 9217  \n 9218      window->DC.GroupStack.resize(window->DC.GroupStack.Size + 1);\n 9219:     ImGuiGroupData& group_data = window->DC.GroupStack.back();\n 9220      group_data.BackupCursorPos = window->DC.CursorPos;\n 9221      group_data.BackupCursorMaxPos = window->DC.CursorMaxPos;\n ....\n 9225      group_data.BackupCurrentLineTextBaseOffset = window->DC.CurrentLineTextBaseOffset;\n 9226      group_data.BackupLogLinePosY = window->DC.LogLinePosY;\n 9227:     group_data.BackupActiveIdIsAlive = GImGui->ActiveIdIsAlive;\n 9228      group_data.AdvanceCursor = true;\n 9229  \n ....\n 9235  }\n 9236  \n 9237: void ImGui::EndGroup()\n 9238  {\n 9239:     ImGuiContext& g = *GImGui;\n 9240:     ImGuiWindow* window = GetCurrentWindow();\n 9241  \n 9242      IM_ASSERT(!window->DC.GroupStack.empty());  // Mismatched BeginGroup()/EndGroup() calls\n 9243  \n 9244:     ImGuiGroupData& group_data = window->DC.GroupStack.back();\n 9245  \n 9246      ImRect group_bb(group_data.BackupCursorPos, window->DC.CursorMaxPos);\n ....\n 9281  //      spacing_w < 0   : use default spacing if pos_x == 0, no spacing if pos_x != 0\n 9282  //      spacing_w >= 0  : enforce spacing amount\n 9283: void ImGui::SameLine(float pos_x, float spacing_w)\n 9284  {\n 9285:     ImGuiWindow* window = GetCurrentWindow();\n 9286      if (window->SkipItems)\n 9287          return;\n 9288  \n 9289:     ImGuiContext& g = *GImGui;\n 9290      if (pos_x != 0.0f)\n 9291      {\n ....\n 9304  }\n 9305  \n 9306: void ImGui::NewLine()\n 9307  {\n 9308:     ImGuiWindow* window = GetCurrentWindow();\n 9309      if (window->SkipItems)\n 9310          return;\n ....\n 9312          ItemSize(ImVec2(0,0));\n 9313      else\n 9314:         ItemSize(ImVec2(0.0f, GImGui->FontSize));\n 9315  }\n 9316  \n 9317: void ImGui::NextColumn()\n 9318  {\n 9319:     ImGuiWindow* window = GetCurrentWindow();\n 9320      if (window->SkipItems || window->DC.ColumnsCount <= 1)\n 9321          return;\n 9322  \n 9323:     ImGuiContext& g = *GImGui;\n 9324      PopItemWidth();\n 9325      PopClipRect();\n ....\n 9348  }\n 9349  \n 9350: int ImGui::GetColumnIndex()\n 9351  {\n 9352:     ImGuiWindow* window = GetCurrentWindowRead();\n 9353      return window->DC.ColumnsCurrent;\n 9354  }\n 9355  \n 9356: int ImGui::GetColumnsCount()\n 9357  {\n 9358:     ImGuiWindow* window = GetCurrentWindowRead();\n 9359      return window->DC.ColumnsCount;\n 9360  }\n ....\n 9364      // Active (dragged) column always follow mouse. The reason we need this is that dragging a column to the right edge of an auto-resizing\n 9365      // window creates a feedback loop because we store normalized positions. So while dragging we enforce absolute positioning.\n 9366:     ImGuiContext& g = *GImGui;\n 9367:     ImGuiWindow* window = ImGui::GetCurrentWindowRead();\n 9368      IM_ASSERT(column_index > 0); // We cannot drag column 0. If you get this assert you may have a conflict between the ID of your columns and another widgets.\n 9369:     IM_ASSERT(g.ActiveId == window->DC.ColumnsSetId + ImGuiID(column_index));\n 9370  \n 9371      float x = g.IO.MousePos.x - g.ActiveIdClickOffset.x - window->Pos.x;\n 9372:     x = ImClamp(x, ImGui::GetColumnOffset(column_index-1)+g.Style.ColumnsMinSpacing, ImGui::GetColumnOffset(column_index+1)-g.Style.ColumnsMinSpacing);\n 9373  \n 9374      return (float)(int)x;\n 9375  }\n 9376  \n 9377: float ImGui::GetColumnOffset(int column_index)\n 9378  {\n 9379:     ImGuiContext& g = *GImGui;\n 9380:     ImGuiWindow* window = GetCurrentWindowRead();\n 9381      if (column_index < 0)\n 9382          column_index = window->DC.ColumnsCurrent;\n ....\n 9384      if (g.ActiveId)\n 9385      {\n 9386:         const ImGuiID column_id = window->DC.ColumnsSetId + ImGuiID(column_index);\n 9387          if (g.ActiveId == column_id)\n 9388              return GetDraggedColumnOffset(column_index);\n ....\n 9395  }\n 9396  \n 9397: void ImGui::SetColumnOffset(int column_index, float offset)\n 9398  {\n 9399:     ImGuiWindow* window = GetCurrentWindow();\n 9400      if (column_index < 0)\n 9401          column_index = window->DC.ColumnsCurrent;\n ....\n 9405      window->DC.ColumnsData[column_index].OffsetNorm = t;\n 9406  \n 9407:     const ImGuiID column_id = window->DC.ColumnsSetId + ImGuiID(column_index);\n 9408      window->DC.StateStorage->SetFloat(column_id, t);\n 9409  }\n 9410  \n 9411: float ImGui::GetColumnWidth(int column_index)\n 9412  {\n 9413:     ImGuiWindow* window = GetCurrentWindowRead();\n 9414      if (column_index < 0)\n 9415          column_index = window->DC.ColumnsCurrent;\n ....\n 9421  static void PushColumnClipRect(int column_index)\n 9422  {\n 9423:     ImGuiWindow* window = ImGui::GetCurrentWindow();\n 9424      if (column_index < 0)\n 9425          column_index = window->DC.ColumnsCurrent;\n 9426  \n 9427:     float x1 = ImFloor(0.5f + window->Pos.x + ImGui::GetColumnOffset(column_index) - 1.0f);\n 9428:     float x2 = ImFloor(0.5f + window->Pos.x + ImGui::GetColumnOffset(column_index+1) - 1.0f);\n 9429:     ImGui::PushClipRect(ImVec2(x1,-FLT_MAX), ImVec2(x2,+FLT_MAX), true);\n 9430  }\n 9431  \n 9432: void ImGui::Columns(int columns_count, const char* id, bool border)\n 9433  {\n 9434:     ImGuiContext& g = *GImGui;\n 9435:     ImGuiWindow* window = GetCurrentWindow();\n 9436      IM_ASSERT(columns_count >= 1);\n 9437  \n ....\n 9456          {\n 9457              float x = window->Pos.x + GetColumnOffset(i);\n 9458:             const ImGuiID column_id = window->DC.ColumnsSetId + ImGuiID(i);\n 9459              const ImRect column_rect(ImVec2(x-4,y1),ImVec2(x+4,y2));\n 9460              if (IsClippedEx(column_rect, &column_id, false))\n ....\n 9464              ButtonBehavior(column_rect, column_id, &hovered, &held);\n 9465              if (hovered || held)\n 9466:                 g.MouseCursor = ImGuiMouseCursor_ResizeEW;\n 9467  \n 9468              // Draw before resize so our items positioning are in sync with the line being drawn\n 9469:             const ImU32 col = GetColorU32(held ? ImGuiCol_ColumnActive : hovered ? ImGuiCol_ColumnHovered : ImGuiCol_Column);\n 9470              const float xi = (float)(int)x;\n 9471              window->DrawList->AddLine(ImVec2(xi, y1+1.0f), ImVec2(xi, y2), col);\n ....\n 9494      const float content_region_width = (window->SizeContentsExplicit.x != 0.0f) ? window->SizeContentsExplicit.x : window->Size.x;\n 9495      window->DC.ColumnsMinX = window->DC.IndentX; // Lock our horizontal range\n 9496:     window->DC.ColumnsMaxX = content_region_width - window->Scroll.x - ((window->Flags & ImGuiWindowFlags_NoScrollbar) ? 0 : g.Style.ScrollbarSize);// - window->WindowPadding().x;\n 9497      window->DC.ColumnsStartPosY = window->DC.CursorPos.y;\n 9498      window->DC.ColumnsCellMinY = window->DC.ColumnsCellMaxY = window->DC.CursorPos.y;\n ....\n 9506          for (int column_index = 0; column_index < columns_count + 1; column_index++)\n 9507          {\n 9508:             const ImGuiID column_id = window->DC.ColumnsSetId + ImGuiID(column_index);\n 9509              KeepAliveID(column_id);\n 9510              const float default_t = column_index / (float)window->DC.ColumnsCount;\n ....\n 9522  }\n 9523  \n 9524: void ImGui::Indent(float indent_w)\n 9525  {\n 9526:     ImGuiContext& g = *GImGui;\n 9527:     ImGuiWindow* window = GetCurrentWindow();\n 9528      window->DC.IndentX += (indent_w > 0.0f) ? indent_w : g.Style.IndentSpacing;\n 9529      window->DC.CursorPos.x = window->Pos.x + window->DC.IndentX + window->DC.ColumnsOffsetX;\n 9530  }\n 9531  \n 9532: void ImGui::Unindent(float indent_w)\n 9533  {\n 9534:     ImGuiContext& g = *GImGui;\n 9535:     ImGuiWindow* window = GetCurrentWindow();\n 9536      window->DC.IndentX -= (indent_w > 0.0f) ? indent_w : g.Style.IndentSpacing;\n 9537      window->DC.CursorPos.x = window->Pos.x + window->DC.IndentX + window->DC.ColumnsOffsetX;\n 9538  }\n 9539  \n 9540: void ImGui::TreePush(const char* str_id)\n 9541  {\n 9542:     ImGuiWindow* window = GetCurrentWindow();\n 9543      Indent();\n 9544      window->DC.TreeDepth++;\n ....\n 9546  }\n 9547  \n 9548: void ImGui::TreePush(const void* ptr_id)\n 9549  {\n 9550:     ImGuiWindow* window = GetCurrentWindow();\n 9551      Indent();\n 9552      window->DC.TreeDepth++;\n ....\n 9554  }\n 9555  \n 9556: void ImGui::TreePushRawID(ImGuiID id)\n 9557  {\n 9558:     ImGuiWindow* window = GetCurrentWindow();\n 9559      Indent();\n 9560      window->DC.TreeDepth++;\n ....\n 9562  }\n 9563  \n 9564: void ImGui::TreePop()\n 9565  {\n 9566:     ImGuiWindow* window = GetCurrentWindow();\n 9567      Unindent();\n 9568      window->DC.TreeDepth--;\n ....\n 9570  }\n 9571  \n 9572: void ImGui::Value(const char* prefix, bool b)\n 9573  {\n 9574      Text(\"%s: %s\", prefix, (b ? \"true\" : \"false\"));\n 9575  }\n 9576  \n 9577: void ImGui::Value(const char* prefix, int v)\n 9578  {\n 9579      Text(\"%s: %d\", prefix, v);\n 9580  }\n 9581  \n 9582: void ImGui::Value(const char* prefix, unsigned int v)\n 9583  {\n 9584      Text(\"%s: %d\", prefix, v);\n 9585  }\n 9586  \n 9587: void ImGui::Value(const char* prefix, float v, const char* float_format)\n 9588  {\n 9589      if (float_format)\n ....\n 9600  \n 9601  // FIXME: May want to remove those helpers?\n 9602: void ImGui::ValueColor(const char* prefix, const ImVec4& v)\n 9603  {\n 9604      Text(\"%s: (%.2f,%.2f,%.2f,%.2f)\", prefix, v.x, v.y, v.z, v.w);\n ....\n 9607  }\n 9608  \n 9609: void ImGui::ValueColor(const char* prefix, ImU32 v)\n 9610  {\n 9611      Text(\"%s: %08X\", prefix, v);\n ....\n 9618  //-----------------------------------------------------------------------------\n 9619  \n 9620: #if defined(_WIN32) && !defined(_WINDOWS_) && (!defined(IMGUI_DISABLE_WIN32_DEFAULT_CLIPBOARD_FUNCS) || !defined(IMGUI_DISABLE_WIN32_DEFAULT_IME_FUNCS))\n 9621  #undef WIN32_LEAN_AND_MEAN\n 9622  #define WIN32_LEAN_AND_MEAN\n ....\n 9625  \n 9626  // Win32 API clipboard implementation\n 9627: #if defined(_WIN32) && !defined(IMGUI_DISABLE_WIN32_DEFAULT_CLIPBOARD_FUNCS)\n 9628  \n 9629  #ifdef _MSC_VER\n ....\n 9669  #else\n 9670  \n 9671: // Local ImGui-only clipboard implementation, if user hasn't defined better clipboard handlers\n 9672  static const char* GetClipboardTextFn_DefaultImpl(void*)\n 9673  {\n 9674:     return GImGui->PrivateClipboard;\n 9675  }\n 9676  \n 9677: // Local ImGui-only clipboard implementation, if user hasn't defined better clipboard handlers\n 9678  static void SetClipboardTextFn_DefaultImpl(void*, const char* text)\n 9679  {\n 9680:     ImGuiContext& g = *GImGui;\n 9681      if (g.PrivateClipboard)\n 9682      {\n 9683:         ImGui::MemFree(g.PrivateClipboard);\n 9684          g.PrivateClipboard = NULL;\n 9685      }\n 9686      const char* text_end = text + strlen(text);\n 9687:     g.PrivateClipboard = (char*)ImGui::MemAlloc((size_t)(text_end - text) + 1);\n 9688      memcpy(g.PrivateClipboard, text, (size_t)(text_end - text));\n 9689      g.PrivateClipboard[(int)(text_end - text)] = 0;\n ....\n 9693  \n 9694  // Win32 API IME support (for Asian languages, etc.)\n 9695: #if defined(_WIN32) && !defined(__GNUC__) && !defined(IMGUI_DISABLE_WIN32_DEFAULT_IME_FUNCS)\n 9696  \n 9697  #include <imm.h>\n ....\n 9703  {\n 9704      // Notify OS Input Method Editor of text input position\n 9705:     if (HWND hwnd = (HWND)GImGui->IO.ImeWindowHandle)\n 9706          if (HIMC himc = ImmGetContext(hwnd))\n 9707          {\n ....\n 9724  //-----------------------------------------------------------------------------\n 9725  \n 9726: void ImGui::ShowMetricsWindow(bool* p_open)\n 9727  {\n 9728:     if (ImGui::Begin(\"ImGui Metrics\", p_open))\n 9729      {\n 9730:         ImGui::Text(\"ImGui %s\", ImGui::GetVersion());\n 9731:         ImGui::Text(\"Application average %.3f ms/frame (%.1f FPS)\", 1000.0f / ImGui::GetIO().Framerate, ImGui::GetIO().Framerate);\n 9732:         ImGui::Text(\"%d vertices, %d indices (%d triangles)\", ImGui::GetIO().MetricsRenderVertices, ImGui::GetIO().MetricsRenderIndices, ImGui::GetIO().MetricsRenderIndices / 3);\n 9733:         ImGui::Text(\"%d allocations\", ImGui::GetIO().MetricsAllocs);\n 9734          static bool show_clip_rects = true;\n 9735:         ImGui::Checkbox(\"Show clipping rectangles when hovering a ImDrawCmd\", &show_clip_rects);\n 9736:         ImGui::Separator();\n 9737  \n 9738          struct Funcs\n ....\n 9740              static void NodeDrawList(ImDrawList* draw_list, const char* label)\n 9741              {\n 9742:                 bool node_open = ImGui::TreeNode(draw_list, \"%s: '%s' %d vtx, %d indices, %d cmds\", label, draw_list->_OwnerName ? draw_list->_OwnerName : \"\", draw_list->VtxBuffer.Size, draw_list->IdxBuffer.Size, draw_list->CmdBuffer.Size);\n 9743:                 if (draw_list == ImGui::GetWindowDrawList())\n 9744                  {\n 9745:                     ImGui::SameLine();\n 9746:                     ImGui::TextColored(ImColor(255,100,100), \"CURRENTLY APPENDING\"); // Can't display stats for active draw list! (we don't have the data double-buffered)\n 9747:                     if (node_open) ImGui::TreePop();\n 9748                      return;\n 9749                  }\n ....\n 9751                      return;\n 9752  \n 9753:                 ImDrawList* overlay_draw_list = &GImGui->OverlayDrawList;   // Render additional visuals into the top-most draw list\n 9754                  overlay_draw_list->PushClipRectFullScreen();\n 9755                  int elem_offset = 0;\n ....\n 9758                      if (pcmd->UserCallback)\n 9759                      {\n 9760:                         ImGui::BulletText(\"Callback %p, user_data %p\", pcmd->UserCallback, pcmd->UserCallbackData);\n 9761                          continue;\n 9762                      }\n 9763                      ImDrawIdx* idx_buffer = (draw_list->IdxBuffer.Size > 0) ? draw_list->IdxBuffer.Data : NULL;\n 9764:                     bool pcmd_node_open = ImGui::TreeNode((void*)(pcmd - draw_list->CmdBuffer.begin()), \"Draw %-4d %s vtx, tex = %p, clip_rect = (%.0f,%.0f)..(%.0f,%.0f)\", pcmd->ElemCount, draw_list->IdxBuffer.Size > 0 ? \"indexed\" : \"non-indexed\", pcmd->TextureId, pcmd->ClipRect.x, pcmd->ClipRect.y, pcmd->ClipRect.z, pcmd->ClipRect.w);\n 9765:                     if (show_clip_rects && ImGui::IsItemHovered())\n 9766                      {\n 9767                          ImRect clip_rect = pcmd->ClipRect;\n ....\n 9774                      if (!pcmd_node_open)\n 9775                          continue;\n 9776:                     ImGuiListClipper clipper(pcmd->ElemCount/3); // Manually coarse clip our print out of individual vertices to save CPU, only items that may be visible.\n 9777                      while (clipper.Step())\n 9778                          for (int prim = clipper.DisplayStart, vtx_i = elem_offset + clipper.DisplayStart*3; prim < clipper.DisplayEnd; prim++)\n ....\n 9786                                  buf_p += sprintf(buf_p, \"%s %04d { pos = (%8.2f,%8.2f), uv = (%.6f,%.6f), col = %08X }\\n\", (n == 0) ? \"vtx\" : \"   \", vtx_i, v.pos.x, v.pos.y, v.uv.x, v.uv.y, v.col);\n 9787                              }\n 9788:                             ImGui::Selectable(buf, false);\n 9789:                             if (ImGui::IsItemHovered())\n 9790                                  overlay_draw_list->AddPolyline(triangles_pos, 3, IM_COL32(255,255,0,255), true, 1.0f, false);  // Add triangle without AA, more readable for large-thin triangle\n 9791                          }\n 9792:                     ImGui::TreePop();\n 9793                  }\n 9794                  overlay_draw_list->PopClipRect();\n 9795:                 ImGui::TreePop();\n 9796              }\n 9797  \n 9798:             static void NodeWindows(ImVector<ImGuiWindow*>& windows, const char* label)\n 9799              {\n 9800:                 if (!ImGui::TreeNode(label, \"%s (%d)\", label, windows.Size))\n 9801                      return;\n 9802                  for (int i = 0; i < windows.Size; i++)\n 9803                      Funcs::NodeWindow(windows[i], \"Window\");\n 9804:                 ImGui::TreePop();\n 9805              }\n 9806  \n 9807:             static void NodeWindow(ImGuiWindow* window, const char* label)\n 9808              {\n 9809:                 if (!ImGui::TreeNode(window, \"%s '%s', %d @ 0x%p\", label, window->Name, window->Active || window->WasActive, window))\n 9810                      return;\n 9811                  NodeDrawList(window->DrawList, \"DrawList\");\n 9812:                 ImGui::BulletText(\"Pos: (%.1f,%.1f)\", window->Pos.x, window->Pos.y);\n 9813:                 ImGui::BulletText(\"Size: (%.1f,%.1f), SizeContents (%.1f,%.1f)\", window->Size.x, window->Size.y, window->SizeContents.x, window->SizeContents.y);\n 9814:                 ImGui::BulletText(\"Scroll: (%.2f,%.2f)\", window->Scroll.x, window->Scroll.y);\n 9815                  if (window->RootWindow != window) NodeWindow(window->RootWindow, \"RootWindow\");\n 9816                  if (window->DC.ChildWindows.Size > 0) NodeWindows(window->DC.ChildWindows, \"ChildWindows\");\n 9817:                 ImGui::BulletText(\"Storage: %d bytes\", window->StateStorage.Data.Size * (int)sizeof(ImGuiStorage::Pair));\n 9818:                 ImGui::TreePop();\n 9819              }\n 9820          };\n 9821  \n 9822:         ImGuiContext& g = *GImGui;                // Access private state\n 9823          Funcs::NodeWindows(g.Windows, \"Windows\");\n 9824:         if (ImGui::TreeNode(\"DrawList\", \"Active DrawLists (%d)\", g.RenderDrawLists[0].Size))\n 9825          {\n 9826              for (int i = 0; i < g.RenderDrawLists[0].Size; i++)\n 9827                  Funcs::NodeDrawList(g.RenderDrawLists[0][i], \"DrawList\");\n 9828:             ImGui::TreePop();\n 9829          }\n 9830:         if (ImGui::TreeNode(\"Popups\", \"Open Popups Stack (%d)\", g.OpenPopupStack.Size))\n 9831          {\n 9832              for (int i = 0; i < g.OpenPopupStack.Size; i++)\n 9833              {\n 9834:                 ImGuiWindow* window = g.OpenPopupStack[i].Window;\n 9835:                 ImGui::BulletText(\"PopupID: %08x, Window: '%s'%s%s\", g.OpenPopupStack[i].PopupId, window ? window->Name : \"NULL\", window && (window->Flags & ImGuiWindowFlags_ChildWindow) ? \" ChildWindow\" : \"\", window && (window->Flags & ImGuiWindowFlags_ChildMenu) ? \" ChildMenu\" : \"\");\n 9836              }\n 9837:             ImGui::TreePop();\n 9838          }\n 9839:         if (ImGui::TreeNode(\"Basic state\"))\n 9840          {\n 9841:             ImGui::Text(\"FocusedWindow: '%s'\", g.FocusedWindow ? g.FocusedWindow->Name : \"NULL\");\n 9842:             ImGui::Text(\"HoveredWindow: '%s'\", g.HoveredWindow ? g.HoveredWindow->Name : \"NULL\");\n 9843:             ImGui::Text(\"HoveredRootWindow: '%s'\", g.HoveredRootWindow ? g.HoveredRootWindow->Name : \"NULL\");\n 9844:             ImGui::Text(\"HoveredID: 0x%08X/0x%08X\", g.HoveredId, g.HoveredIdPreviousFrame); // Data is \"in-flight\" so depending on when the Metrics window is called we may see current frame information or not\n 9845:             ImGui::Text(\"ActiveID: 0x%08X/0x%08X\", g.ActiveId, g.ActiveIdPreviousFrame);\n 9846:             ImGui::TreePop();\n 9847          }\n 9848      }\n 9849:     ImGui::End();\n 9850  }\n 9851  \n 9852  //-----------------------------------------------------------------------------\n 9853  \n 9854: // Include imgui_user.inl at the end of imgui.cpp to access private data/functions that aren't exposed.\n 9855: // Prefer just including imgui_internal.h from your code rather than using this define. If a declaration is missing from imgui_internal.h add it or request it on the github.\n 9856: #ifdef IMGUI_INCLUDE_IMGUI_USER_INL\n 9857: #include \"imgui_user.inl\"\n 9858  #endif\n 9859  \n\nC:\\Users\\doug\\Documents\\github\\fall\\imgui\\imgui.h:\n    1: // dear imgui, v1.50 WIP\n    2  // (headers)\n    3  \n    4: // See imgui.cpp file for documentation.\n    5: // See ImGui::ShowTestWindow() in imgui_demo.cpp for demo code.\n    6: // Read 'Programmer guide' in imgui.cpp for notes on how to setup ImGui in your codebase.\n    7: // Get latest version at https://github.com/ocornut/imgui\n    8  \n    9  #pragma once\n   10  \n   11: #if !defined(IMGUI_DISABLE_INCLUDE_IMCONFIG_H) || defined(IMGUI_INCLUDE_IMCONFIG_H)\n   12  #include \"imconfig.h\"       // User-editable configuration file\n   13  #endif\n   ..\n   17  #include <string.h>         // memset, memmove, memcpy, strlen, strchr, strcpy, strcmp\n   18  \n   19: #define IMGUI_VERSION       \"1.50 WIP\"\n   20  \n   21  // Define attributes of all API symbols declarations, e.g. for DLL under Windows.\n   22: #ifndef IMGUI_API\n   23: #define IMGUI_API\n   24  #endif\n   25  \n   ..\n   47  struct ImDrawData;                  // All draw command lists required to render the frame\n   48  struct ImDrawList;                  // A single draw command list (generally one per window)\n   49: struct ImDrawVert;                  // A single vertex (20 bytes by default, override layout with IMGUI_OVERRIDE_DRAWVERT_STRUCT_LAYOUT)\n   50  struct ImFont;                      // Runtime data for a single font within a parent ImFontAtlas\n   51  struct ImFontAtlas;                 // Runtime data for multiple fonts, bake multiple fonts into a single texture, TTF font loader\n   52  struct ImFontConfig;                // Configuration data when adding a font or merging fonts\n   53  struct ImColor;                     // Helper functions to create a color that can be converted to either u32 or float4\n   54: struct ImGuiIO;                     // Main configuration and I/O between your application and ImGui\n   55: struct ImGuiOnceUponAFrame;         // Simple helper for running a block of code not more than once a frame, used by IMGUI_ONCE_UPON_A_FRAME macro\n   56: struct ImGuiStorage;                // Simple custom key value storage\n   57: struct ImGuiStyle;                  // Runtime data for styling/colors\n   58: struct ImGuiTextFilter;             // Parse and apply text filters. In format \"aaaaa[,bbbb][,ccccc]\"\n   59: struct ImGuiTextBuffer;             // Text buffer for logging/accumulating text\n   60: struct ImGuiTextEditCallbackData;   // Shared state of ImGui::InputText() when using custom ImGuiTextEditCallback (rare/advanced use)\n   61: struct ImGuiSizeConstraintCallbackData;// Structure used to constraint window size in custom ways when using custom ImGuiSizeConstraintCallback (rare/advanced use)\n   62: struct ImGuiListClipper;            // Helper to manually clip large list of items\n   63: struct ImGuiContext;                // ImGui context (opaque)\n   64  \n   65  // Typedefs and Enumerations (declared as int for compatibility and to not pollute the top of this file)\n   66  typedef unsigned int ImU32;         // 32-bit unsigned integer (typically used to store packed colors)\n   67: typedef unsigned int ImGuiID;       // unique ID used by widgets (typically hashed from a stack of string)\n   68  typedef unsigned short ImWchar;     // character for keyboard input/display\n   69: typedef void* ImTextureID;          // user data to identify a texture (this is whatever to you want it to be! read the FAQ about ImTextureID in imgui.cpp)\n   70: typedef int ImGuiCol;               // a color identifier for styling       // enum ImGuiCol_\n   71: typedef int ImGuiStyleVar;          // a variable identifier for styling    // enum ImGuiStyleVar_\n   72: typedef int ImGuiKey;               // a key identifier (ImGui-side enum)   // enum ImGuiKey_\n   73: typedef int ImGuiColorEditMode;     // color edit mode for ColorEdit*()     // enum ImGuiColorEditMode_\n   74: typedef int ImGuiMouseCursor;       // a mouse cursor identifier            // enum ImGuiMouseCursor_\n   75: typedef int ImGuiWindowFlags;       // window flags for Begin*()            // enum ImGuiWindowFlags_\n   76: typedef int ImGuiSetCond;           // condition flags for Set*()           // enum ImGuiSetCond_\n   77: typedef int ImGuiInputTextFlags;    // flags for InputText*()               // enum ImGuiInputTextFlags_\n   78: typedef int ImGuiSelectableFlags;   // flags for Selectable()               // enum ImGuiSelectableFlags_\n   79: typedef int ImGuiTreeNodeFlags;     // flags for TreeNode*(), Collapsing*() // enum ImGuiTreeNodeFlags_\n   80: typedef int (*ImGuiTextEditCallback)(ImGuiTextEditCallbackData *data);\n   81: typedef void (*ImGuiSizeConstraintCallback)(ImGuiSizeConstraintCallbackData* data);\n   82  \n   83  // Others helpers at bottom of the file:\n   84  // class ImVector<>                 // Lightweight std::vector like class.\n   85: // IMGUI_ONCE_UPON_A_FRAME          // Execute a block of code once per frame only (convenient for creating UI within deep-nested code that runs multiple times)\n   86  \n   87  struct ImVec2\n   ..\n  105  };\n  106  \n  107: // ImGui end-user API\n  108  // In a namespace so that user can add extra functions in a separate file (e.g. Value() helpers for your vector or common types)\n  109: namespace ImGui\n  110  {\n  111      // Main\n  112:     IMGUI_API ImGuiIO&      GetIO();\n  113:     IMGUI_API ImGuiStyle&   GetStyle();\n  114:     IMGUI_API ImDrawData*   GetDrawData();                              // same value as passed to your io.RenderDrawListsFn() function. valid after Render() and until the next call to NewFrame()\n  115:     IMGUI_API void          NewFrame();                                 // start a new ImGui frame, you can submit any command from this point until NewFrame()/Render().\n  116:     IMGUI_API void          Render();                                   // ends the ImGui frame, finalize rendering data, then call your io.RenderDrawListsFn() function if set.\n  117:     IMGUI_API void          Shutdown();\n  118:     IMGUI_API void          ShowUserGuide();                            // help block\n  119:     IMGUI_API void          ShowStyleEditor(ImGuiStyle* ref = NULL);    // style editor block. you can pass in a reference ImGuiStyle structure to compare to, revert to and save to (else it uses the default style)\n  120:     IMGUI_API void          ShowTestWindow(bool* p_open = NULL);        // test window demonstrating ImGui features\n  121:     IMGUI_API void          ShowMetricsWindow(bool* p_open = NULL);     // metrics window for debugging ImGui (browse draw commands, individual vertices, window list, etc.)\n  122  \n  123      // Window\n  124:     IMGUI_API bool          Begin(const char* name, bool* p_open = NULL, ImGuiWindowFlags flags = 0);                                                   // push window to the stack and start appending to it. see .cpp for details. return false when window is collapsed, so you can early out in your code. 'bool* p_open' creates a widget on the upper-right to close the window (which sets your bool to false).\n  125:     IMGUI_API bool          Begin(const char* name, bool* p_open, const ImVec2& size_on_first_use, float bg_alpha = -1.0f, ImGuiWindowFlags flags = 0); // OBSOLETE. this is the older/longer API. the extra parameters aren't very relevant. call SetNextWindowSize() instead if you want to set a window size. For regular windows, 'size_on_first_use' only applies to the first time EVER the window is created and probably not what you want! might obsolete this API eventually.\n  126:     IMGUI_API void          End();                                                                                                                      // finish appending to current window, pop it off the window stack.\n  127:     IMGUI_API bool          BeginChild(const char* str_id, const ImVec2& size = ImVec2(0,0), bool border = false, ImGuiWindowFlags extra_flags = 0);    // begin a scrolling region. size==0.0f: use remaining window size, size<0.0f: use remaining window size minus abs(size). size>0.0f: fixed size. each axis can use a different mode, e.g. ImVec2(0,400).\n  128:     IMGUI_API bool          BeginChild(ImGuiID id, const ImVec2& size = ImVec2(0,0), bool border = false, ImGuiWindowFlags extra_flags = 0);            // \"\n  129:     IMGUI_API void          EndChild();\n  130:     IMGUI_API ImVec2        GetContentRegionMax();                                              // current content boundaries (typically window boundaries including scrolling, or current column boundaries), in windows coordinates\n  131:     IMGUI_API ImVec2        GetContentRegionAvail();                                            // == GetContentRegionMax() - GetCursorPos()\n  132:     IMGUI_API float         GetContentRegionAvailWidth();                                       //\n  133:     IMGUI_API ImVec2        GetWindowContentRegionMin();                                        // content boundaries min (roughly (0,0)-Scroll), in window coordinates\n  134:     IMGUI_API ImVec2        GetWindowContentRegionMax();                                        // content boundaries max (roughly (0,0)+Size-Scroll) where Size can be override with SetNextWindowContentSize(), in window coordinates\n  135:     IMGUI_API float         GetWindowContentRegionWidth();                                      //\n  136:     IMGUI_API ImDrawList*   GetWindowDrawList();                                                // get rendering command-list if you want to append your own draw primitives\n  137:     IMGUI_API ImVec2        GetWindowPos();                                                     // get current window position in screen space (useful if you want to do your own drawing via the DrawList api)\n  138:     IMGUI_API ImVec2        GetWindowSize();                                                    // get current window size\n  139:     IMGUI_API float         GetWindowWidth();\n  140:     IMGUI_API float         GetWindowHeight();\n  141:     IMGUI_API bool          IsWindowCollapsed();\n  142:     IMGUI_API void          SetWindowFontScale(float scale);                                    // per-window font scale. Adjust IO.FontGlobalScale if you want to scale all windows\n  143  \n  144:     IMGUI_API void          SetNextWindowPos(const ImVec2& pos, ImGuiSetCond cond = 0);         // set next window position. call before Begin()\n  145:     IMGUI_API void          SetNextWindowPosCenter(ImGuiSetCond cond = 0);                      // set next window position to be centered on screen. call before Begin()\n  146:     IMGUI_API void          SetNextWindowSize(const ImVec2& size, ImGuiSetCond cond = 0);       // set next window size. set axis to 0.0f to force an auto-fit on this axis. call before Begin()\n  147:     IMGUI_API void          SetNextWindowSizeConstraints(const ImVec2& size_min, const ImVec2& size_max, ImGuiSizeConstraintCallback custom_callback = NULL, void* custom_callback_data = NULL); // set next window size limits. use -1,-1 on either X/Y axis to preserve the current size. Use callback to apply non-trivial programmatic constraints.\n  148:     IMGUI_API void          SetNextWindowContentSize(const ImVec2& size);                       // set next window content size (enforce the range of scrollbars). set axis to 0.0f to leave it automatic. call before Begin()\n  149:     IMGUI_API void          SetNextWindowContentWidth(float width);                             // set next window content width (enforce the range of horizontal scrollbar). call before Begin()\n  150:     IMGUI_API void          SetNextWindowCollapsed(bool collapsed, ImGuiSetCond cond = 0);      // set next window collapsed state. call before Begin()\n  151:     IMGUI_API void          SetNextWindowFocus();                                               // set next window to be focused / front-most. call before Begin()\n  152:     IMGUI_API void          SetWindowPos(const ImVec2& pos, ImGuiSetCond cond = 0);             // (not recommended) set current window position - call within Begin()/End(). prefer using SetNextWindowPos(), as this may incur tearing and side-effects.\n  153:     IMGUI_API void          SetWindowSize(const ImVec2& size, ImGuiSetCond cond = 0);           // (not recommended) set current window size - call within Begin()/End(). set to ImVec2(0,0) to force an auto-fit. prefer using SetNextWindowSize(), as this may incur tearing and minor side-effects.    \n  154:     IMGUI_API void          SetWindowCollapsed(bool collapsed, ImGuiSetCond cond = 0);          // (not recommended) set current window collapsed state. prefer using SetNextWindowCollapsed().\n  155:     IMGUI_API void          SetWindowFocus();                                                   // (not recommended) set current window to be focused / front-most. prefer using SetNextWindowFocus().\n  156:     IMGUI_API void          SetWindowPos(const char* name, const ImVec2& pos, ImGuiSetCond cond = 0);      // set named window position.\n  157:     IMGUI_API void          SetWindowSize(const char* name, const ImVec2& size, ImGuiSetCond cond = 0);    // set named window size. set axis to 0.0f to force an auto-fit on this axis.\n  158:     IMGUI_API void          SetWindowCollapsed(const char* name, bool collapsed, ImGuiSetCond cond = 0);   // set named window collapsed state\n  159:     IMGUI_API void          SetWindowFocus(const char* name);                                              // set named window to be focused / front-most. use NULL to remove focus.\n  160  \n  161:     IMGUI_API float         GetScrollX();                                                       // get scrolling amount [0..GetScrollMaxX()]\n  162:     IMGUI_API float         GetScrollY();                                                       // get scrolling amount [0..GetScrollMaxY()]\n  163:     IMGUI_API float         GetScrollMaxX();                                                    // get maximum scrolling amount ~~ ContentSize.X - WindowSize.X\n  164:     IMGUI_API float         GetScrollMaxY();                                                    // get maximum scrolling amount ~~ ContentSize.Y - WindowSize.Y\n  165:     IMGUI_API void          SetScrollX(float scroll_x);                                         // set scrolling amount [0..GetScrollMaxX()]\n  166:     IMGUI_API void          SetScrollY(float scroll_y);                                         // set scrolling amount [0..GetScrollMaxY()]\n  167:     IMGUI_API void          SetScrollHere(float center_y_ratio = 0.5f);                         // adjust scrolling amount to make current cursor position visible. center_y_ratio=0.0: top, 0.5: center, 1.0: bottom.\n  168:     IMGUI_API void          SetScrollFromPosY(float pos_y, float center_y_ratio = 0.5f);        // adjust scrolling amount to make given position valid. use GetCursorPos() or GetCursorStartPos()+offset to get valid positions.\n  169:     IMGUI_API void          SetKeyboardFocusHere(int offset = 0);                               // focus keyboard on the next widget. Use positive 'offset' to access sub components of a multiple component widget. Use negative 'offset' to access previous widgets.\n  170:     IMGUI_API void          SetStateStorage(ImGuiStorage* tree);                                // replace tree state storage with our own (if you want to manipulate it yourself, typically clear subsection of it)\n  171:     IMGUI_API ImGuiStorage* GetStateStorage();\n  172  \n  173      // Parameters stacks (shared)\n  174:     IMGUI_API void          PushFont(ImFont* font);                                             // use NULL as a shortcut to push default font\n  175:     IMGUI_API void          PopFont();\n  176:     IMGUI_API void          PushStyleColor(ImGuiCol idx, const ImVec4& col);\n  177:     IMGUI_API void          PopStyleColor(int count = 1);\n  178:     IMGUI_API void          PushStyleVar(ImGuiStyleVar idx, float val);\n  179:     IMGUI_API void          PushStyleVar(ImGuiStyleVar idx, const ImVec2& val);\n  180:     IMGUI_API void          PopStyleVar(int count = 1);\n  181:     IMGUI_API ImFont*       GetFont();                                                          // get current font\n  182:     IMGUI_API float         GetFontSize();                                                      // get current font size (= height in pixels) of current font with current scale applied\n  183:     IMGUI_API ImVec2        GetFontTexUvWhitePixel();                                           // get UV coordinate for a while pixel, useful to draw custom shapes via the ImDrawList API\n  184:     IMGUI_API ImU32         GetColorU32(ImGuiCol idx, float alpha_mul = 1.0f);                  // retrieve given style color with style alpha applied and optional extra alpha multiplier\n  185:     IMGUI_API ImU32         GetColorU32(const ImVec4& col);                                     // retrieve given color with style alpha applied\n  186  \n  187      // Parameters stacks (current window)\n  188:     IMGUI_API void          PushItemWidth(float item_width);                                    // width of items for the common item+label case, pixels. 0.0f = default to ~2/3 of windows width, >0.0f: width in pixels, <0.0f align xx pixels to the right of window (so -1.0f always align width to the right side)\n  189:     IMGUI_API void          PopItemWidth();\n  190:     IMGUI_API float         CalcItemWidth();                                                    // width of item given pushed settings and current cursor position\n  191:     IMGUI_API void          PushTextWrapPos(float wrap_pos_x = 0.0f);                           // word-wrapping for Text*() commands. < 0.0f: no wrapping; 0.0f: wrap to end of window (or column); > 0.0f: wrap at 'wrap_pos_x' position in window local space\n  192:     IMGUI_API void          PopTextWrapPos();\n  193:     IMGUI_API void          PushAllowKeyboardFocus(bool v);                                     // allow focusing using TAB/Shift-TAB, enabled by default but you can disable it for certain widgets\n  194:     IMGUI_API void          PopAllowKeyboardFocus();\n  195:     IMGUI_API void          PushButtonRepeat(bool repeat);                                      // in 'repeat' mode, Button*() functions return repeated true in a typematic manner (uses io.KeyRepeatDelay/io.KeyRepeatRate for now). Note that you can call IsItemActive() after any Button() to tell if the button is held in the current frame.\n  196:     IMGUI_API void          PopButtonRepeat();\n  197  \n  198      // Cursor / Layout\n  199:     IMGUI_API void          Separator();                                                        // horizontal line\n  200:     IMGUI_API void          SameLine(float pos_x = 0.0f, float spacing_w = -1.0f);              // call between widgets or groups to layout them horizontally\n  201:     IMGUI_API void          NewLine();                                                          // undo a SameLine()\n  202:     IMGUI_API void          Spacing();                                                          // add vertical spacing\n  203:     IMGUI_API void          Dummy(const ImVec2& size);                                          // add a dummy item of given size\n  204:     IMGUI_API void          Indent(float indent_w = 0.0f);                                      // move content position toward the right, by style.IndentSpacing or indent_w if >0\n  205:     IMGUI_API void          Unindent(float indent_w = 0.0f);                                    // move content position back to the left, by style.IndentSpacing or indent_w if >0\n  206:     IMGUI_API void          BeginGroup();                                                       // lock horizontal starting position + capture group bounding box into one \"item\" (so you can use IsItemHovered() or layout primitives such as SameLine() on whole group, etc.)\n  207:     IMGUI_API void          EndGroup();\n  208:     IMGUI_API ImVec2        GetCursorPos();                                                     // cursor position is relative to window position\n  209:     IMGUI_API float         GetCursorPosX();                                                    // \"\n  210:     IMGUI_API float         GetCursorPosY();                                                    // \"\n  211:     IMGUI_API void          SetCursorPos(const ImVec2& local_pos);                              // \"\n  212:     IMGUI_API void          SetCursorPosX(float x);                                             // \"\n  213:     IMGUI_API void          SetCursorPosY(float y);                                             // \"\n  214:     IMGUI_API ImVec2        GetCursorStartPos();                                                // initial cursor position\n  215:     IMGUI_API ImVec2        GetCursorScreenPos();                                               // cursor position in absolute screen coordinates [0..io.DisplaySize] (useful to work with ImDrawList API)\n  216:     IMGUI_API void          SetCursorScreenPos(const ImVec2& pos);                              // cursor position in absolute screen coordinates [0..io.DisplaySize]\n  217:     IMGUI_API void          AlignFirstTextHeightToWidgets();                                    // call once if the first item on the line is a Text() item and you want to vertically lower it to match subsequent (bigger) widgets\n  218:     IMGUI_API float         GetTextLineHeight();                                                // height of font == GetWindowFontSize()\n  219:     IMGUI_API float         GetTextLineHeightWithSpacing();                                     // distance (in pixels) between 2 consecutive lines of text == GetWindowFontSize() + GetStyle().ItemSpacing.y\n  220:     IMGUI_API float         GetItemsLineHeightWithSpacing();                                    // distance (in pixels) between 2 consecutive lines of standard height widgets == GetWindowFontSize() + GetStyle().FramePadding.y*2 + GetStyle().ItemSpacing.y\n  221  \n  222      // Columns\n  223      // You can also use SameLine(pos_x) for simplified columning. The columns API is still work-in-progress and rather lacking.\n  224:     IMGUI_API void          Columns(int count = 1, const char* id = NULL, bool border = true);  // setup number of columns. use an identifier to distinguish multiple column sets. close with Columns(1).\n  225:     IMGUI_API void          NextColumn();                                                       // next column\n  226:     IMGUI_API int           GetColumnIndex();                                                   // get current column index\n  227:     IMGUI_API float         GetColumnOffset(int column_index = -1);                             // get position of column line (in pixels, from the left side of the contents region). pass -1 to use current column, otherwise 0..GetcolumnsCount() inclusive. column 0 is usually 0.0f and not resizable unless you call this\n  228:     IMGUI_API void          SetColumnOffset(int column_index, float offset_x);                  // set position of column line (in pixels, from the left side of the contents region). pass -1 to use current column\n  229:     IMGUI_API float         GetColumnWidth(int column_index = -1);                              // column width (== GetColumnOffset(GetColumnIndex()+1) - GetColumnOffset(GetColumnOffset())\n  230:     IMGUI_API int           GetColumnsCount();                                                  // number of columns (what was passed to Columns())\n  231  \n  232      // ID scopes\n  233:     // If you are creating widgets in a loop you most likely want to push a unique identifier so ImGui can differentiate them.\n  234      // You can also use the \"##foobar\" syntax within widget label to distinguish them from each others. Read \"A primer on the use of labels/IDs\" in the FAQ for more details.\n  235:     IMGUI_API void          PushID(const char* str_id);                                         // push identifier into the ID stack. IDs are hash of the *entire* stack!\n  236:     IMGUI_API void          PushID(const char* str_id_begin, const char* str_id_end);\n  237:     IMGUI_API void          PushID(const void* ptr_id);\n  238:     IMGUI_API void          PushID(int int_id);\n  239:     IMGUI_API void          PopID();\n  240:     IMGUI_API ImGuiID       GetID(const char* str_id);                                          // calculate unique ID (hash of whole ID stack + given parameter). useful if you want to query into ImGuiStorage yourself. otherwise rarely needed\n  241:     IMGUI_API ImGuiID       GetID(const char* str_id_begin, const char* str_id_end);\n  242:     IMGUI_API ImGuiID       GetID(const void* ptr_id);\n  243  \n  244      // Widgets\n  245:     IMGUI_API void          Text(const char* fmt, ...) IM_PRINTFARGS(1);\n  246:     IMGUI_API void          TextV(const char* fmt, va_list args);\n  247:     IMGUI_API void          TextColored(const ImVec4& col, const char* fmt, ...) IM_PRINTFARGS(2);  // shortcut for PushStyleColor(ImGuiCol_Text, col); Text(fmt, ...); PopStyleColor();\n  248:     IMGUI_API void          TextColoredV(const ImVec4& col, const char* fmt, va_list args);\n  249:     IMGUI_API void          TextDisabled(const char* fmt, ...) IM_PRINTFARGS(1);                    // shortcut for PushStyleColor(ImGuiCol_Text, style.Colors[ImGuiCol_TextDisabled]); Text(fmt, ...); PopStyleColor();\n  250:     IMGUI_API void          TextDisabledV(const char* fmt, va_list args);\n  251:     IMGUI_API void          TextWrapped(const char* fmt, ...) IM_PRINTFARGS(1);                     // shortcut for PushTextWrapPos(0.0f); Text(fmt, ...); PopTextWrapPos();. Note that this won't work on an auto-resizing window if there's no other widgets to extend the window width, yoy may need to set a size using SetNextWindowSize().\n  252:     IMGUI_API void          TextWrappedV(const char* fmt, va_list args);\n  253:     IMGUI_API void          TextUnformatted(const char* text, const char* text_end = NULL);         // doesn't require null terminated string if 'text_end' is specified. no copy done to any bounded stack buffer, recommended for long chunks of text\n  254:     IMGUI_API void          LabelText(const char* label, const char* fmt, ...) IM_PRINTFARGS(2);    // display text+label aligned the same way as value+label widgets\n  255:     IMGUI_API void          LabelTextV(const char* label, const char* fmt, va_list args);\n  256:     IMGUI_API void          Bullet();                                                               // draw a small circle and keep the cursor on the same line. advance cursor x position by GetTreeNodeToLabelSpacing(), same distance that TreeNode() uses\n  257:     IMGUI_API void          BulletText(const char* fmt, ...) IM_PRINTFARGS(1);                      // shortcut for Bullet()+Text()\n  258:     IMGUI_API void          BulletTextV(const char* fmt, va_list args);\n  259:     IMGUI_API bool          Button(const char* label, const ImVec2& size = ImVec2(0,0));            // button\n  260:     IMGUI_API bool          SmallButton(const char* label);                                         // button with FramePadding=(0,0)\n  261:     IMGUI_API bool          InvisibleButton(const char* str_id, const ImVec2& size);\n  262:     IMGUI_API void          Image(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0 = ImVec2(0,0), const ImVec2& uv1 = ImVec2(1,1), const ImVec4& tint_col = ImVec4(1,1,1,1), const ImVec4& border_col = ImVec4(0,0,0,0));\n  263:     IMGUI_API bool          ImageButton(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0 = ImVec2(0,0),  const ImVec2& uv1 = ImVec2(1,1), int frame_padding = -1, const ImVec4& bg_col = ImVec4(0,0,0,0), const ImVec4& tint_col = ImVec4(1,1,1,1));    // <0 frame_padding uses default frame padding settings. 0 for no padding\n  264:     IMGUI_API bool          Checkbox(const char* label, bool* v);\n  265:     IMGUI_API bool          CheckboxFlags(const char* label, unsigned int* flags, unsigned int flags_value);\n  266:     IMGUI_API bool          RadioButton(const char* label, bool active);\n  267:     IMGUI_API bool          RadioButton(const char* label, int* v, int v_button);\n  268:     IMGUI_API bool          Combo(const char* label, int* current_item, const char* const* items, int items_count, int height_in_items = -1);\n  269:     IMGUI_API bool          Combo(const char* label, int* current_item, const char* items_separated_by_zeros, int height_in_items = -1);      // separate items with \\0, end item-list with \\0\\0\n  270:     IMGUI_API bool          Combo(const char* label, int* current_item, bool (*items_getter)(void* data, int idx, const char** out_text), void* data, int items_count, int height_in_items = -1);\n  271:     IMGUI_API bool          ColorButton(const ImVec4& col, bool small_height = false, bool outline_border = true);\n  272:     IMGUI_API bool          ColorEdit3(const char* label, float col[3]);                            // Hint: 'float col[3]' function argument is same as 'float* col'. You can pass address of first element out of a contiguous set, e.g. &myvector.x\n  273:     IMGUI_API bool          ColorEdit4(const char* label, float col[4], bool show_alpha = true);    // \"\n  274:     IMGUI_API void          ColorEditMode(ImGuiColorEditMode mode);                                 // FIXME-OBSOLETE: This is inconsistent with most of the API and will be obsoleted/replaced.\n  275:     IMGUI_API void          PlotLines(const char* label, const float* values, int values_count, int values_offset = 0, const char* overlay_text = NULL, float scale_min = FLT_MAX, float scale_max = FLT_MAX, ImVec2 graph_size = ImVec2(0,0), int stride = sizeof(float));\n  276:     IMGUI_API void          PlotLines(const char* label, float (*values_getter)(void* data, int idx), void* data, int values_count, int values_offset = 0, const char* overlay_text = NULL, float scale_min = FLT_MAX, float scale_max = FLT_MAX, ImVec2 graph_size = ImVec2(0,0));\n  277:     IMGUI_API void          PlotHistogram(const char* label, const float* values, int values_count, int values_offset = 0, const char* overlay_text = NULL, float scale_min = FLT_MAX, float scale_max = FLT_MAX, ImVec2 graph_size = ImVec2(0,0), int stride = sizeof(float));\n  278:     IMGUI_API void          PlotHistogram(const char* label, float (*values_getter)(void* data, int idx), void* data, int values_count, int values_offset = 0, const char* overlay_text = NULL, float scale_min = FLT_MAX, float scale_max = FLT_MAX, ImVec2 graph_size = ImVec2(0,0));\n  279:     IMGUI_API void          ProgressBar(float fraction, const ImVec2& size_arg = ImVec2(-1,0), const char* overlay = NULL);\n  280  \n  281      // Widgets: Drags (tip: ctrl+click on a drag box to input with keyboard. manually input values aren't clamped, can go off-bounds)\n  282      // For all the Float2/Float3/Float4/Int2/Int3/Int4 versions of every functions, remember than a 'float v[3]' function argument is the same as 'float* v'. You can pass address of your first element out of a contiguous set, e.g. &myvector.x\n  283:     IMGUI_API bool          DragFloat(const char* label, float* v, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* display_format = \"%.3f\", float power = 1.0f);     // If v_min >= v_max we have no bound\n  284:     IMGUI_API bool          DragFloat2(const char* label, float v[2], float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* display_format = \"%.3f\", float power = 1.0f);\n  285:     IMGUI_API bool          DragFloat3(const char* label, float v[3], float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* display_format = \"%.3f\", float power = 1.0f);\n  286:     IMGUI_API bool          DragFloat4(const char* label, float v[4], float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* display_format = \"%.3f\", float power = 1.0f);\n  287:     IMGUI_API bool          DragFloatRange2(const char* label, float* v_current_min, float* v_current_max, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* display_format = \"%.3f\", const char* display_format_max = NULL, float power = 1.0f);\n  288:     IMGUI_API bool          DragInt(const char* label, int* v, float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* display_format = \"%.0f\");                                       // If v_min >= v_max we have no bound\n  289:     IMGUI_API bool          DragInt2(const char* label, int v[2], float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* display_format = \"%.0f\");\n  290:     IMGUI_API bool          DragInt3(const char* label, int v[3], float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* display_format = \"%.0f\");\n  291:     IMGUI_API bool          DragInt4(const char* label, int v[4], float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* display_format = \"%.0f\");\n  292:     IMGUI_API bool          DragIntRange2(const char* label, int* v_current_min, int* v_current_max, float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* display_format = \"%.0f\", const char* display_format_max = NULL);\n  293  \n  294      // Widgets: Input with Keyboard\n  295:     IMGUI_API bool          InputText(const char* label, char* buf, size_t buf_size, ImGuiInputTextFlags flags = 0, ImGuiTextEditCallback callback = NULL, void* user_data = NULL);\n  296:     IMGUI_API bool          InputTextMultiline(const char* label, char* buf, size_t buf_size, const ImVec2& size = ImVec2(0,0), ImGuiInputTextFlags flags = 0, ImGuiTextEditCallback callback = NULL, void* user_data = NULL);\n  297:     IMGUI_API bool          InputFloat(const char* label, float* v, float step = 0.0f, float step_fast = 0.0f, int decimal_precision = -1, ImGuiInputTextFlags extra_flags = 0);\n  298:     IMGUI_API bool          InputFloat2(const char* label, float v[2], int decimal_precision = -1, ImGuiInputTextFlags extra_flags = 0);\n  299:     IMGUI_API bool          InputFloat3(const char* label, float v[3], int decimal_precision = -1, ImGuiInputTextFlags extra_flags = 0);\n  300:     IMGUI_API bool          InputFloat4(const char* label, float v[4], int decimal_precision = -1, ImGuiInputTextFlags extra_flags = 0);\n  301:     IMGUI_API bool          InputInt(const char* label, int* v, int step = 1, int step_fast = 100, ImGuiInputTextFlags extra_flags = 0);\n  302:     IMGUI_API bool          InputInt2(const char* label, int v[2], ImGuiInputTextFlags extra_flags = 0);\n  303:     IMGUI_API bool          InputInt3(const char* label, int v[3], ImGuiInputTextFlags extra_flags = 0);\n  304:     IMGUI_API bool          InputInt4(const char* label, int v[4], ImGuiInputTextFlags extra_flags = 0);\n  305  \n  306      // Widgets: Sliders (tip: ctrl+click on a slider to input with keyboard. manually input values aren't clamped, can go off-bounds)\n  307:     IMGUI_API bool          SliderFloat(const char* label, float* v, float v_min, float v_max, const char* display_format = \"%.3f\", float power = 1.0f);     // adjust display_format to decorate the value with a prefix or a suffix. Use power!=1.0 for logarithmic sliders\n  308:     IMGUI_API bool          SliderFloat2(const char* label, float v[2], float v_min, float v_max, const char* display_format = \"%.3f\", float power = 1.0f);\n  309:     IMGUI_API bool          SliderFloat3(const char* label, float v[3], float v_min, float v_max, const char* display_format = \"%.3f\", float power = 1.0f);\n  310:     IMGUI_API bool          SliderFloat4(const char* label, float v[4], float v_min, float v_max, const char* display_format = \"%.3f\", float power = 1.0f);\n  311:     IMGUI_API bool          SliderAngle(const char* label, float* v_rad, float v_degrees_min = -360.0f, float v_degrees_max = +360.0f);\n  312:     IMGUI_API bool          SliderInt(const char* label, int* v, int v_min, int v_max, const char* display_format = \"%.0f\");\n  313:     IMGUI_API bool          SliderInt2(const char* label, int v[2], int v_min, int v_max, const char* display_format = \"%.0f\");\n  314:     IMGUI_API bool          SliderInt3(const char* label, int v[3], int v_min, int v_max, const char* display_format = \"%.0f\");\n  315:     IMGUI_API bool          SliderInt4(const char* label, int v[4], int v_min, int v_max, const char* display_format = \"%.0f\");\n  316:     IMGUI_API bool          VSliderFloat(const char* label, const ImVec2& size, float* v, float v_min, float v_max, const char* display_format = \"%.3f\", float power = 1.0f);\n  317:     IMGUI_API bool          VSliderInt(const char* label, const ImVec2& size, int* v, int v_min, int v_max, const char* display_format = \"%.0f\");\n  318  \n  319      // Widgets: Trees\n  320:     IMGUI_API bool          TreeNode(const char* label);                                            // if returning 'true' the node is open and the tree id is pushed into the id stack. user is responsible for calling TreePop().\n  321:     IMGUI_API bool          TreeNode(const char* str_id, const char* fmt, ...) IM_PRINTFARGS(2);    // read the FAQ about why and how to use ID. to align arbitrary text at the same level as a TreeNode() you can use Bullet().\n  322:     IMGUI_API bool          TreeNode(const void* ptr_id, const char* fmt, ...) IM_PRINTFARGS(2);    // \"\n  323:     IMGUI_API bool          TreeNodeV(const char* str_id, const char* fmt, va_list args);           // \"\n  324:     IMGUI_API bool          TreeNodeV(const void* ptr_id, const char* fmt, va_list args);           // \"\n  325:     IMGUI_API bool          TreeNodeEx(const char* label, ImGuiTreeNodeFlags flags = 0);\n  326:     IMGUI_API bool          TreeNodeEx(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, ...) IM_PRINTFARGS(3);\n  327:     IMGUI_API bool          TreeNodeEx(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, ...) IM_PRINTFARGS(3);\n  328:     IMGUI_API bool          TreeNodeExV(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list args);\n  329:     IMGUI_API bool          TreeNodeExV(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list args);\n  330:     IMGUI_API void          TreePush(const char* str_id = NULL);                                    // ~ Indent()+PushId(). Already called by TreeNode() when returning true, but you can call Push/Pop yourself for layout purpose\n  331:     IMGUI_API void          TreePush(const void* ptr_id = NULL);                                    // \"\n  332:     IMGUI_API void          TreePop();                                                              // ~ Unindent()+PopId()\n  333:     IMGUI_API void          TreeAdvanceToLabelPos();                                                // advance cursor x position by GetTreeNodeToLabelSpacing()\n  334:     IMGUI_API float         GetTreeNodeToLabelSpacing();                                            // horizontal distance preceding label when using TreeNode*() or Bullet() == (g.FontSize + style.FramePadding.x*2) for a regular unframed TreeNode\n  335:     IMGUI_API void          SetNextTreeNodeOpen(bool is_open, ImGuiSetCond cond = 0);               // set next TreeNode/CollapsingHeader open state.\n  336:     IMGUI_API bool          CollapsingHeader(const char* label, ImGuiTreeNodeFlags flags = 0);      // if returning 'true' the header is open. doesn't indent nor push on ID stack. user doesn't have to call TreePop().\n  337:     IMGUI_API bool          CollapsingHeader(const char* label, bool* p_open, ImGuiTreeNodeFlags flags = 0); // when 'p_open' isn't NULL, display an additional small close button on upper right of the header\n  338  \n  339      // Widgets: Selectable / Lists\n  340:     IMGUI_API bool          Selectable(const char* label, bool selected = false, ImGuiSelectableFlags flags = 0, const ImVec2& size = ImVec2(0,0));  // size.x==0.0: use remaining width, size.x>0.0: specify width. size.y==0.0: use label height, size.y>0.0: specify height\n  341:     IMGUI_API bool          Selectable(const char* label, bool* p_selected, ImGuiSelectableFlags flags = 0, const ImVec2& size = ImVec2(0,0));\n  342:     IMGUI_API bool          ListBox(const char* label, int* current_item, const char* const* items, int items_count, int height_in_items = -1);\n  343:     IMGUI_API bool          ListBox(const char* label, int* current_item, bool (*items_getter)(void* data, int idx, const char** out_text), void* data, int items_count, int height_in_items = -1);\n  344:     IMGUI_API bool          ListBoxHeader(const char* label, const ImVec2& size = ImVec2(0,0)); // use if you want to reimplement ListBox() will custom data or interactions. make sure to call ListBoxFooter() afterwards.\n  345:     IMGUI_API bool          ListBoxHeader(const char* label, int items_count, int height_in_items = -1); // \"\n  346:     IMGUI_API void          ListBoxFooter();                                                    // terminate the scrolling region\n  347  \n  348:     // Widgets: Value() Helpers. Output single value in \"name: value\" format (tip: freely declare more in your code to handle your types. you can add functions to the ImGui namespace)\n  349:     IMGUI_API void          Value(const char* prefix, bool b);\n  350:     IMGUI_API void          Value(const char* prefix, int v);\n  351:     IMGUI_API void          Value(const char* prefix, unsigned int v);\n  352:     IMGUI_API void          Value(const char* prefix, float v, const char* float_format = NULL);\n  353:     IMGUI_API void          ValueColor(const char* prefix, const ImVec4& v);\n  354:     IMGUI_API void          ValueColor(const char* prefix, ImU32 v);\n  355  \n  356      // Tooltips\n  357:     IMGUI_API void          SetTooltip(const char* fmt, ...) IM_PRINTFARGS(1);                  // set tooltip under mouse-cursor, typically use with ImGui::IsHovered(). last call wins\n  358:     IMGUI_API void          SetTooltipV(const char* fmt, va_list args);\n  359:     IMGUI_API void          BeginTooltip();                                                     // use to create full-featured tooltip windows that aren't just text\n  360:     IMGUI_API void          EndTooltip();\n  361  \n  362      // Menus\n  363:     IMGUI_API bool          BeginMainMenuBar();                                                 // create and append to a full screen menu-bar. only call EndMainMenuBar() if this returns true!\n  364:     IMGUI_API void          EndMainMenuBar();\n  365:     IMGUI_API bool          BeginMenuBar();                                                     // append to menu-bar of current window (requires ImGuiWindowFlags_MenuBar flag set). only call EndMenuBar() if this returns true!\n  366:     IMGUI_API void          EndMenuBar();\n  367:     IMGUI_API bool          BeginMenu(const char* label, bool enabled = true);                  // create a sub-menu entry. only call EndMenu() if this returns true!\n  368:     IMGUI_API void          EndMenu();\n  369:     IMGUI_API bool          MenuItem(const char* label, const char* shortcut = NULL, bool selected = false, bool enabled = true);  // return true when activated. shortcuts are displayed for convenience but not processed by ImGui at the moment\n  370:     IMGUI_API bool          MenuItem(const char* label, const char* shortcut, bool* p_selected, bool enabled = true);              // return true when activated + toggle (*p_selected) if p_selected != NULL\n  371  \n  372      // Popups\n  373:     IMGUI_API void          OpenPopup(const char* str_id);                                      // mark popup as open. popups are closed when user click outside, or activate a pressable item, or CloseCurrentPopup() is called within a BeginPopup()/EndPopup() block. popup identifiers are relative to the current ID-stack (so OpenPopup and BeginPopup needs to be at the same level).\n  374:     IMGUI_API bool          BeginPopup(const char* str_id);                                     // return true if the popup is open, and you can start outputting to it. only call EndPopup() if BeginPopup() returned true!\n  375:     IMGUI_API bool          BeginPopupModal(const char* name, bool* p_open = NULL, ImGuiWindowFlags extra_flags = 0);               // modal dialog (block interactions behind the modal window, can't close the modal window by clicking outside)\n  376:     IMGUI_API bool          BeginPopupContextItem(const char* str_id, int mouse_button = 1);                                        // helper to open and begin popup when clicked on last item. read comments in .cpp!\n  377:     IMGUI_API bool          BeginPopupContextWindow(bool also_over_items = true, const char* str_id = NULL, int mouse_button = 1);  // helper to open and begin popup when clicked on current window.\n  378:     IMGUI_API bool          BeginPopupContextVoid(const char* str_id = NULL, int mouse_button = 1);                                 // helper to open and begin popup when clicked in void (no window).\n  379:     IMGUI_API void          EndPopup();\n  380:     IMGUI_API void          CloseCurrentPopup();                                                // close the popup we have begin-ed into. clicking on a MenuItem or Selectable automatically close the current popup.\n  381  \n  382      // Logging: all text output from interface is redirected to tty/file/clipboard. By default, tree nodes are automatically opened during logging.\n  383:     IMGUI_API void          LogToTTY(int max_depth = -1);                                       // start logging to tty\n  384:     IMGUI_API void          LogToFile(int max_depth = -1, const char* filename = NULL);         // start logging to file\n  385:     IMGUI_API void          LogToClipboard(int max_depth = -1);                                 // start logging to OS clipboard\n  386:     IMGUI_API void          LogFinish();                                                        // stop logging (close file, etc.)\n  387:     IMGUI_API void          LogButtons();                                                       // helper to display buttons for logging to tty/file/clipboard\n  388:     IMGUI_API void          LogText(const char* fmt, ...) IM_PRINTFARGS(1);                     // pass text data straight to log (without being displayed)\n  389  \n  390      // Clipping\n  391:     IMGUI_API void          PushClipRect(const ImVec2& clip_rect_min, const ImVec2& clip_rect_max, bool intersect_with_current_clip_rect);\n  392:     IMGUI_API void          PopClipRect();\n  393  \n  394      // Utilities\n  395:     IMGUI_API bool          IsItemHovered();                                                    // was the last item hovered by mouse?\n  396:     IMGUI_API bool          IsItemHoveredRect();                                                // was the last item hovered by mouse? even if another item is active or window is blocked by popup while we are hovering this\n  397:     IMGUI_API bool          IsItemActive();                                                     // was the last item active? (e.g. button being held, text field being edited- items that don't interact will always return false)\n  398:     IMGUI_API bool          IsItemClicked(int mouse_button = 0);                                // was the last item clicked? (e.g. button/node just clicked on)\n  399:     IMGUI_API bool          IsItemVisible();                                                    // was the last item visible? (aka not out of sight due to clipping/scrolling.)\n  400:     IMGUI_API bool          IsAnyItemHovered();\n  401:     IMGUI_API bool          IsAnyItemActive();\n  402:     IMGUI_API ImVec2        GetItemRectMin();                                                   // get bounding rect of last item in screen space\n  403:     IMGUI_API ImVec2        GetItemRectMax();                                                   // \"\n  404:     IMGUI_API ImVec2        GetItemRectSize();                                                  // \"\n  405:     IMGUI_API void          SetItemAllowOverlap();                                              // allow last item to be overlapped by a subsequent item. sometimes useful with invisible buttons, selectables, etc. to catch unused area.\n  406:     IMGUI_API bool          IsWindowHovered();                                                  // is current window hovered and hoverable (not blocked by a popup) (differentiate child windows from each others)\n  407:     IMGUI_API bool          IsWindowFocused();                                                  // is current window focused\n  408:     IMGUI_API bool          IsRootWindowFocused();                                              // is current root window focused (root = top-most parent of a child, otherwise self)\n  409:     IMGUI_API bool          IsRootWindowOrAnyChildFocused();                                    // is current root window or any of its child (including current window) focused\n  410:     IMGUI_API bool          IsRootWindowOrAnyChildHovered();                                    // is current root window or any of its child (including current window) hovered and hoverable (not blocked by a popup)\n  411:     IMGUI_API bool          IsRectVisible(const ImVec2& size);                                  // test if rectangle (of given size, starting from cursor position) is visible / not clipped.\n  412:     IMGUI_API bool          IsRectVisible(const ImVec2& rect_min, const ImVec2& rect_max);      // test if rectangle (in screen space) is visible / not clipped. to perform coarse clipping on user's side.\n  413:     IMGUI_API bool          IsPosHoveringAnyWindow(const ImVec2& pos);                          // is given position hovering any active imgui window\n  414:     IMGUI_API float         GetTime();\n  415:     IMGUI_API int           GetFrameCount();\n  416:     IMGUI_API const char*   GetStyleColName(ImGuiCol idx);\n  417:     IMGUI_API ImVec2        CalcItemRectClosestPoint(const ImVec2& pos, bool on_edge = false, float outward = +0.0f);   // utility to find the closest point the last item bounding rectangle edge. useful to visually link items\n  418:     IMGUI_API ImVec2        CalcTextSize(const char* text, const char* text_end = NULL, bool hide_text_after_double_hash = false, float wrap_width = -1.0f);\n  419:     IMGUI_API void          CalcListClipping(int items_count, float items_height, int* out_items_display_start, int* out_items_display_end);    // calculate coarse clipping for large list of evenly sized items. Prefer using the ImGuiListClipper higher-level helper if you can.\n  420  \n  421:     IMGUI_API bool          BeginChildFrame(ImGuiID id, const ImVec2& size, ImGuiWindowFlags extra_flags = 0);  // helper to create a child window / scrolling region that looks like a normal widget frame\n  422:     IMGUI_API void          EndChildFrame();\n  423  \n  424:     IMGUI_API ImVec4        ColorConvertU32ToFloat4(ImU32 in);\n  425:     IMGUI_API ImU32         ColorConvertFloat4ToU32(const ImVec4& in);\n  426:     IMGUI_API void          ColorConvertRGBtoHSV(float r, float g, float b, float& out_h, float& out_s, float& out_v);\n  427:     IMGUI_API void          ColorConvertHSVtoRGB(float h, float s, float v, float& out_r, float& out_g, float& out_b);\n  428  \n  429      // Inputs\n  430:     IMGUI_API int           GetKeyIndex(ImGuiKey key);                                          // map ImGuiKey_* values into user's key index. == io.KeyMap[key]\n  431:     IMGUI_API bool          IsKeyDown(int key_index);                                           // key_index into the keys_down[] array, imgui doesn't know the semantic of each entry, uses your own indices!\n  432:     IMGUI_API bool          IsKeyPressed(int key_index, bool repeat = true);                    // uses user's key indices as stored in the keys_down[] array. if repeat=true. uses io.KeyRepeatDelay / KeyRepeatRate\n  433:     IMGUI_API bool          IsKeyReleased(int key_index);                                       // \"\n  434:     IMGUI_API bool          IsMouseDown(int button);                                            // is mouse button held\n  435:     IMGUI_API bool          IsMouseClicked(int button, bool repeat = false);                    // did mouse button clicked (went from !Down to Down)\n  436:     IMGUI_API bool          IsMouseDoubleClicked(int button);                                   // did mouse button double-clicked. a double-click returns false in IsMouseClicked(). uses io.MouseDoubleClickTime.\n  437:     IMGUI_API bool          IsMouseReleased(int button);                                        // did mouse button released (went from Down to !Down)\n  438:     IMGUI_API bool          IsMouseHoveringWindow();                                            // is mouse hovering current window (\"window\" in API names always refer to current window). disregarding of any consideration of being blocked by a popup. (unlike IsWindowHovered() this will return true even if the window is blocked because of a popup)\n  439:     IMGUI_API bool          IsMouseHoveringAnyWindow();                                         // is mouse hovering any visible window\n  440:     IMGUI_API bool          IsMouseHoveringRect(const ImVec2& r_min, const ImVec2& r_max, bool clip = true);  // is mouse hovering given bounding rect (in screen space). clipped by current clipping settings. disregarding of consideration of focus/window ordering/blocked by a popup.\n  441:     IMGUI_API bool          IsMouseDragging(int button = 0, float lock_threshold = -1.0f);      // is mouse dragging. if lock_threshold < -1.0f uses io.MouseDraggingThreshold\n  442:     IMGUI_API ImVec2        GetMousePos();                                                      // shortcut to ImGui::GetIO().MousePos provided by user, to be consistent with other calls\n  443:     IMGUI_API ImVec2        GetMousePosOnOpeningCurrentPopup();                                 // retrieve backup of mouse positioning at the time of opening popup we have BeginPopup() into\n  444:     IMGUI_API ImVec2        GetMouseDragDelta(int button = 0, float lock_threshold = -1.0f);    // dragging amount since clicking. if lock_threshold < -1.0f uses io.MouseDraggingThreshold\n  445:     IMGUI_API void          ResetMouseDragDelta(int button = 0);                                //\n  446:     IMGUI_API ImGuiMouseCursor GetMouseCursor();                                                // get desired cursor type, reset in ImGui::NewFrame(), this updated during the frame. valid before Render(). If you use software rendering by setting io.MouseDrawCursor ImGui will render those for you\n  447:     IMGUI_API void          SetMouseCursor(ImGuiMouseCursor type);                              // set desired cursor type\n  448:     IMGUI_API void          CaptureKeyboardFromApp(bool capture = true);                        // manually override io.WantCaptureKeyboard flag next frame (said flag is entirely left for your application handle). e.g. force capture keyboard when your widget is being hovered.\n  449:     IMGUI_API void          CaptureMouseFromApp(bool capture = true);                           // manually override io.WantCaptureMouse flag next frame (said flag is entirely left for your application handle).\n  450  \n  451:     // Helpers functions to access functions pointers in ImGui::GetIO()\n  452:     IMGUI_API void*         MemAlloc(size_t sz);\n  453:     IMGUI_API void          MemFree(void* ptr);\n  454:     IMGUI_API const char*   GetClipboardText();\n  455:     IMGUI_API void          SetClipboardText(const char* text);\n  456  \n  457      // Internal context access - if you want to use multiple context, share context between modules (e.g. DLL). There is a default context created and active by default.\n  458:     // All contexts share a same ImFontAtlas by default. If you want different font atlas, you can new() them and overwrite the GetIO().Fonts variable of an ImGui context.\n  459:     IMGUI_API const char*   GetVersion();\n  460:     IMGUI_API ImGuiContext* CreateContext(void* (*malloc_fn)(size_t) = NULL, void (*free_fn)(void*) = NULL);\n  461:     IMGUI_API void          DestroyContext(ImGuiContext* ctx);\n  462:     IMGUI_API ImGuiContext* GetCurrentContext();\n  463:     IMGUI_API void          SetCurrentContext(ImGuiContext* ctx);\n  464  \n  465      // Obsolete (will be removed)\n  466: #ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS\n  467:     static inline bool      CollapsingHeader(const char* label, const char* str_id, bool framed = true, bool default_open = false) { (void)str_id; (void)framed; ImGuiTreeNodeFlags default_open_flags = 1<<5; return CollapsingHeader(label, (default_open ? default_open_flags : 0)); } // OBSOLETE 1.49+\n  468      static inline ImFont*   GetWindowFont() { return GetFont(); }                              // OBSOLETE 1.48+\n  469      static inline float     GetWindowFontSize() { return GetFontSize(); }                      // OBSOLETE 1.48+\n  470      static inline void      SetScrollPosHere() { SetScrollHere(); }                            // OBSOLETE 1.42+\n  471:     static inline bool      GetWindowCollapsed() { return ImGui::IsWindowCollapsed(); }        // OBSOLETE 1.39+\n  472      static inline bool      IsRectClipped(const ImVec2& size) { return !IsRectVisible(size); } // OBSOLETE 1.39+\n  473  #endif\n  474  \n  475: } // namespace ImGui\n  476  \n  477: // Flags for ImGui::Begin()\n  478: enum ImGuiWindowFlags_\n  479  {\n  480      // Default: 0\n  481:     ImGuiWindowFlags_NoTitleBar             = 1 << 0,   // Disable title-bar\n  482:     ImGuiWindowFlags_NoResize               = 1 << 1,   // Disable user resizing with the lower-right grip\n  483:     ImGuiWindowFlags_NoMove                 = 1 << 2,   // Disable user moving the window\n  484:     ImGuiWindowFlags_NoScrollbar            = 1 << 3,   // Disable scrollbars (window can still scroll with mouse or programatically)\n  485:     ImGuiWindowFlags_NoScrollWithMouse      = 1 << 4,   // Disable user vertically scrolling with mouse wheel\n  486:     ImGuiWindowFlags_NoCollapse             = 1 << 5,   // Disable user collapsing window by double-clicking on it\n  487:     ImGuiWindowFlags_AlwaysAutoResize       = 1 << 6,   // Resize every window to its content every frame\n  488:     ImGuiWindowFlags_ShowBorders            = 1 << 7,   // Show borders around windows and items\n  489:     ImGuiWindowFlags_NoSavedSettings        = 1 << 8,   // Never load/save settings in .ini file\n  490:     ImGuiWindowFlags_NoInputs               = 1 << 9,   // Disable catching mouse or keyboard inputs\n  491:     ImGuiWindowFlags_MenuBar                = 1 << 10,  // Has a menu-bar\n  492:     ImGuiWindowFlags_HorizontalScrollbar    = 1 << 11,  // Allow horizontal scrollbar to appear (off by default). You may use SetNextWindowContentSize(ImVec2(width,0.0f)); prior to calling Begin() to specify width. Read code in imgui_demo in the \"Horizontal Scrolling\" section.\n  493:     ImGuiWindowFlags_NoFocusOnAppearing     = 1 << 12,  // Disable taking focus when transitioning from hidden to visible state\n  494:     ImGuiWindowFlags_NoBringToFrontOnFocus  = 1 << 13,  // Disable bringing window to front when taking focus (e.g. clicking on it or programatically giving it focus)\n  495:     ImGuiWindowFlags_AlwaysVerticalScrollbar= 1 << 14,  // Always show vertical scrollbar (even if ContentSize.y < Size.y)\n  496:     ImGuiWindowFlags_AlwaysHorizontalScrollbar=1<< 15,  // Always show horizontal scrollbar (even if ContentSize.x < Size.x)\n  497:     ImGuiWindowFlags_AlwaysUseWindowPadding = 1 << 16,  // Ensure child windows without border uses style.WindowPadding (ignored by default for non-bordered child windows, because more convenient)\n  498      // [Internal]\n  499:     ImGuiWindowFlags_ChildWindow            = 1 << 20,  // Don't use! For internal use by BeginChild()\n  500:     ImGuiWindowFlags_ChildWindowAutoFitX    = 1 << 21,  // Don't use! For internal use by BeginChild()\n  501:     ImGuiWindowFlags_ChildWindowAutoFitY    = 1 << 22,  // Don't use! For internal use by BeginChild()\n  502:     ImGuiWindowFlags_ComboBox               = 1 << 23,  // Don't use! For internal use by ComboBox()\n  503:     ImGuiWindowFlags_Tooltip                = 1 << 24,  // Don't use! For internal use by BeginTooltip()\n  504:     ImGuiWindowFlags_Popup                  = 1 << 25,  // Don't use! For internal use by BeginPopup()\n  505:     ImGuiWindowFlags_Modal                  = 1 << 26,  // Don't use! For internal use by BeginPopupModal()\n  506:     ImGuiWindowFlags_ChildMenu              = 1 << 27   // Don't use! For internal use by BeginMenu()\n  507  };\n  508  \n  509: // Flags for ImGui::InputText()\n  510: enum ImGuiInputTextFlags_\n  511  {\n  512      // Default: 0\n  513:     ImGuiInputTextFlags_CharsDecimal        = 1 << 0,   // Allow 0123456789.+-*/\n  514:     ImGuiInputTextFlags_CharsHexadecimal    = 1 << 1,   // Allow 0123456789ABCDEFabcdef\n  515:     ImGuiInputTextFlags_CharsUppercase      = 1 << 2,   // Turn a..z into A..Z\n  516:     ImGuiInputTextFlags_CharsNoBlank        = 1 << 3,   // Filter out spaces, tabs\n  517:     ImGuiInputTextFlags_AutoSelectAll       = 1 << 4,   // Select entire text when first taking mouse focus\n  518:     ImGuiInputTextFlags_EnterReturnsTrue    = 1 << 5,   // Return 'true' when Enter is pressed (as opposed to when the value was modified)\n  519:     ImGuiInputTextFlags_CallbackCompletion  = 1 << 6,   // Call user function on pressing TAB (for completion handling)\n  520:     ImGuiInputTextFlags_CallbackHistory     = 1 << 7,   // Call user function on pressing Up/Down arrows (for history handling)\n  521:     ImGuiInputTextFlags_CallbackAlways      = 1 << 8,   // Call user function every time. User code may query cursor position, modify text buffer.\n  522:     ImGuiInputTextFlags_CallbackCharFilter  = 1 << 9,   // Call user function to filter character. Modify data->EventChar to replace/filter input, or return 1 to discard character.\n  523:     ImGuiInputTextFlags_AllowTabInput       = 1 << 10,  // Pressing TAB input a '\\t' character into the text field\n  524:     ImGuiInputTextFlags_CtrlEnterForNewLine = 1 << 11,  // In multi-line mode, unfocus with Enter, add new line with Ctrl+Enter (default is opposite: unfocus with Ctrl+Enter, add line with Enter).\n  525:     ImGuiInputTextFlags_NoHorizontalScroll  = 1 << 12,  // Disable following the cursor horizontally\n  526:     ImGuiInputTextFlags_AlwaysInsertMode    = 1 << 13,  // Insert mode\n  527:     ImGuiInputTextFlags_ReadOnly            = 1 << 14,  // Read-only mode\n  528:     ImGuiInputTextFlags_Password            = 1 << 15,  // Password mode, display all characters as '*'\n  529      // [Internal]\n  530:     ImGuiInputTextFlags_Multiline           = 1 << 20   // For internal use by InputTextMultiline()\n  531  };\n  532  \n  533: // Flags for ImGui::TreeNodeEx(), ImGui::CollapsingHeader*()\n  534: enum ImGuiTreeNodeFlags_\n  535  {\n  536:     ImGuiTreeNodeFlags_Selected             = 1 << 0,   // Draw as selected\n  537:     ImGuiTreeNodeFlags_Framed               = 1 << 1,   // Full colored frame (e.g. for CollapsingHeader)\n  538:     ImGuiTreeNodeFlags_AllowOverlapMode     = 1 << 2,   // Hit testing to allow subsequent widgets to overlap this one\n  539:     ImGuiTreeNodeFlags_NoTreePushOnOpen     = 1 << 3,   // Don't do a TreePush() when open (e.g. for CollapsingHeader) = no extra indent nor pushing on ID stack\n  540:     ImGuiTreeNodeFlags_NoAutoOpenOnLog      = 1 << 4,   // Don't automatically and temporarily open node when Logging is active (by default logging will automatically open tree nodes)\n  541:     ImGuiTreeNodeFlags_DefaultOpen          = 1 << 5,   // Default node to be open\n  542:     ImGuiTreeNodeFlags_OpenOnDoubleClick    = 1 << 6,   // Need double-click to open node\n  543:     ImGuiTreeNodeFlags_OpenOnArrow          = 1 << 7,   // Only open when clicking on the arrow part. If ImGuiTreeNodeFlags_OpenOnDoubleClick is also set, single-click arrow or double-click all box to open.\n  544:     ImGuiTreeNodeFlags_Leaf                 = 1 << 8,   // No collapsing, no arrow (use as a convenience for leaf nodes). \n  545:     ImGuiTreeNodeFlags_Bullet               = 1 << 9,   // Display a bullet instead of arrow\n  546:     //ImGuITreeNodeFlags_SpanAllAvailWidth  = 1 << 10,  // FIXME: TODO: Extend hit box horizontally even if not framed\n  547:     //ImGuiTreeNodeFlags_NoScrollOnOpen     = 1 << 11,  // FIXME: TODO: Disable automatic scroll on TreePop() if node got just open and contents is not visible\n  548:     ImGuiTreeNodeFlags_CollapsingHeader     = ImGuiTreeNodeFlags_Framed | ImGuiTreeNodeFlags_NoAutoOpenOnLog\n  549  };\n  550  \n  551: // Flags for ImGui::Selectable()\n  552: enum ImGuiSelectableFlags_\n  553  {\n  554      // Default: 0\n  555:     ImGuiSelectableFlags_DontClosePopups    = 1 << 0,   // Clicking this don't close parent popup window\n  556:     ImGuiSelectableFlags_SpanAllColumns     = 1 << 1,   // Selectable frame can span all columns (text will still fit in current column)\n  557:     ImGuiSelectableFlags_AllowDoubleClick   = 1 << 2    // Generate press events on double clicks too\n  558  };\n  559  \n  560: // User fill ImGuiIO.KeyMap[] array with indices into the ImGuiIO.KeysDown[512] array\n  561: enum ImGuiKey_\n  562  {\n  563:     ImGuiKey_Tab,       // for tabbing through fields\n  564:     ImGuiKey_LeftArrow, // for text edit\n  565:     ImGuiKey_RightArrow,// for text edit\n  566:     ImGuiKey_UpArrow,   // for text edit\n  567:     ImGuiKey_DownArrow, // for text edit\n  568:     ImGuiKey_PageUp,\n  569:     ImGuiKey_PageDown,\n  570:     ImGuiKey_Home,      // for text edit\n  571:     ImGuiKey_End,       // for text edit\n  572:     ImGuiKey_Delete,    // for text edit\n  573:     ImGuiKey_Backspace, // for text edit\n  574:     ImGuiKey_Enter,     // for text edit\n  575:     ImGuiKey_Escape,    // for text edit\n  576:     ImGuiKey_A,         // for text edit CTRL+A: select all\n  577:     ImGuiKey_C,         // for text edit CTRL+C: copy\n  578:     ImGuiKey_V,         // for text edit CTRL+V: paste\n  579:     ImGuiKey_X,         // for text edit CTRL+X: cut\n  580:     ImGuiKey_Y,         // for text edit CTRL+Y: redo\n  581:     ImGuiKey_Z,         // for text edit CTRL+Z: undo\n  582:     ImGuiKey_COUNT\n  583  };\n  584  \n  585  // Enumeration for PushStyleColor() / PopStyleColor()\n  586: enum ImGuiCol_\n  587  {\n  588:     ImGuiCol_Text,\n  589:     ImGuiCol_TextDisabled,\n  590:     ImGuiCol_WindowBg,              // Background of normal windows\n  591:     ImGuiCol_ChildWindowBg,         // Background of child windows\n  592:     ImGuiCol_PopupBg,               // Background of popups, menus, tooltips windows\n  593:     ImGuiCol_Border,\n  594:     ImGuiCol_BorderShadow,\n  595:     ImGuiCol_FrameBg,               // Background of checkbox, radio button, plot, slider, text input\n  596:     ImGuiCol_FrameBgHovered,\n  597:     ImGuiCol_FrameBgActive,\n  598:     ImGuiCol_TitleBg,\n  599:     ImGuiCol_TitleBgCollapsed,\n  600:     ImGuiCol_TitleBgActive,\n  601:     ImGuiCol_MenuBarBg,\n  602:     ImGuiCol_ScrollbarBg,\n  603:     ImGuiCol_ScrollbarGrab,\n  604:     ImGuiCol_ScrollbarGrabHovered,\n  605:     ImGuiCol_ScrollbarGrabActive,\n  606:     ImGuiCol_ComboBg,\n  607:     ImGuiCol_CheckMark,\n  608:     ImGuiCol_SliderGrab,\n  609:     ImGuiCol_SliderGrabActive,\n  610:     ImGuiCol_Button,\n  611:     ImGuiCol_ButtonHovered,\n  612:     ImGuiCol_ButtonActive,\n  613:     ImGuiCol_Header,\n  614:     ImGuiCol_HeaderHovered,\n  615:     ImGuiCol_HeaderActive,\n  616:     ImGuiCol_Column,\n  617:     ImGuiCol_ColumnHovered,\n  618:     ImGuiCol_ColumnActive,\n  619:     ImGuiCol_ResizeGrip,\n  620:     ImGuiCol_ResizeGripHovered,\n  621:     ImGuiCol_ResizeGripActive,\n  622:     ImGuiCol_CloseButton,\n  623:     ImGuiCol_CloseButtonHovered,\n  624:     ImGuiCol_CloseButtonActive,\n  625:     ImGuiCol_PlotLines,\n  626:     ImGuiCol_PlotLinesHovered,\n  627:     ImGuiCol_PlotHistogram,\n  628:     ImGuiCol_PlotHistogramHovered,\n  629:     ImGuiCol_TextSelectedBg,\n  630:     ImGuiCol_ModalWindowDarkening,  // darken entire screen when a modal window is active\n  631:     ImGuiCol_COUNT\n  632  };\n  633  \n  634  // Enumeration for PushStyleVar() / PopStyleVar()\n  635: // NB: the enum only refers to fields of ImGuiStyle() which makes sense to be pushed/poped in UI code. Feel free to add others.\n  636: enum ImGuiStyleVar_\n  637  {\n  638:     ImGuiStyleVar_Alpha,               // float\n  639:     ImGuiStyleVar_WindowPadding,       // ImVec2\n  640:     ImGuiStyleVar_WindowRounding,      // float\n  641:     ImGuiStyleVar_WindowMinSize,       // ImVec2\n  642:     ImGuiStyleVar_ChildWindowRounding, // float\n  643:     ImGuiStyleVar_FramePadding,        // ImVec2\n  644:     ImGuiStyleVar_FrameRounding,       // float\n  645:     ImGuiStyleVar_ItemSpacing,         // ImVec2\n  646:     ImGuiStyleVar_ItemInnerSpacing,    // ImVec2\n  647:     ImGuiStyleVar_IndentSpacing,       // float\n  648:     ImGuiStyleVar_GrabMinSize,         // float\n  649:     ImGuiStyleVar_ButtonTextAlign,     // flags ImGuiAlign_*\n  650:     ImGuiStyleVar_Count_\n  651  };\n  652  \n  653  // Enumeration for ColorEditMode()\n  654  // FIXME-OBSOLETE: Will be replaced by future color/picker api\n  655: enum ImGuiColorEditMode_\n  656  {\n  657:     ImGuiColorEditMode_UserSelect = -2,\n  658:     ImGuiColorEditMode_UserSelectShowButton = -1,\n  659:     ImGuiColorEditMode_RGB = 0,\n  660:     ImGuiColorEditMode_HSV = 1,\n  661:     ImGuiColorEditMode_HEX = 2\n  662  };\n  663  \n  664  // Enumeration for GetMouseCursor()\n  665: enum ImGuiMouseCursor_\n  666  {\n  667:     ImGuiMouseCursor_None = -1,\n  668:     ImGuiMouseCursor_Arrow = 0,\n  669:     ImGuiMouseCursor_TextInput,         // When hovering over InputText, etc.\n  670:     ImGuiMouseCursor_Move,              // Unused\n  671:     ImGuiMouseCursor_ResizeNS,          // Unused\n  672:     ImGuiMouseCursor_ResizeEW,          // When hovering over a column\n  673:     ImGuiMouseCursor_ResizeNESW,        // Unused\n  674:     ImGuiMouseCursor_ResizeNWSE,        // When hovering over the bottom-right corner of a window\n  675:     ImGuiMouseCursor_Count_\n  676  };\n  677  \n  678: // Condition flags for ImGui::SetWindow***(), SetNextWindow***(), SetNextTreeNode***() functions\n  679: // All those functions treat 0 as a shortcut to ImGuiSetCond_Always\n  680: enum ImGuiSetCond_\n  681  {\n  682:     ImGuiSetCond_Always        = 1 << 0, // Set the variable\n  683:     ImGuiSetCond_Once          = 1 << 1, // Set the variable once per runtime session (only the first call with succeed)\n  684:     ImGuiSetCond_FirstUseEver  = 1 << 2, // Set the variable if the window has no saved data (if doesn't exist in the .ini file)\n  685:     ImGuiSetCond_Appearing     = 1 << 3  // Set the variable if the window is appearing after being hidden/inactive (or the first time)\n  686  };\n  687  \n  688: struct ImGuiStyle\n  689  {\n  690:     float       Alpha;                      // Global alpha applies to everything in ImGui\n  691      ImVec2      WindowPadding;              // Padding within a window\n  692      ImVec2      WindowMinSize;              // Minimum window size\n  ...\n  711      bool        AntiAliasedShapes;          // Enable anti-aliasing on filled shapes (rounded rectangles, circles, etc.)\n  712      float       CurveTessellationTol;       // Tessellation tolerance. Decrease for highly tessellated curves (higher quality, more polygons), increase to reduce quality.\n  713:     ImVec4      Colors[ImGuiCol_COUNT];\n  714  \n  715:     IMGUI_API ImGuiStyle();\n  716  };\n  717  \n  718: // This is where your app communicate with ImGui. Access via ImGui::GetIO().\n  719  // Read 'Programmer guide' section in .cpp file for general usage.\n  720: struct ImGuiIO\n  721  {\n  722      //------------------------------------------------------------------\n  ...\n  727      float         DeltaTime;                // = 1.0f/60.0f         // Time elapsed since last frame, in seconds.\n  728      float         IniSavingRate;            // = 5.0f               // Maximum time between saving positions/sizes to .ini file, in seconds.\n  729:     const char*   IniFilename;              // = \"imgui.ini\"        // Path to .ini file. NULL to disable .ini saving.\n  730:     const char*   LogFilename;              // = \"imgui_log.txt\"    // Path to .log file (default parameter to ImGui::LogToFile when no file is specified).\n  731      float         MouseDoubleClickTime;     // = 0.30f              // Time for a double-click, in seconds.\n  732      float         MouseDoubleClickMaxDist;  // = 6.0f               // Distance threshold to stay in to validate a double-click, in pixels.\n  733      float         MouseDragThreshold;       // = 6.0f               // Distance threshold before considering we are dragging\n  734:     int           KeyMap[ImGuiKey_COUNT];   // <unset>              // Map of indices into the KeysDown[512] entries array\n  735      float         KeyRepeatDelay;           // = 0.250f             // When holding a key/button, time before it starts repeating, in seconds (for buttons in Repeat mode, etc.).\n  736      float         KeyRepeatRate;            // = 0.020f             // When holding a key/button, rate at which it repeats, in seconds.\n  ...\n  741      bool          FontAllowUserScaling;     // = false              // Allow user scaling text of individual window with CTRL+Wheel.\n  742      ImFont*       FontDefault;              // = NULL               // Font to use on NewFrame(). Use NULL to uses Fonts->Fonts[0].\n  743:     ImVec2        DisplayFramebufferScale;  // = (1.0f,1.0f)        // For retina display or other situations where window coordinates are different from framebuffer coordinates. User storage only, presently not used by ImGui.\n  744      ImVec2        DisplayVisibleMin;        // <unset> (0.0f,0.0f)  // If you use DisplaySize as a virtual space larger than your screen, set DisplayVisibleMin/Max to the visible area.\n  745      ImVec2        DisplayVisibleMax;        // <unset> (0.0f,0.0f)  // If the values are the same, we defaults to Min=(0.0f) and Max=DisplaySize\n  ...\n  778  \n  779      ImVec2      MousePos;                   // Mouse position, in pixels (set to -1,-1 if no mouse / on another screen, etc.)\n  780:     bool        MouseDown[5];               // Mouse buttons: left, right, middle + extras. ImGui itself mostly only uses left button (BeginPopupContext** are using right button). Others buttons allows us to track if the mouse is being used by your application + available to user as a convenience via IsMouse** API.\n  781      float       MouseWheel;                 // Mouse wheel: 1 unit scrolls about 5 lines text.\n  782:     bool        MouseDrawCursor;            // Request ImGui to draw a mouse cursor for you (if you are on a platform without a mouse cursor).\n  783      bool        KeyCtrl;                    // Keyboard modifier pressed: Control\n  784      bool        KeyShift;                   // Keyboard modifier pressed: Shift\n  ...\n  789  \n  790      // Functions\n  791:     IMGUI_API void AddInputCharacter(ImWchar c);                        // Add new character into InputCharacters[]\n  792:     IMGUI_API void AddInputCharactersUTF8(const char* utf8_chars);      // Add new characters into InputCharacters[] from an UTF-8 string\n  793      inline void    ClearInputCharacters() { InputCharacters[0] = 0; }   // Clear the text input buffer manually\n  794  \n  ...\n  797      //------------------------------------------------------------------\n  798  \n  799:     bool        WantCaptureMouse;           // Mouse is hovering a window or widget is active (= ImGui will use your mouse input). Use to hide mouse from the rest of your application\n  800:     bool        WantCaptureKeyboard;        // Widget is active (= ImGui will use your keyboard input). Use to hide keyboard from the rest of your application\n  801      bool        WantTextInput;              // Some text input widget is active, which will read input characters from the InputCharacters array. Use to activate on screen keyboard if your system needs one\n  802      float       Framerate;                  // Application framerate estimation, in frame per second. Solely for convenience. Rolling average estimation based on IO.DeltaTime over 120 frames\n  ...\n  808  \n  809      //------------------------------------------------------------------\n  810:     // [Private] ImGui will maintain those fields. Forward compatibility not guaranteed!\n  811      //------------------------------------------------------------------\n  812  \n  ...\n  817      bool        MouseDoubleClicked[5];      // Has mouse button been double-clicked?\n  818      bool        MouseReleased[5];           // Mouse button went from Down to !Down\n  819:     bool        MouseDownOwned[5];          // Track if button was clicked inside a window. We don't request mouse capture from the application if click started outside ImGui bounds.\n  820      float       MouseDownDuration[5];       // Duration the mouse button has been down (0.0f == just clicked)\n  821      float       MouseDownDurationPrev[5];   // Previous time the mouse button has been down\n  ...\n  824      float       KeysDownDurationPrev[512];  // Previous duration the key has been down\n  825  \n  826:     IMGUI_API   ImGuiIO();\n  827  };\n  828  \n  ...\n  832  \n  833  // Lightweight std::vector<> like class to avoid dragging dependencies (also: windows implementation of STL with debug enabled is absurdly slow, so let's bypass it so our code runs fast in debug).\n  834: // Our implementation does NOT call c++ constructors because we don't use them in ImGui. Don't use this class as a straight std::vector replacement in your code!\n  835  template<typename T>\n  836  class ImVector\n  ...\n  846  \n  847      ImVector()                  { Size = Capacity = 0; Data = NULL; }\n  848:     ~ImVector()                 { if (Data) ImGui::MemFree(Data); }\n  849  \n  850      inline bool                 empty() const                   { return Size == 0; }\n  ...\n  855      inline const value_type&    operator[](int i) const         { IM_ASSERT(i < Size); return Data[i]; }\n  856  \n  857:     inline void                 clear()                         { if (Data) { Size = Capacity = 0; ImGui::MemFree(Data); Data = NULL; } }\n  858      inline iterator             begin()                         { return Data; }\n  859      inline const_iterator       begin() const                   { return Data; }\n  ...\n  872      {\n  873          if (new_capacity <= Capacity) return;\n  874:         T* new_data = (value_type*)ImGui::MemAlloc((size_t)new_capacity * sizeof(value_type));\n  875          if (Data)\n  876              memcpy(new_data, Data, (size_t)Size * sizeof(value_type));\n  877:         ImGui::MemFree(Data);\n  878          Data = new_data;\n  879          Capacity = new_capacity;\n  ...\n  890  // Convenient if you want to quickly create an UI within deep-nested code that runs multiple times every frame.\n  891  // Usage:\n  892: //   IMGUI_ONCE_UPON_A_FRAME\n  893  //   {\n  894  //      // code block will be executed one per frame\n  895  //   }\n  896  // Attention! the macro expands into 2 statement so make sure you don't use it within e.g. an if() statement without curly braces.\n  897: #define IMGUI_ONCE_UPON_A_FRAME    static ImGuiOnceUponAFrame imgui_oaf##__LINE__; if (imgui_oaf##__LINE__)\n  898: struct ImGuiOnceUponAFrame\n  899  {\n  900:     ImGuiOnceUponAFrame() { RefFrame = -1; }\n  901      mutable int RefFrame;\n  902:     operator bool() const { int current_frame = ImGui::GetFrameCount(); if (RefFrame == current_frame) return false; RefFrame = current_frame; return true; }\n  903  };\n  904  \n  905  // Helper: Parse and apply text filters. In format \"aaaaa[,bbbb][,ccccc]\"\n  906: struct ImGuiTextFilter\n  907  {\n  908      struct TextRange\n  ...\n  919          static bool is_blank(char c) { return c == ' ' || c == '\\t'; }\n  920          void trim_blanks() { while (b < e && is_blank(*b)) b++; while (e > b && is_blank(*(e-1))) e--; }\n  921:         IMGUI_API void split(char separator, ImVector<TextRange>& out);\n  922      };\n  923  \n  ...\n  926      int                 CountGrep;\n  927  \n  928:     ImGuiTextFilter(const char* default_filter = \"\");\n  929:     ~ImGuiTextFilter() {}\n  930      void                Clear() { InputBuf[0] = 0; Build(); }\n  931      bool                Draw(const char* label = \"Filter (inc,-exc)\", float width = 0.0f);    // Helper calling InputText+Build\n  932      bool                PassFilter(const char* text, const char* text_end = NULL) const;\n  933      bool                IsActive() const { return !Filters.empty(); }\n  934:     IMGUI_API void      Build();\n  935  };\n  936  \n  937  // Helper: Text buffer for logging/accumulating text\n  938: struct ImGuiTextBuffer\n  939  {\n  940      ImVector<char>      Buf;\n  941  \n  942:     ImGuiTextBuffer()   { Buf.push_back(0); }\n  943      inline char         operator[](int i) { return Buf.Data[i]; }\n  944      const char*         begin() const { return &Buf.front(); }\n  ...\n  948      void                clear() { Buf.clear(); Buf.push_back(0); }\n  949      const char*         c_str() const { return Buf.Data; }\n  950:     IMGUI_API void      append(const char* fmt, ...) IM_PRINTFARGS(2);\n  951:     IMGUI_API void      appendv(const char* fmt, va_list args);\n  952  };\n  953  \n  ...\n  960  // - You want to store custom debug data easily without adding or editing structures in your code.\n  961  // Types are NOT stored, so it is up to you to make sure your Key don't collide with different types.\n  962: struct ImGuiStorage\n  963  {\n  964      struct Pair\n  965      {\n  966:         ImGuiID key;\n  967          union { int val_i; float val_f; void* val_p; };\n  968:         Pair(ImGuiID _key, int _val_i) { key = _key; val_i = _val_i; }\n  969:         Pair(ImGuiID _key, float _val_f) { key = _key; val_f = _val_f; }\n  970:         Pair(ImGuiID _key, void* _val_p) { key = _key; val_p = _val_p; }\n  971      };\n  972      ImVector<Pair>      Data;\n  ...\n  975      // - Set***() functions find pair, insertion on demand if missing.\n  976      // - Sorted insertion is costly, paid once. A typical frame shouldn't need to insert any new pair.\n  977:     IMGUI_API void      Clear();\n  978:     IMGUI_API int       GetInt(ImGuiID key, int default_val = 0) const;\n  979:     IMGUI_API void      SetInt(ImGuiID key, int val);\n  980:     IMGUI_API bool      GetBool(ImGuiID key, bool default_val = false) const;\n  981:     IMGUI_API void      SetBool(ImGuiID key, bool val);\n  982:     IMGUI_API float     GetFloat(ImGuiID key, float default_val = 0.0f) const;\n  983:     IMGUI_API void      SetFloat(ImGuiID key, float val);\n  984:     IMGUI_API void*     GetVoidPtr(ImGuiID key) const; // default_val is NULL\n  985:     IMGUI_API void      SetVoidPtr(ImGuiID key, void* val);\n  986  \n  987      // - Get***Ref() functions finds pair, insert on demand if missing, return pointer. Useful if you intend to do Get+Set.\n  988      // - References are only valid until a new value is added to the storage. Calling a Set***() function or a Get***Ref() function invalidates the pointer.\n  989      // - A typical use case where this is convenient for quick hacking (e.g. add storage during a live Edit&Continue session if you can't modify existing struct)\n  990:     //      float* pvar = ImGui::GetFloatRef(key); ImGui::SliderFloat(\"var\", pvar, 0, 100.0f); some_var += *pvar;\n  991:     IMGUI_API int*      GetIntRef(ImGuiID key, int default_val = 0);\n  992:     IMGUI_API bool*     GetBoolRef(ImGuiID key, bool default_val = false);\n  993:     IMGUI_API float*    GetFloatRef(ImGuiID key, float default_val = 0.0f);\n  994:     IMGUI_API void**    GetVoidPtrRef(ImGuiID key, void* default_val = NULL);\n  995  \n  996      // Use on your own storage if you know only integer are being stored (open/close all tree nodes)\n  997:     IMGUI_API void      SetAllInt(int val);\n  998  };\n  999  \n 1000: // Shared state of InputText(), passed to callback when a ImGuiInputTextFlags_Callback* flag is used and the corresponding callback is triggered.\n 1001: struct ImGuiTextEditCallbackData\n 1002  {\n 1003:     ImGuiInputTextFlags EventFlag;      // One of ImGuiInputTextFlags_Callback* // Read-only\n 1004:     ImGuiInputTextFlags Flags;          // What user passed to InputText()      // Read-only\n 1005      void*               UserData;       // What user passed to InputText()      // Read-only\n 1006      bool                ReadOnly;       // Read-only mode                       // Read-only\n ....\n 1011      // Completion,History,Always events:\n 1012      // If you modify the buffer contents make sure you update 'BufTextLen' and set 'BufDirty' to true.\n 1013:     ImGuiKey            EventKey;       // Key pressed (Up/Down/TAB)            // Read-only\n 1014      char*               Buf;            // Current text buffer                  // Read-write (pointed data only, can't replace the actual pointer)\n 1015      int                 BufTextLen;     // Current text length in bytes         // Read-write\n ....\n 1021  \n 1022      // NB: Helper functions for text manipulation. Calling those function loses selection.\n 1023:     IMGUI_API void    DeleteChars(int pos, int bytes_count);\n 1024:     IMGUI_API void    InsertChars(int pos, const char* text, const char* text_end = NULL);\n 1025      bool    HasSelection() const { return SelectionStart != SelectionEnd; }\n 1026  };\n ....\n 1028  // Resizing callback data to apply custom constraint. As enabled by SetNextWindowSizeConstraints(). Callback is called during the next Begin().\n 1029  // NB: For basic min/max size constraint on each axis you don't need to use the callback! The SetNextWindowSizeConstraints() parameters are enough.\n 1030: struct ImGuiSizeConstraintCallbackData\n 1031  {\n 1032      void*   UserData;       // Read-only.   What user passed to SetNextWindowSizeConstraints()\n ....\n 1037  \n 1038  // Helpers macros to generate 32-bits encoded colors\n 1039: #ifdef IMGUI_USE_BGRA_PACKED_COLOR\n 1040  #define IM_COL32_R_SHIFT    16\n 1041  #define IM_COL32_G_SHIFT    8\n ....\n 1058  // Prefer using IM_COL32() macros if you want a guaranteed compile-time ImU32 for usage with ImDrawList API.\n 1059  // **Avoid storing ImColor! Store either u32 of ImVec4. This is not a full-featured color class.\n 1060: // **None of the ImGui API are using ImColor directly but you can use it as a convenience to pass colors in either ImU32 or ImVec4 formats.\n 1061  struct ImColor\n 1062  {\n ....\n 1068      ImColor(float r, float g, float b, float a = 1.0f)              { Value.x = r; Value.y = g; Value.z = b; Value.w = a; }\n 1069      ImColor(const ImVec4& col)                                      { Value = col; }\n 1070:     inline operator ImU32() const                                   { return ImGui::ColorConvertFloat4ToU32(Value); }\n 1071      inline operator ImVec4() const                                  { return Value; }\n 1072  \n 1073:     inline void    SetHSV(float h, float s, float v, float a = 1.0f){ ImGui::ColorConvertHSVtoRGB(h, s, v, Value.x, Value.y, Value.z); Value.w = a; }\n 1074  \n 1075:     static ImColor HSV(float h, float s, float v, float a = 1.0f)   { float r,g,b; ImGui::ColorConvertHSVtoRGB(h, s, v, r, g, b); return ImColor(r,g,b,a); }\n 1076  };\n 1077  \n ....\n 1079  // If you are submitting lots of evenly spaced items and you have a random access to the list, you can perform coarse clipping based on visibility to save yourself from processing those items at all.\n 1080  // The clipper calculates the range of visible items and advance the cursor to compensate for the non-visible items we have skipped. \n 1081: // ImGui already clip items based on their bounds but it needs to measure text size to do so. Coarse clipping before submission makes this cost and your own data fetching/submission cost null.\n 1082  // Usage:\n 1083: //     ImGuiListClipper clipper(1000);  // we have 1000 elements, evenly spaced.\n 1084  //     while (clipper.Step())\n 1085  //         for (int i = clipper.DisplayStart; i < clipper.DisplayEnd; i++)\n 1086: //             ImGui::Text(\"line number %d\", i);\n 1087  // - Step 0: the clipper let you process the first element, regardless of it being visible or not, so we can measure the element height (step skipped if we passed a known height as second arg to constructor).\n 1088  // - Step 1: the clipper infer height from first element, calculate the actual range of elements to display, and position the cursor before the first element.\n 1089  // - (Step 2: dummy step only required if an explicit items_height was passed to constructor or Begin() and user call Step(). Does nothing and switch to Step 3.)\n 1090  // - Step 3: the clipper validate that we have reached the expected Y position (corresponding to element DisplayEnd), advance the cursor to the end of the list and then returns 'false' to end the loop.\n 1091: struct ImGuiListClipper\n 1092  {\n 1093      float   StartPosY;\n ....\n 1098      // items_height: Use -1.0f to be calculated automatically on first step. Otherwise pass in the distance between your items, typically GetTextLineHeightWithSpacing() or GetItemsLineHeightWithSpacing().\n 1099      // If you don't specify an items_height, you NEED to call Step(). If you specify items_height you may call the old Begin()/End() api directly, but prefer calling Step().\n 1100:     ImGuiListClipper(int items_count = -1, float items_height = -1.0f)  { Begin(items_count, items_height); } // NB: Begin() initialize every fields (as we allow user to call Begin/End multiple times on a same instance if they want).\n 1101:     ~ImGuiListClipper()                                                 { IM_ASSERT(ItemsCount == -1); }      // Assert if user forgot to call End() or Step() until false.\n 1102  \n 1103:     IMGUI_API bool Step();                                              // Call until it returns false. The DisplayStart/DisplayEnd fields will be set and you can process/draw those items.\n 1104:     IMGUI_API void Begin(int items_count, float items_height = -1.0f);  // Automatically called by constructor if you passed 'items_count' or by Step() in Step 1.\n 1105:     IMGUI_API void End();                                               // Automatically called on the last call of Step() that returns false.\n 1106  };\n 1107  \n ....\n 1135  \n 1136  // Vertex layout\n 1137: #ifndef IMGUI_OVERRIDE_DRAWVERT_STRUCT_LAYOUT\n 1138  struct ImDrawVert\n 1139  {\n ....\n 1143  };\n 1144  #else\n 1145: // You can override the vertex format layout by defining IMGUI_OVERRIDE_DRAWVERT_STRUCT_LAYOUT in imconfig.h\n 1146  // The code expect ImVec2 pos (8 bytes), ImVec2 uv (8 bytes), ImU32 col (4 bytes), but you can re-order them or add other fields as needed to simplify integration in your engine.\n 1147  // The type has to be described within the macro (you can either declare the struct or use a typedef)\n 1148: IMGUI_OVERRIDE_DRAWVERT_STRUCT_LAYOUT;\n 1149  #endif\n 1150  \n ....\n 1158  \n 1159  // Draw command list\n 1160: // This is the low-level list of polygons that ImGui functions are filling. At the end of the frame, all command lists are passed to your ImGuiIO::RenderDrawListFn function for rendering.\n 1161: // At the moment, each ImGui window contains its own ImDrawList but they could potentially be merged in the future.\n 1162: // If you want to add custom rendering within a window, you can use ImGui::GetWindowDrawList() to access the current draw list and add your own primitives.\n 1163: // You can interleave normal ImGui:: calls and adding primitives to the current draw list.\n 1164: // All positions are in screen coordinates (0,0=top-left, 1 pixel per unit). Primitives are always added to the list and not culled (culling is done at render time and at a higher-level by ImGui:: functions).\n 1165  struct ImDrawList\n 1166  {\n ....\n 1184      ImDrawList()  { _OwnerName = NULL; Clear(); }\n 1185      ~ImDrawList() { ClearFreeMemory(); }\n 1186:     IMGUI_API void  PushClipRect(ImVec2 clip_rect_min, ImVec2 clip_rect_max, bool intersect_with_current_clip_rect = false);  // Render-level scissoring. This is passed down to your render function but not used for CPU-side coarse clipping. Prefer using higher-level ImGui::PushClipRect() to affect logic (hit-testing and widget culling)\n 1187:     IMGUI_API void  PushClipRectFullScreen();\n 1188:     IMGUI_API void  PopClipRect();\n 1189:     IMGUI_API void  PushTextureID(const ImTextureID& texture_id);\n 1190:     IMGUI_API void  PopTextureID();\n 1191  \n 1192      // Primitives\n 1193:     IMGUI_API void  AddLine(const ImVec2& a, const ImVec2& b, ImU32 col, float thickness = 1.0f);\n 1194:     IMGUI_API void  AddRect(const ImVec2& a, const ImVec2& b, ImU32 col, float rounding = 0.0f, int rounding_corners_flags = ~0, float thickness = 1.0f);   // a: upper-left, b: lower-right, rounding_corners_flags: 4-bits corresponding to which corner to round\n 1195:     IMGUI_API void  AddRectFilled(const ImVec2& a, const ImVec2& b, ImU32 col, float rounding = 0.0f, int rounding_corners_flags = ~0);                     // a: upper-left, b: lower-right\n 1196:     IMGUI_API void  AddRectFilledMultiColor(const ImVec2& a, const ImVec2& b, ImU32 col_upr_left, ImU32 col_upr_right, ImU32 col_bot_right, ImU32 col_bot_left);\n 1197:     IMGUI_API void  AddQuad(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& d, ImU32 col, float thickness = 1.0f);\n 1198:     IMGUI_API void  AddQuadFilled(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& d, ImU32 col);\n 1199:     IMGUI_API void  AddTriangle(const ImVec2& a, const ImVec2& b, const ImVec2& c, ImU32 col, float thickness = 1.0f);\n 1200:     IMGUI_API void  AddTriangleFilled(const ImVec2& a, const ImVec2& b, const ImVec2& c, ImU32 col);\n 1201:     IMGUI_API void  AddCircle(const ImVec2& centre, float radius, ImU32 col, int num_segments = 12, float thickness = 1.0f);\n 1202:     IMGUI_API void  AddCircleFilled(const ImVec2& centre, float radius, ImU32 col, int num_segments = 12);\n 1203:     IMGUI_API void  AddText(const ImVec2& pos, ImU32 col, const char* text_begin, const char* text_end = NULL);\n 1204:     IMGUI_API void  AddText(const ImFont* font, float font_size, const ImVec2& pos, ImU32 col, const char* text_begin, const char* text_end = NULL, float wrap_width = 0.0f, const ImVec4* cpu_fine_clip_rect = NULL);\n 1205:     IMGUI_API void  AddImage(ImTextureID user_texture_id, const ImVec2& a, const ImVec2& b, const ImVec2& uv_a = ImVec2(0,0), const ImVec2& uv_b = ImVec2(1,1), ImU32 col = 0xFFFFFFFF);\n 1206:     IMGUI_API void  AddImageQuad(ImTextureID user_texture_id, const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& d, const ImVec2& uv_a = ImVec2(0,0), const ImVec2& uv_b = ImVec2(1,0), const ImVec2& uv_c = ImVec2(1,1), const ImVec2& uv_d = ImVec2(0,1), ImU32 col = 0xFFFFFFFF);\n 1207:     IMGUI_API void  AddPolyline(const ImVec2* points, const int num_points, ImU32 col, bool closed, float thickness, bool anti_aliased);\n 1208:     IMGUI_API void  AddConvexPolyFilled(const ImVec2* points, const int num_points, ImU32 col, bool anti_aliased);\n 1209:     IMGUI_API void  AddBezierCurve(const ImVec2& pos0, const ImVec2& cp0, const ImVec2& cp1, const ImVec2& pos1, ImU32 col, float thickness, int num_segments = 0);\n 1210  \n 1211      // Stateful path API, add points then finish with PathFill() or PathStroke()\n ....\n 1215      inline    void  PathFillConvex(ImU32 col)                                   { AddConvexPolyFilled(_Path.Data, _Path.Size, col, true); PathClear(); }\n 1216      inline    void  PathStroke(ImU32 col, bool closed, float thickness = 1.0f)  { AddPolyline(_Path.Data, _Path.Size, col, closed, thickness, true); PathClear(); }\n 1217:     IMGUI_API void  PathArcTo(const ImVec2& centre, float radius, float a_min, float a_max, int num_segments = 10);\n 1218:     IMGUI_API void  PathArcToFast(const ImVec2& centre, float radius, int a_min_of_12, int a_max_of_12);                                // Use precomputed angles for a 12 steps circle\n 1219:     IMGUI_API void  PathBezierCurveTo(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, int num_segments = 0);\n 1220:     IMGUI_API void  PathRect(const ImVec2& rect_min, const ImVec2& rect_max, float rounding = 0.0f, int rounding_corners_flags = ~0);   // rounding_corners_flags: 4-bits corresponding to which corner to round\n 1221  \n 1222      // Channels\n 1223      // - Use to simulate layers. By switching channels to can render out-of-order (e.g. submit foreground primitives before background primitives)\n 1224      // - Use to minimize draw calls (e.g. if going back-and-forth between multiple non-overlapping clipping rectangles, prefer to append into separate channels then merge at the end)\n 1225:     IMGUI_API void  ChannelsSplit(int channels_count);\n 1226:     IMGUI_API void  ChannelsMerge();\n 1227:     IMGUI_API void  ChannelsSetCurrent(int channel_index);\n 1228  \n 1229      // Advanced\n 1230:     IMGUI_API void  AddCallback(ImDrawCallback callback, void* callback_data);  // Your rendering function must check for 'UserCallback' in ImDrawCmd and call the function instead of rendering triangles.\n 1231:     IMGUI_API void  AddDrawCmd();                                               // This is useful if you need to forcefully create a new draw call (to allow for dependent rendering / blending). Otherwise primitives are merged into the same draw-call as much as possible\n 1232  \n 1233      // Internal helpers\n 1234      // NB: all primitives needs to be reserved via PrimReserve() beforehand!\n 1235:     IMGUI_API void  Clear();\n 1236:     IMGUI_API void  ClearFreeMemory();\n 1237:     IMGUI_API void  PrimReserve(int idx_count, int vtx_count);\n 1238:     IMGUI_API void  PrimRect(const ImVec2& a, const ImVec2& b, ImU32 col);      // Axis aligned rectangle (composed of two triangles)\n 1239:     IMGUI_API void  PrimRectUV(const ImVec2& a, const ImVec2& b, const ImVec2& uv_a, const ImVec2& uv_b, ImU32 col);\n 1240:     IMGUI_API void  PrimQuadUV(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& d, const ImVec2& uv_a, const ImVec2& uv_b, const ImVec2& uv_c, const ImVec2& uv_d, ImU32 col);\n 1241      inline    void  PrimWriteVtx(const ImVec2& pos, const ImVec2& uv, ImU32 col){ _VtxWritePtr->pos = pos; _VtxWritePtr->uv = uv; _VtxWritePtr->col = col; _VtxWritePtr++; _VtxCurrentIdx++; }\n 1242      inline    void  PrimWriteIdx(ImDrawIdx idx)                                 { *_IdxWritePtr = idx; _IdxWritePtr++; }\n 1243      inline    void  PrimVtx(const ImVec2& pos, const ImVec2& uv, ImU32 col)     { PrimWriteIdx((ImDrawIdx)_VtxCurrentIdx); PrimWriteVtx(pos, uv, col); }\n 1244:     IMGUI_API void  UpdateClipRect();\n 1245:     IMGUI_API void  UpdateTextureID();\n 1246  };\n 1247  \n 1248: // All draw data to render an ImGui frame\n 1249  struct ImDrawData\n 1250  {\n ....\n 1257      // Functions\n 1258      ImDrawData() { Valid = false; CmdLists = NULL; CmdListsCount = TotalVtxCount = TotalIdxCount = 0; }\n 1259:     IMGUI_API void DeIndexAllBuffers();               // For backward compatibility: convert all buffers from indexed to de-indexed, in case you cannot render indexed. Note: this is slow and most likely a waste of resources. Always prefer indexed rendering!\n 1260:     IMGUI_API void ScaleClipRects(const ImVec2& sc);  // Helper to scale the ClipRect field of each ImDrawCmd. Use if your final output buffer is at a different scale than ImGui expects, or if there is a difference between your window resolution and framebuffer resolution.\n 1261  };\n 1262  \n ....\n 1279      ImFont*         DstFont;\n 1280  \n 1281:     IMGUI_API ImFontConfig();\n 1282  };\n 1283  \n 1284  // Load and rasterize multiple TTF fonts into a same texture.\n 1285  // Sharing a texture for multiple fonts allows us to reduce the number of draw calls during rendering.\n 1286: // We also add custom graphic data into the texture that serves for ImGui.\n 1287  //  1. (Optional) Call AddFont*** functions. If you don't call any, the default font will be loaded for you.\n 1288  //  2. Call GetTexDataAsAlpha8() or GetTexDataAsRGBA32() to build and retrieve pixels data.\n ....\n 1293  struct ImFontAtlas\n 1294  {\n 1295:     IMGUI_API ImFontAtlas();\n 1296:     IMGUI_API ~ImFontAtlas();\n 1297:     IMGUI_API ImFont*           AddFont(const ImFontConfig* font_cfg);\n 1298:     IMGUI_API ImFont*           AddFontDefault(const ImFontConfig* font_cfg = NULL);\n 1299:     IMGUI_API ImFont*           AddFontFromFileTTF(const char* filename, float size_pixels, const ImFontConfig* font_cfg = NULL, const ImWchar* glyph_ranges = NULL);\n 1300:     IMGUI_API ImFont*           AddFontFromMemoryTTF(void* ttf_data, int ttf_size, float size_pixels, const ImFontConfig* font_cfg = NULL, const ImWchar* glyph_ranges = NULL);                                        // Transfer ownership of 'ttf_data' to ImFontAtlas, will be deleted after Build()\n 1301:     IMGUI_API ImFont*           AddFontFromMemoryCompressedTTF(const void* compressed_ttf_data, int compressed_ttf_size, float size_pixels, const ImFontConfig* font_cfg = NULL, const ImWchar* glyph_ranges = NULL);  // 'compressed_ttf_data' still owned by caller. Compress with binary_to_compressed_c.cpp\n 1302:     IMGUI_API ImFont*           AddFontFromMemoryCompressedBase85TTF(const char* compressed_ttf_data_base85, float size_pixels, const ImFontConfig* font_cfg = NULL, const ImWchar* glyph_ranges = NULL);              // 'compressed_ttf_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 paramaeter\n 1303:     IMGUI_API void              ClearTexData();             // Clear the CPU-side texture data. Saves RAM once the texture has been copied to graphics memory.\n 1304:     IMGUI_API void              ClearInputData();           // Clear the input TTF data (inc sizes, glyph ranges)\n 1305:     IMGUI_API void              ClearFonts();               // Clear the ImGui-side font data (glyphs storage, UV coordinates)\n 1306:     IMGUI_API void              Clear();                    // Clear all\n 1307  \n 1308      // Retrieve texture data\n ....\n 1311      // RGBA32 format is provided for convenience and high compatibility, but note that all RGB pixels are white, so 75% of the memory is wasted.\n 1312      // Pitch = Width * BytesPerPixels\n 1313:     IMGUI_API void              GetTexDataAsAlpha8(unsigned char** out_pixels, int* out_width, int* out_height, int* out_bytes_per_pixel = NULL);  // 1 byte per-pixel\n 1314:     IMGUI_API void              GetTexDataAsRGBA32(unsigned char** out_pixels, int* out_width, int* out_height, int* out_bytes_per_pixel = NULL);  // 4 bytes-per-pixel\n 1315      void                        SetTexID(void* id)  { TexID = id; }\n 1316  \n 1317      // Helpers to retrieve list of common Unicode ranges (2 value per range, values are inclusive, zero-terminated list)\n 1318      // NB: Make sure that your string are UTF-8 and NOT in your local code page. See FAQ for details.\n 1319:     IMGUI_API const ImWchar*    GetGlyphRangesDefault();    // Basic Latin, Extended Latin\n 1320:     IMGUI_API const ImWchar*    GetGlyphRangesKorean();     // Default + Korean characters\n 1321:     IMGUI_API const ImWchar*    GetGlyphRangesJapanese();   // Default + Hiragana, Katakana, Half-Width, Selection of 1946 Ideographs\n 1322:     IMGUI_API const ImWchar*    GetGlyphRangesChinese();    // Japanese + full set of about 21000 CJK Unified Ideographs\n 1323:     IMGUI_API const ImWchar*    GetGlyphRangesCyrillic();   // Default + about 400 Cyrillic characters\n 1324:     IMGUI_API const ImWchar*    GetGlyphRangesThai();       // Default + Thai characters\n 1325  \n 1326      // Members\n ....\n 1333      int                         TexDesiredWidth;    // Texture width desired by user before Build(). Must be a power-of-two. If have many glyphs your graphics API have texture size restrictions you may want to increase texture width to decrease height.\n 1334      ImVec2                      TexUvWhitePixel;    // Texture coordinates to a white pixel\n 1335:     ImVector<ImFont*>           Fonts;              // Hold all the fonts returned by AddFont*. Fonts[0] is the default font upon calling ImGui::NewFrame(), use ImGui::PushFont()/PopFont() to change the current font.\n 1336  \n 1337      // Private\n 1338      ImVector<ImFontConfig>      ConfigData;         // Internal data\n 1339:     IMGUI_API bool              Build();            // Build pixels data. This is automatically for you by the GetTexData*** functions.\n 1340:     IMGUI_API void              RenderCustomTexData(int pass, void* rects);\n 1341  };\n 1342  \n ....\n 1372  \n 1373      // Methods\n 1374:     IMGUI_API ImFont();\n 1375:     IMGUI_API ~ImFont();\n 1376:     IMGUI_API void              Clear();\n 1377:     IMGUI_API void              BuildLookupTable();\n 1378:     IMGUI_API const Glyph*      FindGlyph(ImWchar c) const;\n 1379:     IMGUI_API void              SetFallbackChar(ImWchar c);\n 1380      float                       GetCharAdvance(ImWchar c) const     { return ((int)c < IndexXAdvance.Size) ? IndexXAdvance[(int)c] : FallbackXAdvance; }\n 1381      bool                        IsLoaded() const                    { return ContainerAtlas != NULL; }\n ....\n 1383      // 'max_width' stops rendering after a certain width (could be turned into a 2d size). FLT_MAX to disable.\n 1384      // 'wrap_width' enable automatic word-wrapping across multiple lines to fit into given width. 0.0f to disable.\n 1385:     IMGUI_API ImVec2            CalcTextSizeA(float size, float max_width, float wrap_width, const char* text_begin, const char* text_end = NULL, const char** remaining = NULL) const; // utf8\n 1386:     IMGUI_API const char*       CalcWordWrapPositionA(float scale, const char* text, const char* text_end, float wrap_width) const;\n 1387:     IMGUI_API void              RenderChar(ImDrawList* draw_list, float size, ImVec2 pos, ImU32 col, unsigned short c) const;\n 1388:     IMGUI_API void              RenderText(ImDrawList* draw_list, float size, ImVec2 pos, ImU32 col, const ImVec4& clip_rect, const char* text_begin, const char* text_end, float wrap_width = 0.0f, bool cpu_fine_clip = false) const;\n 1389  \n 1390      // Private\n 1391:     IMGUI_API void              GrowIndex(int new_size);\n 1392:     IMGUI_API void              AddRemapChar(ImWchar dst, ImWchar src, bool overwrite_dst = true); // Makes 'dst' character/glyph points to 'src' character/glyph. Currently needs to be called AFTER fonts have been built.\n 1393  };\n 1394  \n ....\n 1397  #endif\n 1398  \n 1399: // Include imgui_user.h at the end of imgui.h (convenient for user to only explicitly include vanilla imgui.h)\n 1400: #ifdef IMGUI_INCLUDE_IMGUI_USER_H\n 1401: #include \"imgui_user.h\"\n 1402  #endif\n 1403  \n\nC:\\Users\\doug\\Documents\\github\\fall\\imgui\\imgui_draw.cpp:\n    1: // dear imgui, v1.50 WIP\n    2  // (drawing and font code)\n    3  \n    .\n   13  #endif\n   14  \n   15: #include \"imgui.h\"\n   16: #define IMGUI_DEFINE_MATH_OPERATORS\n   17: #define IMGUI_DEFINE_PLACEMENT_NEW\n   18: #include \"imgui_internal.h\"\n   19  \n   20  #include <stdio.h>      // vsnprintf, sscanf, printf\n   ..\n   54  //-------------------------------------------------------------------------\n   55  \n   56: //#define IMGUI_STB_NAMESPACE     ImGuiStb\n   57: //#define IMGUI_DISABLE_STB_RECT_PACK_IMPLEMENTATION\n   58: //#define IMGUI_DISABLE_STB_TRUETYPE_IMPLEMENTATION\n   59  \n   60: #ifdef IMGUI_STB_NAMESPACE\n   61: namespace IMGUI_STB_NAMESPACE\n   62  {\n   63  #endif\n   ..\n   81  \n   82  #define STBRP_ASSERT(x)    IM_ASSERT(x)\n   83: #ifndef IMGUI_DISABLE_STB_RECT_PACK_IMPLEMENTATION\n   84  #define STBRP_STATIC\n   85  #define STB_RECT_PACK_IMPLEMENTATION\n   ..\n   87  #include \"stb_rect_pack.h\"\n   88  \n   89: #define STBTT_malloc(x,u)  ((void)(u), ImGui::MemAlloc(x))\n   90: #define STBTT_free(x,u)    ((void)(u), ImGui::MemFree(x))\n   91  #define STBTT_assert(x)    IM_ASSERT(x)\n   92: #ifndef IMGUI_DISABLE_STB_TRUETYPE_IMPLEMENTATION\n   93  #define STBTT_STATIC\n   94  #define STB_TRUETYPE_IMPLEMENTATION\n   ..\n  110  #endif\n  111  \n  112: #ifdef IMGUI_STB_NAMESPACE\n  113: } // namespace ImGuiStb\n  114: using namespace IMGUI_STB_NAMESPACE;\n  115  #endif\n  116  \n  ...\n  230  #undef GetCurrentTextureId\n  231  \n  232: // Render-level scissoring. This is passed down to your render function but not used for CPU-side coarse clipping. Prefer using higher-level ImGui::PushClipRect() to affect logic (hit-testing and widget culling)\n  233  void ImDrawList::PushClipRect(ImVec2 cr_min, ImVec2 cr_max, bool intersect_with_current_clip_rect)\n  234  {\n  ...\n  252  {\n  253      PushClipRect(ImVec2(GNullClipRect.x, GNullClipRect.y), ImVec2(GNullClipRect.z, GNullClipRect.w));\n  254:     //PushClipRect(GetVisibleRect());   // FIXME-OPT: This would be more correct but we're not supposed to access ImGuiContext from here?\n  255  }\n  256  \n  ...\n  372  void ImDrawList::PrimRect(const ImVec2& a, const ImVec2& c, ImU32 col)\n  373  {\n  374:     ImVec2 b(c.x, a.y), d(a.x, c.y), uv(GImGui->FontTexUvWhitePixel);\n  375      ImDrawIdx idx = (ImDrawIdx)_VtxCurrentIdx;\n  376      _IdxWritePtr[0] = idx; _IdxWritePtr[1] = (ImDrawIdx)(idx+1); _IdxWritePtr[2] = (ImDrawIdx)(idx+2);\n  ...\n  420          return;\n  421  \n  422:     const ImVec2 uv = GImGui->FontTexUvWhitePixel;\n  423:     anti_aliased &= GImGui->Style.AntiAliasedLines;\n  424:     //if (ImGui::GetIO().KeyCtrl) anti_aliased = false; // Debug\n  425  \n  426      int count = points_count;\n  ...\n  598  void ImDrawList::AddConvexPolyFilled(const ImVec2* points, const int points_count, ImU32 col, bool anti_aliased)\n  599  {\n  600:     const ImVec2 uv = GImGui->FontTexUvWhitePixel;\n  601:     anti_aliased &= GImGui->Style.AntiAliasedShapes;\n  602:     //if (ImGui::GetIO().KeyCtrl) anti_aliased = false; // Debug\n  603  \n  604      if (anti_aliased)\n  ...\n  755      {\n  756          // Auto-tessellated\n  757:         PathBezierToCasteljau(&_Path, p1.x, p1.y, p2.x, p2.y, p3.x, p3.y, p4.x, p4.y, GImGui->Style.CurveTessellationTol, 0);\n  758      }\n  759      else\n  ...\n  838          return;\n  839  \n  840:     const ImVec2 uv = GImGui->FontTexUvWhitePixel;\n  841      PrimReserve(6, 4);\n  842      PrimWriteIdx((ImDrawIdx)(_VtxCurrentIdx)); PrimWriteIdx((ImDrawIdx)(_VtxCurrentIdx+1)); PrimWriteIdx((ImDrawIdx)(_VtxCurrentIdx+2));\n  ...\n  934          return;\n  935  \n  936:     // Note: This is one of the few instance of breaking the encapsulation of ImDrawList, as we pull this from ImGui state, but it is just SO useful.\n  937      // Might just move Font/FontSize to ImDrawList?\n  938      if (font == NULL)\n  939:         font = GImGui->Font;\n  940      if (font_size == 0.0f)\n  941:         font_size = GImGui->FontSize;\n  942  \n  943:     IM_ASSERT(font->ContainerAtlas->TexID == _TextureIdStack.back());  // Use high-level ImGui::PushFont() or low-level ImDrawList::PushTextureId() to change font.\n  944  \n  945      ImVec4 clip_rect = _ClipRectStack.back();\n  ...\n  956  void ImDrawList::AddText(const ImVec2& pos, ImU32 col, const char* text_begin, const char* text_end)\n  957  {\n  958:     AddText(GImGui->Font, GImGui->FontSize, pos, col, text_begin, text_end);\n  959  }\n  960  \n  ...\n 1015  }\n 1016  \n 1017: // Helper to scale the ClipRect field of each ImDrawCmd. Use if your final output buffer is at a different scale than ImGui expects, or if there is a difference between your window resolution and framebuffer resolution.\n 1018  void ImDrawData::ScaleClipRects(const ImVec2& scale)\n 1019  {\n ....\n 1070          if (ConfigData[i].FontData && ConfigData[i].FontDataOwnedByAtlas)\n 1071          {\n 1072:             ImGui::MemFree(ConfigData[i].FontData);\n 1073              ConfigData[i].FontData = NULL;\n 1074          }\n ....\n 1087  {\n 1088      if (TexPixelsAlpha8)\n 1089:         ImGui::MemFree(TexPixelsAlpha8);\n 1090      if (TexPixelsRGBA32)\n 1091:         ImGui::MemFree(TexPixelsRGBA32);\n 1092      TexPixelsAlpha8 = NULL;\n 1093      TexPixelsRGBA32 = NULL;\n ....\n 1099      {\n 1100          Fonts[i]->~ImFont();\n 1101:         ImGui::MemFree(Fonts[i]);\n 1102      }\n 1103      Fonts.clear();\n ....\n 1135          unsigned char* pixels;\n 1136          GetTexDataAsAlpha8(&pixels, NULL, NULL);\n 1137:         TexPixelsRGBA32 = (unsigned int*)ImGui::MemAlloc((size_t)(TexWidth * TexHeight * 4));\n 1138          const unsigned char* src = pixels;\n 1139          unsigned int* dst = TexPixelsRGBA32;\n ....\n 1156      if (!font_cfg->MergeMode)\n 1157      {\n 1158:         ImFont* font = (ImFont*)ImGui::MemAlloc(sizeof(ImFont));\n 1159          IM_PLACEMENT_NEW(font) ImFont();\n 1160          Fonts.push_back(font);\n ....\n 1162      else\n 1163      {\n 1164:         IM_ASSERT(!Fonts.empty()); // When using MergeMode make sure that a font has already been added before. You can use ImGui::AddFontDefault() to add the default imgui font.\n 1165      }\n 1166  \n ....\n 1171      if (!new_font_cfg.FontDataOwnedByAtlas)\n 1172      {\n 1173:         new_font_cfg.FontData = ImGui::MemAlloc(new_font_cfg.FontDataSize);\n 1174          new_font_cfg.FontDataOwnedByAtlas = true;\n 1175          memcpy(new_font_cfg.FontData, font_cfg->FontData, (size_t)new_font_cfg.FontDataSize);\n ....\n 1249  {\n 1250      const unsigned int buf_decompressed_size = stb_decompress_length((unsigned char*)compressed_ttf_data);\n 1251:     unsigned char* buf_decompressed_data = (unsigned char *)ImGui::MemAlloc(buf_decompressed_size);\n 1252      stb_decompress(buf_decompressed_data, (unsigned char*)compressed_ttf_data, (unsigned int)compressed_ttf_size);\n 1253  \n ....\n 1261  {\n 1262      int compressed_ttf_size = (((int)strlen(compressed_ttf_data_base85) + 4) / 5) * 4;\n 1263:     void* compressed_ttf = ImGui::MemAlloc((size_t)compressed_ttf_size);\n 1264      Decode85((const unsigned char*)compressed_ttf_data_base85, (unsigned char*)compressed_ttf);\n 1265      ImFont* font = AddFontFromMemoryCompressedTTF(compressed_ttf, compressed_ttf_size, size_pixels, font_cfg, glyph_ranges);\n 1266:     ImGui::MemFree(compressed_ttf);\n 1267      return font;\n 1268  }\n ....\n 1284          int                 RangesCount;\n 1285      };\n 1286:     ImFontTempBuildData* tmp_array = (ImFontTempBuildData*)ImGui::MemAlloc((size_t)ConfigData.Size * sizeof(ImFontTempBuildData));\n 1287  \n 1288      // Initialize font information early (so we can error without any cleanup) + count glyphs\n ....\n 1329      // Allocate packing character data and flag packed characters buffer as non-packed (x0=y0=x1=y1=0)\n 1330      int buf_packedchars_n = 0, buf_rects_n = 0, buf_ranges_n = 0;\n 1331:     stbtt_packedchar* buf_packedchars = (stbtt_packedchar*)ImGui::MemAlloc(total_glyph_count * sizeof(stbtt_packedchar));\n 1332:     stbrp_rect* buf_rects = (stbrp_rect*)ImGui::MemAlloc(total_glyph_count * sizeof(stbrp_rect));\n 1333:     stbtt_pack_range* buf_ranges = (stbtt_pack_range*)ImGui::MemAlloc(total_glyph_range_count * sizeof(stbtt_pack_range));\n 1334      memset(buf_packedchars, 0, total_glyph_count * sizeof(stbtt_packedchar));\n 1335      memset(buf_rects, 0, total_glyph_count * sizeof(stbrp_rect));              // Unnecessary but let's clear this for the sake of sanity.\n ....\n 1382      // Create texture\n 1383      TexHeight = ImUpperPowerOfTwo(TexHeight);\n 1384:     TexPixelsAlpha8 = (unsigned char*)ImGui::MemAlloc(TexWidth * TexHeight);\n 1385      memset(TexPixelsAlpha8, 0, TexWidth * TexHeight);\n 1386      spc.pixels = TexPixelsAlpha8;\n ....\n 1399      // End packing\n 1400      stbtt_PackEnd(&spc);\n 1401:     ImGui::MemFree(buf_rects);\n 1402      buf_rects = NULL;\n 1403  \n ....\n 1464  \n 1465      // Cleanup temporaries\n 1466:     ImGui::MemFree(buf_packedchars);\n 1467:     ImGui::MemFree(buf_ranges);\n 1468:     ImGui::MemFree(tmp_array);\n 1469  \n 1470      // Render into our custom data block\n ....\n 1477  {\n 1478      // A work of art lies ahead! (. = white layer, X = black layer, others are blank)\n 1479:     // The white texels on the top left are the ones we'll use everywhere in ImGui to render filled shapes.\n 1480      const int TEX_DATA_W = 90;\n 1481      const int TEX_DATA_H = 27;\n ....\n 1537  \n 1538          // Setup mouse cursors\n 1539:         const ImVec2 cursor_datas[ImGuiMouseCursor_Count_][3] =\n 1540          {\n 1541              // Pos ........ Size ......... Offset ......\n 1542:             { ImVec2(0,3),  ImVec2(12,19), ImVec2( 0, 0) }, // ImGuiMouseCursor_Arrow\n 1543:             { ImVec2(13,0), ImVec2(7,16),  ImVec2( 4, 8) }, // ImGuiMouseCursor_TextInput\n 1544:             { ImVec2(31,0), ImVec2(23,23), ImVec2(11,11) }, // ImGuiMouseCursor_Move\n 1545:             { ImVec2(21,0), ImVec2( 9,23), ImVec2( 5,11) }, // ImGuiMouseCursor_ResizeNS\n 1546:             { ImVec2(55,18),ImVec2(23, 9), ImVec2(11, 5) }, // ImGuiMouseCursor_ResizeEW\n 1547:             { ImVec2(73,0), ImVec2(17,17), ImVec2( 9, 9) }, // ImGuiMouseCursor_ResizeNESW\n 1548:             { ImVec2(55,0), ImVec2(17,17), ImVec2( 9, 9) }, // ImGuiMouseCursor_ResizeNWSE\n 1549          };\n 1550  \n 1551:         for (int type = 0; type < ImGuiMouseCursor_Count_; type++)\n 1552          {\n 1553:             ImGuiMouseCursorData& cursor_data = GImGui->MouseCursorData[type];\n 1554              ImVec2 pos = cursor_datas[type][0] + ImVec2((float)r.x, (float)r.y);\n 1555              const ImVec2 size = cursor_datas[type][1];\n ....\n 1706      // FIXME-CLEANUP\n 1707      /*\n 1708:     ImGuiContext& g = *GImGui;\n 1709      if (g.Font == this)\n 1710          g.Font = NULL;\n ....\n 2026  {\n 2027      if (!text_end)\n 2028:         text_end = text_begin + strlen(text_begin); // ImGui functions generally already provides a valid text_end, so this is merely to handle direct calls.\n 2029  \n 2030      // Align to be pixel perfect\n\nC:\\Users\\doug\\Documents\\github\\fall\\imgui\\imgui_impl_sdl_gl3.cpp:\n    1: // ImGui SDL2 binding with OpenGL3\n    2: // In this binding, ImTextureID is used to store an OpenGL 'GLuint' texture identifier. Read the FAQ about ImTextureID in imgui.cpp.\n    3  \n    4: // You can copy and use unmodified imgui_impl_* files in your project. See main.cpp for an example of using this.\n    5: // If you use this binding you'll need to call 4 functions: ImGui_ImplXXXX_Init(), ImGui_ImplXXXX_NewFrame(), ImGui::Render() and ImGui_ImplXXXX_Shutdown().\n    6: // If you are new to ImGui, see examples/README.txt and documentation at the top of imgui.cpp.\n    7: // https://github.com/ocornut/imgui\n    8  \n    9: #include \"imgui.h\"\n   10: #include \"imgui_impl_sdl_gl3.h\"\n   11  \n   12  // SDL,GL3W\n   ..\n   25  static unsigned int g_VboHandle = 0, g_VaoHandle = 0, g_ElementsHandle = 0;\n   26  \n   27: // This is the main rendering function that you have to implement and provide to ImGui (via setting up 'RenderDrawListsFn' in the ImGuiIO structure)\n   28: // If text or lines are blurry when integrating ImGui in your engine:\n   29  // - in your Render function, try translating your projection matrix by (0.5f,0.5f) or (0.375f,0.375f)\n   30: void ImGui_ImplSdlGL3_RenderDrawLists(ImDrawData* draw_data)\n   31  {\n   32      // Avoid rendering when minimized, scale coordinates for retina displays (screen coordinates != framebuffer coordinates)\n   33:     ImGuiIO& io = ImGui::GetIO();\n   34      int fb_width = (int)(io.DisplaySize.x * io.DisplayFramebufferScale.x);\n   35      int fb_height = (int)(io.DisplaySize.y * io.DisplayFramebufferScale.y);\n   ..\n  126  }\n  127  \n  128: static const char* ImGui_ImplSdlGL3_GetClipboardText(void*)\n  129  {\n  130      return SDL_GetClipboardText();\n  131  }\n  132  \n  133: static void ImGui_ImplSdlGL3_SetClipboardText(void*, const char* text)\n  134  {\n  135      SDL_SetClipboardText(text);\n  136  }\n  137  \n  138: bool ImGui_ImplSdlGL3_ProcessEvent(SDL_Event* event)\n  139  {\n  140:     ImGuiIO& io = ImGui::GetIO();\n  141      switch (event->type)\n  142      {\n  ...\n  176  }\n  177  \n  178: void ImGui_ImplSdlGL3_CreateFontsTexture()\n  179  {\n  180      // Build texture atlas\n  181:     ImGuiIO& io = ImGui::GetIO();\n  182      unsigned char* pixels;\n  183      int width, height;\n  ...\n  201  }\n  202  \n  203: bool ImGui_ImplSdlGL3_CreateDeviceObjects()\n  204  {\n  205      // Backup GL state\n  ...\n  268  #undef OFFSETOF\n  269  \n  270:     ImGui_ImplSdlGL3_CreateFontsTexture();\n  271  \n  272      // Restore modified GL state\n  ...\n  278  }\n  279  \n  280: void    ImGui_ImplSdlGL3_InvalidateDeviceObjects()\n  281  {\n  282      if (g_VaoHandle) glDeleteVertexArrays(1, &g_VaoHandle);\n  ...\n  299      {\n  300          glDeleteTextures(1, &g_FontTexture);\n  301:         ImGui::GetIO().Fonts->TexID = 0;\n  302          g_FontTexture = 0;\n  303      }\n  304  }\n  305  \n  306: bool    ImGui_ImplSdlGL3_Init(SDL_Window* window)\n  307  {\n  308:     ImGuiIO& io = ImGui::GetIO();\n  309:     io.KeyMap[ImGuiKey_Tab] = SDLK_TAB;                     // Keyboard mapping. ImGui will use those indices to peek into the io.KeyDown[] array.\n  310:     io.KeyMap[ImGuiKey_LeftArrow] = SDL_SCANCODE_LEFT;\n  311:     io.KeyMap[ImGuiKey_RightArrow] = SDL_SCANCODE_RIGHT;\n  312:     io.KeyMap[ImGuiKey_UpArrow] = SDL_SCANCODE_UP;\n  313:     io.KeyMap[ImGuiKey_DownArrow] = SDL_SCANCODE_DOWN;\n  314:     io.KeyMap[ImGuiKey_PageUp] = SDL_SCANCODE_PAGEUP;\n  315:     io.KeyMap[ImGuiKey_PageDown] = SDL_SCANCODE_PAGEDOWN;\n  316:     io.KeyMap[ImGuiKey_Home] = SDL_SCANCODE_HOME;\n  317:     io.KeyMap[ImGuiKey_End] = SDL_SCANCODE_END;\n  318:     io.KeyMap[ImGuiKey_Delete] = SDLK_DELETE;\n  319:     io.KeyMap[ImGuiKey_Backspace] = SDLK_BACKSPACE;\n  320:     io.KeyMap[ImGuiKey_Enter] = SDLK_RETURN;\n  321:     io.KeyMap[ImGuiKey_Escape] = SDLK_ESCAPE;\n  322:     io.KeyMap[ImGuiKey_A] = SDLK_a;\n  323:     io.KeyMap[ImGuiKey_C] = SDLK_c;\n  324:     io.KeyMap[ImGuiKey_V] = SDLK_v;\n  325:     io.KeyMap[ImGuiKey_X] = SDLK_x;\n  326:     io.KeyMap[ImGuiKey_Y] = SDLK_y;\n  327:     io.KeyMap[ImGuiKey_Z] = SDLK_z;\n  328  \n  329:     io.RenderDrawListsFn = ImGui_ImplSdlGL3_RenderDrawLists;   // Alternatively you can set this to NULL and call ImGui::GetDrawData() after ImGui::Render() to get the same ImDrawData pointer.\n  330:     io.SetClipboardTextFn = ImGui_ImplSdlGL3_SetClipboardText;\n  331:     io.GetClipboardTextFn = ImGui_ImplSdlGL3_GetClipboardText;\n  332      io.ClipboardUserData = NULL;\n  333  \n  ...\n  344  }\n  345  \n  346: void ImGui_ImplSdlGL3_Shutdown()\n  347  {\n  348:     ImGui_ImplSdlGL3_InvalidateDeviceObjects();\n  349:     ImGui::Shutdown();\n  350  }\n  351  \n  352: void ImGui_ImplSdlGL3_NewFrame(SDL_Window* window)\n  353  {\n  354      if (!g_FontTexture)\n  355:         ImGui_ImplSdlGL3_CreateDeviceObjects();\n  356  \n  357:     ImGuiIO& io = ImGui::GetIO();\n  358  \n  359      // Setup display size (every frame to accommodate for window resizing)\n  ...\n  388      g_MouseWheel = 0.0f;\n  389  \n  390:     // Hide OS mouse cursor if ImGui is drawing it\n  391      SDL_ShowCursor(io.MouseDrawCursor ? 0 : 1);\n  392  \n  393      // Start the frame\n  394:     ImGui::NewFrame();\n  395  }\n  396  \n\nC:\\Users\\doug\\Documents\\github\\fall\\imgui\\imgui_impl_sdl_gl3.h:\n    1: // ImGui SDL2 binding with OpenGL3\n    2: // In this binding, ImTextureID is used to store an OpenGL 'GLuint' texture identifier. Read the FAQ about ImTextureID in imgui.cpp.\n    3  \n    4: // You can copy and use unmodified imgui_impl_* files in your project. See main.cpp for an example of using this.\n    5: // If you use this binding you'll need to call 4 functions: ImGui_ImplXXXX_Init(), ImGui_ImplXXXX_NewFrame(), ImGui::Render() and ImGui_ImplXXXX_Shutdown().\n    6: // If you are new to ImGui, see examples/README.txt and documentation at the top of imgui.cpp.\n    7: // https://github.com/ocornut/imgui\n    8  \n    9  struct SDL_Window;\n   10  typedef union SDL_Event SDL_Event;\n   11  \n   12: IMGUI_API bool        ImGui_ImplSdlGL3_Init(SDL_Window* window);\n   13: IMGUI_API void        ImGui_ImplSdlGL3_Shutdown();\n   14: IMGUI_API void        ImGui_ImplSdlGL3_NewFrame(SDL_Window* window);\n   15: IMGUI_API bool        ImGui_ImplSdlGL3_ProcessEvent(SDL_Event* event);\n   16  \n   17: // Use if you want to reset your rendering device without losing ImGui state.\n   18: IMGUI_API void        ImGui_ImplSdlGL3_InvalidateDeviceObjects();\n   19: IMGUI_API bool        ImGui_ImplSdlGL3_CreateDeviceObjects();\n   20  \n\nC:\\Users\\doug\\Documents\\github\\fall\\imgui\\imgui_internal.h:\n    1: // dear imgui, v1.50 WIP\n    2  // (internals)\n    3  \n    4: // You may use this file to debug, understand or extend ImGui features but we don't provide any guarantee of forward compatibility!\n    5  // Implement maths operators for ImVec2 (disabled by default to not collide with using IM_VEC2_CLASS_EXTRA along with your own math types+operators)\n    6: //   #define IMGUI_DEFINE_MATH_OPERATORS\n    7  \n    8  #pragma once\n    9  \n   10: #ifndef IMGUI_VERSION\n   11: #error Must include imgui.h before imgui_internal.h\n   12  #endif\n   13  \n   ..\n   17  #ifdef _MSC_VER\n   18  #pragma warning (push)\n   19: #pragma warning (disable: 4251) // class 'xxx' needs to have dll-interface to be used by clients of struct 'xxx' // when IMGUI_API is set to__declspec(dllexport)\n   20  #endif\n   21  \n   ..\n   32  \n   33  struct ImRect;\n   34: struct ImGuiColMod;\n   35: struct ImGuiStyleMod;\n   36: struct ImGuiGroupData;\n   37: struct ImGuiSimpleColumns;\n   38: struct ImGuiDrawContext;\n   39: struct ImGuiTextEditState;\n   40: struct ImGuiIniData;\n   41: struct ImGuiMouseCursorData;\n   42: struct ImGuiPopupRef;\n   43: struct ImGuiWindow;\n   44  \n   45: typedef int ImGuiLayoutType;      // enum ImGuiLayoutType_\n   46: typedef int ImGuiButtonFlags;     // enum ImGuiButtonFlags_\n   47: typedef int ImGuiTreeNodeFlags;   // enum ImGuiTreeNodeFlags_\n   48: typedef int ImGuiSliderFlags;     // enum ImGuiSliderFlags_\n   49  \n   50  //-------------------------------------------------------------------------\n   ..\n   52  //-------------------------------------------------------------------------\n   53  \n   54: namespace ImGuiStb\n   55  {\n   56  \n   57  #undef STB_TEXTEDIT_STRING\n   58  #undef STB_TEXTEDIT_CHARTYPE\n   59: #define STB_TEXTEDIT_STRING             ImGuiTextEditState\n   60  #define STB_TEXTEDIT_CHARTYPE           ImWchar\n   61  #define STB_TEXTEDIT_GETWIDTH_NEWLINE   -1.0f\n   62  #include \"stb_textedit.h\"\n   63  \n   64: } // namespace ImGuiStb\n   65  \n   66  //-----------------------------------------------------------------------------\n   ..\n   68  //-----------------------------------------------------------------------------\n   69  \n   70: #ifndef GImGui\n   71: extern IMGUI_API ImGuiContext* GImGui;  // Current implicit ImGui context pointer\n   72  #endif\n   73  \n   ..\n   81  \n   82  // Helpers: UTF-8 <> wchar\n   83: IMGUI_API int           ImTextStrToUtf8(char* buf, int buf_size, const ImWchar* in_text, const ImWchar* in_text_end);      // return output UTF-8 bytes count\n   84: IMGUI_API int           ImTextCharFromUtf8(unsigned int* out_char, const char* in_text, const char* in_text_end);          // return input UTF-8 bytes count\n   85: IMGUI_API int           ImTextStrFromUtf8(ImWchar* buf, int buf_size, const char* in_text, const char* in_text_end, const char** in_remaining = NULL);   // return input UTF-8 bytes count\n   86: IMGUI_API int           ImTextCountCharsFromUtf8(const char* in_text, const char* in_text_end);                            // return number of UTF-8 code-points (NOT bytes count)\n   87: IMGUI_API int           ImTextCountUtf8BytesFromStr(const ImWchar* in_text, const ImWchar* in_text_end);                   // return number of bytes to express string as UTF-8 code-points\n   88  \n   89  // Helpers: Misc\n   90: IMGUI_API ImU32         ImHash(const void* data, int data_size, ImU32 seed = 0);    // Pass data_size==0 for zero-terminated strings\n   91: IMGUI_API void*         ImFileLoadToMemory(const char* filename, const char* file_open_mode, int* out_file_size = NULL, int padding_bytes = 0);\n   92: IMGUI_API FILE*         ImFileOpen(const char* filename, const char* file_open_mode);         \n   93: IMGUI_API bool          ImIsPointInTriangle(const ImVec2& p, const ImVec2& a, const ImVec2& b, const ImVec2& c);\n   94  static inline bool      ImCharIsSpace(int c)            { return c == ' ' || c == '\\t' || c == 0x3000; }\n   95  static inline int       ImUpperPowerOfTwo(int v)        { v--; v |= v >> 1; v |= v >> 2; v |= v >> 4; v |= v >> 8; v |= v >> 16; v++; return v; }\n   96  \n   97  // Helpers: String\n   98: IMGUI_API int           ImStricmp(const char* str1, const char* str2);\n   99: IMGUI_API int           ImStrnicmp(const char* str1, const char* str2, int count);\n  100: IMGUI_API char*         ImStrdup(const char* str);\n  101: IMGUI_API int           ImStrlenW(const ImWchar* str);\n  102: IMGUI_API const ImWchar*ImStrbolW(const ImWchar* buf_mid_line, const ImWchar* buf_begin); // Find beginning-of-line\n  103: IMGUI_API const char*   ImStristr(const char* haystack, const char* haystack_end, const char* needle, const char* needle_end);\n  104: IMGUI_API int           ImFormatString(char* buf, int buf_size, const char* fmt, ...) IM_PRINTFARGS(3);\n  105: IMGUI_API int           ImFormatStringV(char* buf, int buf_size, const char* fmt, va_list args);\n  106  \n  107  // Helpers: Math\n  108  // We are keeping those not leaking to the user by default, in the case the user has implicit cast operators between ImVec2 and its own types (when IM_VEC2_CLASS_EXTRA is defined)\n  109: #ifdef IMGUI_DEFINE_MATH_OPERATORS\n  110  static inline ImVec2 operator*(const ImVec2& lhs, const float rhs)              { return ImVec2(lhs.x*rhs, lhs.y*rhs); }\n  111  static inline ImVec2 operator/(const ImVec2& lhs, const float rhs)              { return ImVec2(lhs.x/rhs, lhs.y/rhs); }\n  ...\n  141  // We call C++ constructor on own allocated memory via the placement \"new(ptr) Type()\" syntax.\n  142  // Defining a custom placement new() with a dummy parameter allows us to bypass including <new> which on some platforms complains when user has disabled exceptions.\n  143: #ifdef IMGUI_DEFINE_PLACEMENT_NEW\n  144  struct ImPlacementNewDummy {};\n  145  inline void* operator new(size_t, ImPlacementNewDummy, void* ptr) { return ptr; }\n  ...\n  152  //-----------------------------------------------------------------------------\n  153  \n  154: enum ImGuiButtonFlags_\n  155  {\n  156:     ImGuiButtonFlags_Repeat                 = 1 << 0,   // hold to repeat\n  157:     ImGuiButtonFlags_PressedOnClickRelease  = 1 << 1,   // (default) return pressed on click+release on same item (default if no PressedOn** flag is set)\n  158:     ImGuiButtonFlags_PressedOnClick         = 1 << 2,   // return pressed on click (default requires click+release)\n  159:     ImGuiButtonFlags_PressedOnRelease       = 1 << 3,   // return pressed on release (default requires click+release)\n  160:     ImGuiButtonFlags_PressedOnDoubleClick   = 1 << 4,   // return pressed on double-click (default requires click+release)\n  161:     ImGuiButtonFlags_FlattenChilds          = 1 << 5,   // allow interaction even if a child window is overlapping\n  162:     ImGuiButtonFlags_DontClosePopups        = 1 << 6,   // disable automatically closing parent popup on press\n  163:     ImGuiButtonFlags_Disabled               = 1 << 7,   // disable interaction\n  164:     ImGuiButtonFlags_AlignTextBaseLine      = 1 << 8,   // vertically align button to match text baseline - ButtonEx() only\n  165:     ImGuiButtonFlags_NoKeyModifiers         = 1 << 9,   // disable interaction if a key modifier is held\n  166:     ImGuiButtonFlags_AllowOverlapMode       = 1 << 10   // require previous frame HoveredId to either match id or be null before being usable\n  167  };\n  168  \n  169: enum ImGuiSliderFlags_\n  170  {\n  171:     ImGuiSliderFlags_Vertical               = 1 << 0\n  172  };\n  173  \n  174: enum ImGuiSelectableFlagsPrivate_\n  175  {\n  176:     // NB: need to be in sync with last value of ImGuiSelectableFlags_\n  177:     ImGuiSelectableFlags_Menu               = 1 << 3,\n  178:     ImGuiSelectableFlags_MenuItem           = 1 << 4,\n  179:     ImGuiSelectableFlags_Disabled           = 1 << 5,\n  180:     ImGuiSelectableFlags_DrawFillAvailWidth = 1 << 6\n  181  };\n  182  \n  183  // FIXME: this is in development, not exposed/functional as a generic feature yet.\n  184: enum ImGuiLayoutType_\n  185  {\n  186:     ImGuiLayoutType_Vertical,\n  187:     ImGuiLayoutType_Horizontal\n  188  };\n  189  \n  190: enum ImGuiPlotType\n  191  {\n  192:     ImGuiPlotType_Lines,\n  193:     ImGuiPlotType_Histogram\n  194  };\n  195  \n  196: enum ImGuiDataType\n  197  {\n  198:     ImGuiDataType_Int,\n  199:     ImGuiDataType_Float,\n  200:     ImGuiDataType_Float2,\n  201  };\n  202  \n  203: enum ImGuiCorner\n  204  {\n  205:     ImGuiCorner_TopLeft     = 1 << 0, // 1\n  206:     ImGuiCorner_TopRight    = 1 << 1, // 2\n  207:     ImGuiCorner_BottomRight = 1 << 2, // 4\n  208:     ImGuiCorner_BottomLeft  = 1 << 3, // 8\n  209:     ImGuiCorner_All         = 0x0F\n  210  };\n  211  \n  212  // 2D axis aligned bounding-box\n  213  // NB: we can't rely on ImVec2 math operators being available here\n  214: struct IMGUI_API ImRect\n  215  {\n  216      ImVec2      Min;    // Upper-left\n  ...\n  253  \n  254  // Stacked color modifier, backup of modified data so we can restore it\n  255: struct ImGuiColMod\n  256  {\n  257:     ImGuiCol    Col;\n  258      ImVec4      BackupValue;\n  259  };\n  260  \n  261  // Stacked style modifier, backup of modified data so we can restore it. Data type inferred from the variable.\n  262: struct ImGuiStyleMod\n  263  {\n  264:     ImGuiStyleVar   VarIdx;\n  265      union           { int BackupInt[2]; float BackupFloat[2]; };\n  266:     ImGuiStyleMod(ImGuiStyleVar idx, int v)     { VarIdx = idx; BackupInt[0] = v; }\n  267:     ImGuiStyleMod(ImGuiStyleVar idx, float v)   { VarIdx = idx; BackupFloat[0] = v; }\n  268:     ImGuiStyleMod(ImGuiStyleVar idx, ImVec2 v)  { VarIdx = idx; BackupFloat[0] = v.x; BackupFloat[1] = v.y; }\n  269  };\n  270  \n  271  // Stacked data for BeginGroup()/EndGroup()\n  272: struct ImGuiGroupData\n  273  {\n  274      ImVec2      BackupCursorPos;\n  ...\n  284  \n  285  // Per column data for Columns()\n  286: struct ImGuiColumnData\n  287  {\n  288      float       OffsetNorm;     // Column start offset, normalized 0.0 (far left) -> 1.0 (far right)\n  ...\n  291  \n  292  // Simple column measurement currently used for MenuItem() only. This is very short-sighted/throw-away code and NOT a generic helper.\n  293: struct IMGUI_API ImGuiSimpleColumns\n  294  {\n  295      int         Count;\n  ...\n  298      float       Pos[8], NextWidths[8];\n  299  \n  300:     ImGuiSimpleColumns();\n  301      void        Update(int count, float spacing, bool clear);\n  302      float       DeclColumns(float w0, float w1, float w2);\n  ...\n  305  \n  306  // Internal state of the currently focused/edited text input box\n  307: struct IMGUI_API ImGuiTextEditState\n  308  {\n  309:     ImGuiID             Id;                         // widget id owning the text state\n  310      ImVector<ImWchar>   Text;                       // edit buffer, we need to persist but can't guarantee the persistence of the user-provided buffer. so we copy into own buffer.\n  311      ImVector<char>      InitialText;                // backup of end-user buffer at the time of focus (in UTF-8, unaltered)\n  ...\n  314      int                 BufSizeA;                   // end-user buffer size\n  315      float               ScrollX;\n  316:     ImGuiStb::STB_TexteditState   StbState;\n  317      float               CursorAnim;\n  318      bool                CursorFollow;\n  319      bool                SelectedAllMouseLock;\n  320  \n  321:     ImGuiTextEditState()                            { memset(this, 0, sizeof(*this)); }\n  322      void                CursorAnimReset()           { CursorAnim = -0.30f; }                                   // After a user-input the cursor stays on for a while without blinking\n  323      void                CursorClamp()               { StbState.cursor = ImMin(StbState.cursor, CurLenW); StbState.select_start = ImMin(StbState.select_start, CurLenW); StbState.select_end = ImMin(StbState.select_end, CurLenW); }\n  ...\n  328  };\n  329  \n  330: // Data saved in imgui.ini file\n  331: struct ImGuiIniData\n  332  {\n  333      char*       Name;\n  334:     ImGuiID     Id;\n  335      ImVec2      Pos;\n  336      ImVec2      Size;\n  ...\n  339  \n  340  // Mouse cursor data (used when io.MouseDrawCursor is set)\n  341: struct ImGuiMouseCursorData\n  342  {\n  343:     ImGuiMouseCursor    Type;\n  344      ImVec2              HotOffset;\n  345      ImVec2              Size;\n  ...\n  349  \n  350  // Storage for current popup stack\n  351: struct ImGuiPopupRef\n  352  {\n  353:     ImGuiID         PopupId;        // Set on OpenPopup()\n  354:     ImGuiWindow*    Window;         // Resolved on BeginPopup() - may stay unresolved if user never calls OpenPopup()\n  355:     ImGuiWindow*    ParentWindow;   // Set on OpenPopup()\n  356:     ImGuiID         ParentMenuSet;  // Set on OpenPopup()\n  357      ImVec2          MousePosOnOpen; // Copy of mouse position at the time of opening popup\n  358  \n  359:     ImGuiPopupRef(ImGuiID id, ImGuiWindow* parent_window, ImGuiID parent_menu_set, const ImVec2& mouse_pos) { PopupId = id; Window = NULL; ParentWindow = parent_window; ParentMenuSet = parent_menu_set; MousePosOnOpen = mouse_pos; }\n  360  };\n  361  \n  362: // Main state for ImGui\n  363: struct ImGuiContext\n  364  {\n  365      bool                    Initialized;\n  366:     ImGuiIO                 IO;\n  367:     ImGuiStyle              Style;\n  368      ImFont*                 Font;                               // (Shortcut) == FontStack.empty() ? IO.Font : FontStack.back()\n  369      float                   FontSize;                           // (Shortcut) == FontBaseSize * g.CurrentWindow->FontWindowScale == window->FontSize()\n  ...\n  375      int                     FrameCountEnded;\n  376      int                     FrameCountRendered;\n  377:     ImVector<ImGuiWindow*>  Windows;\n  378:     ImVector<ImGuiWindow*>  WindowsSortBuffer;\n  379:     ImGuiWindow*            CurrentWindow;                      // Being drawn into\n  380:     ImVector<ImGuiWindow*>  CurrentWindowStack;\n  381:     ImGuiWindow*            FocusedWindow;                      // Will catch keyboard inputs\n  382:     ImGuiWindow*            HoveredWindow;                      // Will catch mouse inputs\n  383:     ImGuiWindow*            HoveredRootWindow;                  // Will catch mouse inputs (for focus/move only)\n  384:     ImGuiID                 HoveredId;                          // Hovered widget\n  385      bool                    HoveredIdAllowOverlap;\n  386:     ImGuiID                 HoveredIdPreviousFrame;\n  387:     ImGuiID                 ActiveId;                           // Active widget\n  388:     ImGuiID                 ActiveIdPreviousFrame;\n  389      bool                    ActiveIdIsAlive;\n  390      bool                    ActiveIdIsJustActivated;            // Set at the time of activation for one frame\n  391      bool                    ActiveIdAllowOverlap;               // Set only by active widget\n  392      ImVec2                  ActiveIdClickOffset;                // Clicked offset from upper-left corner, if applicable (currently only set by ButtonBehavior)\n  393:     ImGuiWindow*            ActiveIdWindow;\n  394:     ImGuiWindow*            MovedWindow;                        // Track the child window we clicked on to move a window.\n  395:     ImGuiID                 MovedWindowMoveId;                  // == MovedWindow->RootWindow->MoveId\n  396:     ImVector<ImGuiIniData>  Settings;                           // .ini Settings\n  397      float                   SettingsDirtyTimer;                 // Save .ini Settings on disk when time reaches zero\n  398:     ImVector<ImGuiColMod>   ColorModifiers;                     // Stack for PushStyleColor()/PopStyleColor()\n  399:     ImVector<ImGuiStyleMod> StyleModifiers;                     // Stack for PushStyleVar()/PopStyleVar()\n  400      ImVector<ImFont*>       FontStack;                          // Stack for PushFont()/PopFont()\n  401:     ImVector<ImGuiPopupRef> OpenPopupStack;                     // Which popups are open (persistent)\n  402:     ImVector<ImGuiPopupRef> CurrentPopupStack;                  // Which level of BeginPopup() we are in (reset every frame)\n  403  \n  404      // Storage for SetNexWindow** and SetNextTreeNode*** functions\n  ...\n  407      ImVec2                  SetNextWindowContentSizeVal;\n  408      bool                    SetNextWindowCollapsedVal;\n  409:     ImGuiSetCond            SetNextWindowPosCond;\n  410:     ImGuiSetCond            SetNextWindowSizeCond;\n  411:     ImGuiSetCond            SetNextWindowContentSizeCond;\n  412:     ImGuiSetCond            SetNextWindowCollapsedCond;\n  413      ImRect                  SetNextWindowSizeConstraintRect;           // Valid if 'SetNextWindowSizeConstraint' is true\n  414:     ImGuiSizeConstraintCallback SetNextWindowSizeConstraintCallback;\n  415      void*                       SetNextWindowSizeConstraintCallbackUserData;\n  416      bool                    SetNextWindowSizeConstraint;\n  417      bool                    SetNextWindowFocus;\n  418      bool                    SetNextTreeNodeOpenVal;\n  419:     ImGuiSetCond            SetNextTreeNodeOpenCond;\n  420  \n  421      // Render\n  ...\n  424      float                   ModalWindowDarkeningRatio;\n  425      ImDrawList              OverlayDrawList;                    // Optional software render of mouse cursors, if io.MouseDrawCursor is set + a few debug overlays\n  426:     ImGuiMouseCursor        MouseCursor;\n  427:     ImGuiMouseCursorData    MouseCursorData[ImGuiMouseCursor_Count_];\n  428  \n  429      // Widget state\n  430:     ImGuiTextEditState      InputTextState;\n  431      ImFont                  InputTextPasswordFont;\n  432:     ImGuiID                 ScalarAsInputTextId;                // Temporary text input when CTRL+clicking on a slider, etc.\n  433:     ImGuiStorage            ColorEditModeStorage;               // Store user selection of color edit mode\n  434      float                   DragCurrentValue;                   // Currently dragged value, always float, not rounded by end-user precision settings\n  435      ImVec2                  DragLastMouseDelta;\n  ...\n  445      bool                    LogEnabled;\n  446      FILE*                   LogFile;                            // If != NULL log to stdout/ file\n  447:     ImGuiTextBuffer*        LogClipboard;                       // Else log to clipboard. This is pointer so our GImGui static constructor doesn't call heap allocators.\n  448      int                     LogStartDepth;\n  449      int                     LogAutoExpandMaxDepth;\n  ...\n  457      char                    TempBuffer[1024*3+1];               // temporary text buffer\n  458  \n  459:     ImGuiContext()\n  460      {\n  461          Initialized = false;\n  ...\n  513          ModalWindowDarkeningRatio = 0.0f;\n  514          OverlayDrawList._OwnerName = \"##Overlay\"; // Give it a name for debugging\n  515:         MouseCursor = ImGuiMouseCursor_Arrow;\n  516          memset(MouseCursorData, 0, sizeof(MouseCursorData));\n  517  \n  ...\n  531  \n  532  // Transient per-window data, reset at the beginning of the frame\n  533: // FIXME: That's theory, in practice the delimitation between ImGuiWindow and ImGuiDrawContext is quite tenuous and could be reconsidered.\n  534: struct IMGUI_API ImGuiDrawContext\n  535  {\n  536      ImVec2                  CursorPos;\n  ...\n  544      float                   LogLinePosY;\n  545      int                     TreeDepth;\n  546:     ImGuiID                 LastItemId;\n  547      ImRect                  LastItemRect;\n  548      bool                    LastItemHoveredAndUsable;  // Item rectangle is hovered, and its window is currently interactable with (not blocked by a popup preventing access to the window)\n  ...\n  550      bool                    MenuBarAppending;\n  551      float                   MenuBarOffsetX;\n  552:     ImVector<ImGuiWindow*>  ChildWindows;\n  553:     ImGuiStorage*           StateStorage;\n  554:     ImGuiLayoutType         LayoutType;\n  555  \n  556      // We store the current settings outside of the vectors to increase memory locality (reduce cache misses). The vectors are rarely modified. Also it allows us to not heap allocate for short-lived windows which are not using those settings.\n  ...\n  563      ImVector<bool>          AllowKeyboardFocusStack;\n  564      ImVector<bool>          ButtonRepeatStack;\n  565:     ImVector<ImGuiGroupData>GroupStack;\n  566:     ImGuiColorEditMode      ColorEditMode;\n  567      int                     StackSizesBackup[6];    // Store size of various stacks for asserting\n  568  \n  ...\n  578      float                   ColumnsCellMaxY;\n  579      bool                    ColumnsShowBorders;\n  580:     ImGuiID                 ColumnsSetId;\n  581:     ImVector<ImGuiColumnData> ColumnsData;\n  582  \n  583:     ImGuiDrawContext()\n  584      {\n  585          CursorPos = CursorPosPrevLine = CursorStartPos = CursorMaxPos = ImVec2(0.0f, 0.0f);\n  ...\n  594          MenuBarOffsetX = 0.0f;\n  595          StateStorage = NULL;\n  596:         LayoutType = ImGuiLayoutType_Vertical;\n  597          ItemWidth = 0.0f;\n  598          ButtonRepeat = false;\n  599          AllowKeyboardFocus = true;\n  600          TextWrapPos = -1.0f;\n  601:         ColorEditMode = ImGuiColorEditMode_RGB;\n  602          memset(StackSizesBackup, 0, sizeof(StackSizesBackup));\n  603  \n  ...\n  616  \n  617  // Windows data\n  618: struct IMGUI_API ImGuiWindow\n  619  {\n  620      char*                   Name;\n  621:     ImGuiID                 ID;                                 // == ImHash(Name)\n  622:     ImGuiWindowFlags        Flags;                              // See enum ImGuiWindowFlags_\n  623      int                     IndexWithinParent;                  // Order within immediate parent window, if we are a child window. Otherwise 0.\n  624      ImVec2                  PosFloat;\n  ...\n  630      ImRect                  ContentsRegionRect;                 // Maximum visible content position in window coordinates. ~~ (SizeContentsExplicit ? SizeContentsExplicit : Size - ScrollbarSizes) - CursorStartPos, per axis\n  631      ImVec2                  WindowPadding;                      // Window padding at the time of begin. We need to lock it, in particular manipulation of the ShowBorder would have an effect\n  632:     ImGuiID                 MoveId;                             // == window->GetID(\"#MOVE\")\n  633      ImVec2                  Scroll;\n  634      ImVec2                  ScrollTarget;                       // target scroll position. stored as cursor position with scrolling canceled out, so the highest point is always 0.0f. (FLT_MAX for no change)\n  ...\n  643      bool                    SkipItems;                          // == Visible && !Collapsed\n  644      int                     BeginCount;                         // Number of Begin() during the current frame (generally 0 or 1, 1+ if appending via multiple Begin/End pairs)\n  645:     ImGuiID                 PopupId;                            // ID in the popup stack when this window is used as a popup/menu (because we use generic Name/ID for recycling)\n  646      int                     AutoFitFramesX, AutoFitFramesY;\n  647      bool                    AutoFitOnlyGrows;\n  648      int                     AutoPosLastDirection;\n  649      int                     HiddenFrames;\n  650:     int                     SetWindowPosAllowFlags;             // bit ImGuiSetCond_*** specify if SetWindowPos() call will succeed with this particular flag.\n  651:     int                     SetWindowSizeAllowFlags;            // bit ImGuiSetCond_*** specify if SetWindowSize() call will succeed with this particular flag.\n  652:     int                     SetWindowCollapsedAllowFlags;       // bit ImGuiSetCond_*** specify if SetWindowCollapsed() call will succeed with this particular flag.\n  653      bool                    SetWindowPosCenterWanted;\n  654  \n  655:     ImGuiDrawContext        DC;                                 // Temporary per-window data, reset at the beginning of the frame\n  656:     ImVector<ImGuiID>       IDStack;                            // ID stack. ID are hashes seeded with the value at the top of the stack\n  657      ImRect                  ClipRect;                           // = DrawList->clip_rect_stack.back(). Scissoring / clipping rectangle. x1, y1, x2, y2.\n  658      ImRect                  WindowRectClipped;                  // = WindowRect just after setup in Begin(). == window->Rect() for root window.\n  659      int                     LastFrameActive;\n  660      float                   ItemWidthDefault;\n  661:     ImGuiSimpleColumns      MenuColumns;                        // Simplified columns storage for menu items\n  662:     ImGuiStorage            StateStorage;\n  663      float                   FontWindowScale;                    // Scale multiplier per-window\n  664      ImDrawList*             DrawList;\n  665:     ImGuiWindow*            RootWindow;                         // If we are a child window, this is pointing to the first non-child parent window. Else point to ourself.\n  666:     ImGuiWindow*            RootNonPopupWindow;                 // If we are a child window, this is pointing to the first non-child non-popup parent window. Else point to ourself.\n  667:     ImGuiWindow*            ParentWindow;                       // If we are a child window, this is pointing to our parent window. Else point to NULL.\n  668  \n  669      // Navigation / Focus\n  ...\n  676  \n  677  public:\n  678:     ImGuiWindow(const char* name);\n  679:     ~ImGuiWindow();\n  680  \n  681:     ImGuiID     GetID(const char* str, const char* str_end = NULL);\n  682:     ImGuiID     GetID(const void* ptr);\n  683:     ImGuiID     GetIDNoKeepAlive(const char* str, const char* str_end = NULL);\n  684  \n  685      ImRect      Rect() const                            { return ImRect(Pos.x, Pos.y, Pos.x+Size.x, Pos.y+Size.y); }\n  686:     float       CalcFontSize() const                    { return GImGui->FontBaseSize * FontWindowScale; }\n  687:     float       TitleBarHeight() const                  { return (Flags & ImGuiWindowFlags_NoTitleBar) ? 0.0f : CalcFontSize() + GImGui->Style.FramePadding.y * 2.0f; }\n  688      ImRect      TitleBarRect() const                    { return ImRect(Pos, ImVec2(Pos.x + SizeFull.x, Pos.y + TitleBarHeight())); }\n  689:     float       MenuBarHeight() const                   { return (Flags & ImGuiWindowFlags_MenuBar) ? CalcFontSize() + GImGui->Style.FramePadding.y * 2.0f : 0.0f; }\n  690      ImRect      MenuBarRect() const                     { float y1 = Pos.y + TitleBarHeight(); return ImRect(Pos.x, y1, Pos.x + SizeFull.x, y1 + MenuBarHeight()); }\n  691  };\n  ...\n  696  //-----------------------------------------------------------------------------\n  697  \n  698: namespace ImGui\n  699  {\n  700      // We should always have a CurrentWindow in the stack (there is an implicit \"Debug\" window)\n  701      // If this ever crash because g.CurrentWindow is NULL it means that either\n  702:     // - ImGui::NewFrame() has never been called, which is illegal.\n  703:     // - You are calling ImGui functions after ImGui::Render() and before the next ImGui::NewFrame(), which is also illegal.\n  704:     inline    ImGuiWindow*  GetCurrentWindowRead()      { ImGuiContext& g = *GImGui; return g.CurrentWindow; }\n  705:     inline    ImGuiWindow*  GetCurrentWindow()          { ImGuiContext& g = *GImGui; g.CurrentWindow->Accessed = true; return g.CurrentWindow; }\n  706:     IMGUI_API ImGuiWindow*  GetParentWindow();\n  707:     IMGUI_API ImGuiWindow*  FindWindowByName(const char* name);\n  708:     IMGUI_API void          FocusWindow(ImGuiWindow* window);\n  709  \n  710:     IMGUI_API void          EndFrame();                 // Ends the ImGui frame. Automatically called by Render()! you most likely don't need to ever call that yourself directly. If you don't need to render you can call EndFrame() but you'll have wasted CPU already. If you don't need to render, don't create any windows instead!\n  711  \n  712:     IMGUI_API void          SetActiveID(ImGuiID id, ImGuiWindow* window);\n  713:   IMGUI_API void          ClearActiveID();\n  714:     IMGUI_API void          SetHoveredID(ImGuiID id);\n  715:     IMGUI_API void          KeepAliveID(ImGuiID id);\n  716  \n  717:     IMGUI_API void          ItemSize(const ImVec2& size, float text_offset_y = 0.0f);\n  718:     IMGUI_API void          ItemSize(const ImRect& bb, float text_offset_y = 0.0f);\n  719:     IMGUI_API bool          ItemAdd(const ImRect& bb, const ImGuiID* id);\n  720:     IMGUI_API bool          IsClippedEx(const ImRect& bb, const ImGuiID* id, bool clip_even_when_logged);\n  721:     IMGUI_API bool          IsHovered(const ImRect& bb, ImGuiID id, bool flatten_childs = false);\n  722:     IMGUI_API bool          FocusableItemRegister(ImGuiWindow* window, bool is_active, bool tab_stop = true);      // Return true if focus is requested\n  723:     IMGUI_API void          FocusableItemUnregister(ImGuiWindow* window);\n  724:     IMGUI_API ImVec2        CalcItemSize(ImVec2 size, float default_x, float default_y);\n  725:     IMGUI_API float         CalcWrapWidthForPos(const ImVec2& pos, float wrap_pos_x);\n  726  \n  727:     IMGUI_API void          OpenPopupEx(const char* str_id, bool reopen_existing);\n  728  \n  729      // NB: All position are in absolute pixels coordinates (not window coordinates)\n  730:     // FIXME: All those functions are a mess and needs to be refactored into something decent. AVOID USING OUTSIDE OF IMGUI.CPP! NOT FOR PUBLIC CONSUMPTION.\n  731      // We need: a sort of symbol library, preferably baked into font atlas when possible + decent text rendering helpers.\n  732:     IMGUI_API void          RenderText(ImVec2 pos, const char* text, const char* text_end = NULL, bool hide_text_after_hash = true);\n  733:     IMGUI_API void          RenderTextWrapped(ImVec2 pos, const char* text, const char* text_end, float wrap_width);\n  734:     IMGUI_API void          RenderTextClipped(const ImVec2& pos_min, const ImVec2& pos_max, const char* text, const char* text_end, const ImVec2* text_size_if_known, const ImVec2& align = ImVec2(0,0), const ImRect* clip_rect = NULL);\n  735:     IMGUI_API void          RenderFrame(ImVec2 p_min, ImVec2 p_max, ImU32 fill_col, bool border = true, float rounding = 0.0f);\n  736:     IMGUI_API void          RenderCollapseTriangle(ImVec2 pos, bool is_open, float scale = 1.0f);\n  737:     IMGUI_API void          RenderBullet(ImVec2 pos);\n  738:     IMGUI_API void          RenderCheckMark(ImVec2 pos, ImU32 col);\n  739:     IMGUI_API const char*   FindRenderedTextEnd(const char* text, const char* text_end = NULL); // Find the optional ## from which we stop displaying text.\n  740  \n  741:     IMGUI_API bool          ButtonBehavior(const ImRect& bb, ImGuiID id, bool* out_hovered, bool* out_held, ImGuiButtonFlags flags = 0);\n  742:     IMGUI_API bool          ButtonEx(const char* label, const ImVec2& size_arg = ImVec2(0,0), ImGuiButtonFlags flags = 0);\n  743:     IMGUI_API bool          CloseButton(ImGuiID id, const ImVec2& pos, float radius);\n  744  \n  745:     IMGUI_API bool          SliderBehavior(const ImRect& frame_bb, ImGuiID id, float* v, float v_min, float v_max, float power, int decimal_precision, ImGuiSliderFlags flags = 0);\n  746:     IMGUI_API bool          SliderFloatN(const char* label, float* v, int components, float v_min, float v_max, const char* display_format, float power);\n  747:     IMGUI_API bool          SliderIntN(const char* label, int* v, int components, int v_min, int v_max, const char* display_format);\n  748  \n  749:     IMGUI_API bool          DragBehavior(const ImRect& frame_bb, ImGuiID id, float* v, float v_speed, float v_min, float v_max, int decimal_precision, float power);\n  750:     IMGUI_API bool          DragFloatN(const char* label, float* v, int components, float v_speed, float v_min, float v_max, const char* display_format, float power);\n  751:     IMGUI_API bool          DragIntN(const char* label, int* v, int components, float v_speed, int v_min, int v_max, const char* display_format);\n  752  \n  753:     IMGUI_API bool          InputTextEx(const char* label, char* buf, int buf_size, const ImVec2& size_arg, ImGuiInputTextFlags flags, ImGuiTextEditCallback callback = NULL, void* user_data = NULL);\n  754:     IMGUI_API bool          InputFloatN(const char* label, float* v, int components, int decimal_precision, ImGuiInputTextFlags extra_flags);\n  755:     IMGUI_API bool          InputIntN(const char* label, int* v, int components, ImGuiInputTextFlags extra_flags);\n  756:     IMGUI_API bool          InputScalarEx(const char* label, ImGuiDataType data_type, void* data_ptr, void* step_ptr, void* step_fast_ptr, const char* scalar_format, ImGuiInputTextFlags extra_flags);\n  757:     IMGUI_API bool          InputScalarAsWidgetReplacement(const ImRect& aabb, const char* label, ImGuiDataType data_type, void* data_ptr, ImGuiID id, int decimal_precision);\n  758  \n  759:     IMGUI_API bool          TreeNodeBehavior(ImGuiID id, ImGuiTreeNodeFlags flags, const char* label, const char* label_end = NULL);\n  760:     IMGUI_API bool          TreeNodeBehaviorIsOpen(ImGuiID id, ImGuiTreeNodeFlags flags = 0);                     // Consume previous SetNextTreeNodeOpened() data, if any. May return true when logging\n  761:     IMGUI_API void          TreePushRawID(ImGuiID id);\n  762  \n  763:     IMGUI_API void          PlotEx(ImGuiPlotType plot_type, const char* label, float (*values_getter)(void* data, int idx), void* data, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size);\n  764  \n  765:     IMGUI_API int           ParseFormatPrecision(const char* fmt, int default_value);\n  766:     IMGUI_API float         RoundScalar(float value, int decimal_precision);\n  767  \n  768: } // namespace ImGui\n  769  \n  770  #ifdef __clang__\n\nC:\\Users\\doug\\Documents\\github\\fall\\imgui\\stb_textedit.h:\n    1: // [ImGui] this is a slightly modified version of stb_truetype.h 1.9. Those changes would need to be pushed into nothings/sb\n    2: // [ImGui] - fixed linestart handler when over last character of multi-line buffer + simplified existing code (#588, #815)\n    3: // [ImGui] - fixed a state corruption/crash bug in stb_text_redo and stb_textedit_discard_redo (#715)\n    4: // [ImGui] - fixed a crash bug in stb_textedit_discard_redo (#681)\n    5: // [ImGui] - fixed some minor warnings\n    6  \n    7  // stb_textedit.h - v1.9  - public domain - Sean Barrett\n    .\n  246  // Notes:\n  247  //\n  248: // This is designed to be usable in IMGUI, so it allows for the possibility of\n  249: // running in an IMGUI that has NOT cached the multi-line layout. For this\n  250  // reason, it provides an interface that is compatible with computing the\n  251  // layout incrementally--we try to make sure we make as few passes through\n\n11143 matches across 21 files\n",
			"settings":
			{
				"buffer_size": 673536,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "imgui/imgui_impl_sdl_gl3.cpp",
			"settings":
			{
				"buffer_size": 16921,
				"line_ending": "Unix"
			}
		},
		{
			"file": "geometry.h",
			"settings":
			{
				"buffer_size": 152,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "game.h",
			"settings":
			{
				"buffer_size": 361,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "imgui/imgui.cpp",
			"settings":
			{
				"buffer_size": 435673,
				"line_ending": "Unix"
			}
		},
		{
			"file": "imgui/imgui.h",
			"settings":
			{
				"buffer_size": 124576,
				"line_ending": "Unix"
			}
		},
		{
			"file": "fall.cpp",
			"settings":
			{
				"buffer_size": 437,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "build.bat",
			"settings":
			{
				"buffer_size": 822,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "imgui_extensions.h",
			"settings":
			{
				"buffer_size": 118,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "imgui_extensions.cpp",
			"settings":
			{
				"buffer_size": 181,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "platform.h",
			"settings":
			{
				"buffer_size": 7175,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/User/ff-build-faster.sublime-build",
					""
				],
				[
					"Packages/User/ff-build.sublime-build",
					""
				],
				[
					"Packages/User/ff-run.sublime-build",
					""
				],
				[
					"Packages/User/ff-test-last.sublime-build",
					""
				],
				[
					"Packages/User/ff-test.sublime-build",
					""
				],
				[
					"Packages/User/gecko-profiler.sublime-build",
					""
				],
				[
					"Packages/User/lenzhound-run.sublime-build",
					""
				],
				[
					"Packages/User/physica-run.sublime-build",
					""
				],
				[
					"Packages/User/physica.sublime-build",
					""
				],
				[
					"Packages/User/webext.sublime-build",
					""
				]
			],
			[
				"Packages/User/ff-test.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/User/ff-build-faster.sublime-build",
					""
				],
				[
					"Packages/User/ff-build.sublime-build",
					""
				],
				[
					"Packages/User/ff-run.sublime-build",
					""
				],
				[
					"Packages/User/ff-test-last.sublime-build",
					""
				],
				[
					"Packages/User/ff-test.sublime-build",
					""
				],
				[
					"Packages/User/physica-run.sublime-build",
					""
				],
				[
					"Packages/User/physica.sublime-build",
					""
				]
			],
			[
				"Packages/User/ff-test-last.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 354.0,
		"last_filter": "ins",
		"selected_items":
		[
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"settings",
				"Preferences: Settings"
			],
			[
				"eas",
				"EasyClangComplete: Settings"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"wrap",
				"Wrap Plus: Wrap Lines"
			],
			[
				"json",
				"JSON Reindent: reindent file or selection"
			],
			[
				"diff",
				"Diffy Compare"
			],
			[
				"rem",
				"Package Control: Remove Package"
			],
			[
				"build",
				"Build With: physica-run"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"gitgu",
				"GitGutter: Show Diff Popup"
			],
			[
				"git",
				"Git: Toggle Annotations"
			],
			[
				"commi",
				"Git: Commit"
			],
			[
				"add",
				"Git: Add..."
			],
			[
				"commit",
				"Git: Commit"
			],
			[
				"glue",
				"Glue - Launch"
			]
		],
		"width": 406.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/doug/Documents/github/fall",
		"/C/Users/doug/Documents/github/fall/assets"
	],
	"file_history":
	[
		"/C/Users/doug/Documents/github/fall/asset_packager.h",
		"/C/Users/doug/Documents/github/fall/stb/stb_rect_pack.h",
		"/C/Users/doug/Documents/github/fall/packager/stb_image_write.h",
		"/C/Users/doug/Documents/github/fall/packager/stb_image.h",
		"/C/Users/doug/Documents/github/fall/packager/asset_packager.h",
		"/C/Users/doug/Documents/github/fall/packager/stb_rect_pack.h",
		"/C/Users/doug/Documents/github/fall/packager/build.bat",
		"/C/Users/doug/Documents/github/fall/packager/asset_packager.cpp",
		"/C/Users/doug/Documents/github/fall/shaders/common.vs.glsl",
		"/C/Users/doug/Documents/github/fall/shaders/common.fs.glsl",
		"/C/Users/doug/Documents/github/fall/shader_common.fs.glsl",
		"/C/Users/doug/Documents/github/fall/render_group.cpp",
		"/C/Users/doug/Documents/github/fall/render_group.h",
		"/C/Users/doug/mercurial/firefox/browser/base/content/test/appUpdate/head.js",
		"/C/Users/doug/mercurial/firefox/browser/base/content/test/appUpdate/browser.ini",
		"/C/Users/doug/mercurial/firefox/toolkit/mozapps/update/tests/chrome/test_0172_notify_noPerms_manual.xul",
		"/C/Users/doug/mercurial/firefox/toolkit/mozapps/update/tests/chrome/test_0171_check_noPerms_manual.xul",
		"/C/Users/doug/mercurial/firefox/toolkit/mozapps/update/nsIUpdateService.idl",
		"/C/Users/doug/mercurial/firefox/browser/components/extensions/schemas/commands.json",
		"/C/Users/doug/mercurial/firefox/toolkit/modules/PopupNotifications.jsm",
		"/C/Users/doug/mercurial/firefox/toolkit/mozapps/update/nsUpdateService.js",
		"/C/Users/doug/mercurial/firefox/toolkit/mozapps/update/UpdateTelemetry.jsm",
		"/C/Users/doug/mercurial/firefox/browser/base/content/browser.js",
		"/C/Users/doug/mercurial/firefox/browser/locales/en-US/chrome/browser/browser.dtd",
		"/C/Users/doug/mercurial/firefox/browser/base/content/test/appUpdate/browser_updatesBackgroundWindow.js",
		"/C/Users/doug/mercurial/firefox/browser/base/content/test/appUpdate/browser_updatesBackgroundWindowFailures.js",
		"/C/Users/doug/mercurial/firefox/browser/base/content/test/appUpdate/browser_updatesCantApply.js",
		"/C/Users/doug/mercurial/firefox/browser/base/content/test/appUpdate/browser_updatesCompleteAndPartialPatchesWithBadCompleteSize.js",
		"/C/Users/doug/mercurial/firefox/browser/base/content/test/appUpdate/browser_updatesCompleteAndPartialPatchesWithBadPartialSize.js",
		"/C/Users/doug/mercurial/firefox/browser/base/content/test/appUpdate/browser_updatesDownloadFailures.js",
		"/C/Users/doug/mercurial/firefox/browser/base/content/test/appUpdate/browser_updatesPartialPatchApplyFailureWithCompleteAvailable.js",
		"/C/Users/doug/mercurial/firefox/browser/components/customizableui/content/panelUI.css",
		"/C/Users/doug/mercurial/firefox/browser/themes/shared/customizableui/panelUI.inc.css",
		"/C/Users/doug/mercurial/firefox/browser/app/profile/firefox.js",
		"/C/Users/doug/mercurial/firefox/browser/components/extensions/ext-commands.js",
		"/C/Users/doug/mercurial/firefox/browser/components/extensions/test/browser/browser_ext_commands_onCommand.js",
		"/C/Users/doug/mercurial/firefox/browser/base/content/test/popupNotifications/browser_popupNotification_5.js",
		"/C/Users/doug/mercurial/firefox/browser/components/appUpdate/test/head.js",
		"/C/Users/doug/mercurial/firefox/browser/components/customizableui/AppMenuNotifications.jsm",
		"/C/Users/doug/mercurial/firefox/browser/base/content/test/appUpdate/browser_updatesMalformedXml.js",
		"/C/Users/doug/mercurial/firefox/browser/base/content/test/appUpdate/browser_updatesBasicPrompt.js",
		"/C/Users/doug/mercurial/firefox/browser/base/content/moz.build",
		"/C/Users/doug/mercurial/firefox/addon-sdk/test/head.js",
		"/C/Users/doug/mercurial/firefox/browser/base/content/test/appUpdate/browser_updatesNewWindow.js",
		"/C/Users/doug/mercurial/firefox/browser/components/customizableui/test/head.js",
		"/C/Users/doug/mercurial/firefox/browser/components/customizableui/content/panelUI.js",
		"/C/Users/doug/mercurial/firefox/tools/profiler/gecko/nsProfiler.cpp",
		"/C/Users/doug/mercurial/firefox/browser/extensions/screenshots/webextension/manifest.json",
		"/C/Users/doug/mercurial/firefox/toolkit/mozapps/update/tests/data/shared.js",
		"/C/Users/doug/mercurial/firefox/browser/components/customizableui/test/browser_panelUINotifications.js",
		"/C/Users/doug/mercurial/firefox/browser/base/content/test/appUpdate/browser_updatesBasicPromptNoStaging.js",
		"/C/Users/doug/mercurial/firefox/browser/base/content/test/popupNotifications/browser_popupNotification.js",
		"/C/Users/doug/mercurial/firefox/browser/base/content/browser.xul",
		"/C/Users/doug/mercurial/firefox/browser/components/extensions/ParseSymbols.jsm",
		"/C/Users/doug/mercurial/firefox/browser/components/extensions/ParseSymbols-worker.js",
		"/C/Users/doug/mercurial/firefox/browser/components/extensions/schemas/geckoProfiler.json",
		"/C/Users/doug/mercurial/firefox/browser/components/extensions/test/xpcshell/test_ext_geckoProfiler_control.js",
		"/C/Users/doug/mercurial/firefox/toolkit/components/extensions/Extension.jsm",
		"/C/Users/doug/mercurial/firefox/toolkit/components/extensions/ExtensionPermissions.jsm",
		"/C/Users/doug/mercurial/firefox/browser/components/extensions/test/browser/browser_ext_geckoProfiler_symbolicate.js",
		"/C/Users/doug/mercurial/firefox/browser/components/extensions/ext-browser.js",
		"/C/Users/doug/mercurial/firefox/browser/components/extensions/ext-geckoProfiler.js",
		"/C/Users/doug/mercurial/firefox/browser/components/extensions/ext-devtools.js",
		"/C/Users/doug/mercurial/firefox/browser/components/extensions/moz.build",
		"/C/Users/doug/mercurial/firefox/browser/components/extensions/jar.mn",
		"/C/Users/doug/mercurial/firefox/browser/components/extensions/ExtensionPopups.jsm",
		"/C/Users/doug/mercurial/firefox/toolkit/modules/Timer.jsm",
		"/C/Users/doug/mercurial/firefox/toolkit/modules/moz.build",
		"/C/Users/doug/mercurial/firefox/browser/components/moz.build",
		"/C/Users/doug/mercurial/firefox/toolkit/mozapps/update/tests/chrome/test_0161_check_unsupported.xul",
		"/C/Users/doug/mercurial/firefox/toolkit/components/extensions/Schemas.jsm",
		"/C/Users/doug/mercurial/firefox/browser/components/extensions/ext-tabs.js",
		"/C/Users/doug/mercurial/firefox/toolkit/components/extensions/ExtensionParent.jsm",
		"/C/Users/doug/mercurial/firefox/toolkit/crashreporter/google-breakpad/src/common/mac/dump_syms.cc",
		"/C/Users/doug/mercurial/firefox/browser/components/extensions/schemas/tabs.json",
		"/C/Users/doug/mercurial/firefox/browser/components/extensions/schemas/jar.mn",
		"/C/Users/doug/mercurial/firefox/browser/components/extensions/test/browser/profilerSymbols.sjs",
		"/C/Users/doug/mercurial/firefox/browser/components/extensions/test/browser/browser-common.ini",
		"/C/Users/doug/mercurial/firefox/browser/components/extensions/test/xpcshell/xpcshell.ini",
		"/C/Users/doug/mercurial/firefox/browser/components/extensions/test/browser/file_inspectedwindow_reload_target.sjs",
		"/C/Users/doug/mercurial/firefox/toolkit/components/osfile/osfile.jsm",
		"/C/Users/doug/mercurial/firefox/js/xpconnect/src/Sandbox.cpp",
		"/C/Users/doug/mercurial/firefox/browser/components/customizableui/CustomizableUI.jsm",
		"/C/Users/doug/mercurial/firefox/toolkit/components/extensions/ExtensionCommon.jsm",
		"/C/Users/doug/mercurial/firefox/tmplog.txt",
		"/C/Users/doug/mercurial/firefox/tools/profiler/gecko/nsIProfiler.idl",
		"/C/Users/doug/mercurial/firefox/tools/profiler/public/GeckoProfiler.h",
		"/C/Users/doug/mercurial/firefox/toolkit/crashreporter/google-breakpad/src/common/linux/dump_symbols.h",
		"/C/Users/doug/mercurial/firefox/tools/profiler/gecko/ProfileGatherer.cpp",
		"/C/Users/doug/mercurial/firefox/toolkit/crashreporter/google-breakpad/src/common/mac/dump_syms.h",
		"/C/Users/doug/mercurial/firefox/toolkit/crashreporter/google-breakpad/src/common/module.h",
		"/C/Users/doug/mercurial/firefox/toolkit/crashreporter/google-breakpad/src/common/mac/moz.build",
		"/C/Users/doug/mercurial/firefox/tools/profiler/gecko/nsProfiler.h",
		"/C/Users/doug/mercurial/firefox/browser/components/extensions/ext-devtools-panels.js",
		"/C/Users/doug/mercurial/firefox/devtools/client/framework/target.js",
		"/C/Users/doug/mercurial/firefox/devtools/client/webide/modules/app-manager.js",
		"/C/Users/doug/mercurial/firefox/devtools/client/debugger/new/debugger.js",
		"/C/Users/doug/mercurial/firefox/browser/base/content/test/appUpdate/browser_updatesPartialPatchApplyFailureWithCompleteValidationFailure.js",
		"/C/Users/doug/mercurial/firefox/browser/components/extensions/test/browser/browser_ext_profiler_symbolicate.js",
		"/C/Users/doug/mercurial/firefox/browser/components/extensions/test/browser/browser_ext_profiler_control.js",
		"/C/Program Files (x86)/Nightly/distribution/distribution.ini",
		"/C/Users/doug/mercurial/firefox/browser/components/extensions/test/xpcshell/test_ext_profiler_symbolicate.js",
		"/C/Users/doug/mercurial/firefox/toolkit/modules/ParseSymbols-worker.js",
		"/C/Users/doug/mercurial/firefox/browser/components/extensions/ParseSymbols_worker.js",
		"/C/Users/doug/mercurial/firefox/browser/components/extensions/ext-profiler.js",
		"/C/Users/doug/mercurial/firefox/browser/components/extensions/schemas/profiler.json",
		"/C/Users/doug/mercurial/firefox/tools/profiler/gecko/Profiler.jsm",
		"/C/Users/doug/mercurial/firefox/browser/base/content/browser-fullScreenAndPointerLock.js",
		"/C/Users/doug/mercurial/firefox/browser/base/moz.build",
		"/C/Users/doug/mercurial/firefox/tools/lint/eslint.lint",
		"/C/Users/doug/mercurial/firefox/browser/base/content/test/appUpdate/.eslintrc.js",
		"/C/Users/doug/mercurial/firefox/testing/mochitest/browser-test.js",
		"/C/Users/doug/mercurial/firefox/node_modules/eslint-plugin-mozilla/lib/configs/browser-test.js",
		"/C/Users/doug/mercurial/firefox/toolkit/mozapps/update/tests/data/sharedUpdateXML.js",
		"/C/Users/doug/mercurial/firefox/browser/base/.eslintrc.js",
		"/C/Users/doug/mercurial/firefox/mozconfig",
		"/C/Users/doug/mercurial/firefox/tools/lint/eslint/eslint-plugin-mozilla/lib/configs/browser-test.js",
		"/C/Users/doug/mercurial/firefox/browser/base/content/test/appUpdate/sharedUpdateXML.js",
		"/C/Users/doug/mercurial/firefox/browser/components/customizableui/content/panelUI.inc.xul",
		"/C/Users/doug/mercurial/firefox/gfx/layers/d3d11/CompositorD3D11.cpp",
		"/C/Users/doug/mercurial/firefox/browser/base/content/browser.css",
		"/C/webpagetest/wptdriver.ini",
		"/C/Users/doug/mercurial/firefox/moz.build",
		"/C/Users/doug/mercurial/firefox/browser/base/content/test/appUpdate/downloadPage.html",
		"/C/Users/doug/c_tools/test.c",
		"/C/Users/doug/mercurial/firefox/layout/reftests/box-shadow/boxshadow-inset-large-offset-ref.html",
		"/C/Users/doug/mercurial/firefox/toolkit/mozapps/update/tests/chrome/update.sjs",
		"/C/Users/doug/mercurial/firefox/browser/base/content/test/webrtc/browser_devices_get_user_media.js"
	],
	"find":
	{
		"height": 70.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
			"",
			"*.h",
			"",
			"*.cpp,*.hpp,*.h,*.c,*.js,*.xul,*.xhtml",
			"*.cpp,*.hpp,*.h,*.c.*.js,*.xul,*.xhtml",
			"*.cpp,*.hpp,*.h,*.c.*.js",
			"*.cpp,*.hpp,*.h,*.c",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"texture",
			"2000.0f",
			"20.0f",
			"20",
			"10.0f",
			"-50",
			"0.0f",
			"1000.0f",
			"stbi_write_png_to_func",
			"stride_bytes",
			"stbi_write_png",
			"stride_in_bytes",
			"x",
			"working_memory",
			"was_packed",
			"stbrp_allow_out_of_mem",
			"stbrp_node",
			"j",
			"image",
			"IMAGE",
			"l",
			"working_memory",
			"data",
			"PackedImage",
			"image_pack",
			"pack",
			"file_count",
			"files",
			"i32",
			"LOG",
			"read_entire",
			"2",
			" + 5.0f",
			"20.0f",
			"10.0f",
			"ffffffff",
			"0x000000ff",
			"0xffffffff",
			"[0]",
			"0",
			"[3",
			"[2",
			"[1",
			"[0",
			"0",
			"DummyVertexArray",
			"glBindVertexArray",
			"vertex_buffer",
			"use_program_Beg",
			"imgui",
			"ImGui",
			"clear",
			"quad_textures",
			"// size",
			"use_program_begin",
			"assets",
			"3.30",
			"noperspective ",
			"shader validation",
			"check_program_status",
			"check_shader_status",
			"i32",
			"result",
			"init",
			"g_render_commands",
			"ARRAY_SIZE",
			"uv_coords",
			"PArray",
			"Member",
			"Linked",
			"ABC",
			"color",
			"world_coords",
			"color",
			"Ignored",
			"ProgramErrors",
			"FragmentErrors",
			"VertexErrors",
			"vertex_sources",
			"FragmentShaderID",
			"VertexShaderID",
			"ProgramID",
			"glCompileProgram",
			"vertex",
			"VERTEX",
			"vertex",
			"fragment",
			"char",
			"vertex",
			"state, ",
			"state->",
			"state, ",
			"ZBias",
			"InVertex",
			"FragColor",
			"smooth",
			"FragUV",
			"smooth",
			"colors",
			"VertColor",
			"VertUV",
			"VertP",
			"vec4",
			"Vec4",
			"VertP",
			"Transform",
			"v2",
			"v4",
			"V4",
			"v4",
			"TexSample",
			"FragColor",
			"FragUV",
			"ResultColor",
			"AlphaThreshold",
			"TextureSampler",
			"push_program",
			"width",
			"x",
			"0",
			"c",
			"u",
			"f32 r",
			"0",
			"camera",
			"0",
			"RenderGroup",
			"quad_textures"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"size_t",
			"$1_",
			"42424242",
			"$1size_t$2",
			"$1",
			""
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 9,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "debug.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1089,
						"regions":
						{
						},
						"selection":
						[
							[
								601,
								601
							]
						],
						"settings":
						{
							"glslvalidator_configured": true,
							"glslvalidator_enabled": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 24,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "sdl_platform.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12771,
						"regions":
						{
						},
						"selection":
						[
							[
								1146,
								1146
							]
						],
						"settings":
						{
							"glslvalidator_configured": true,
							"glslvalidator_enabled": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 776.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "sdl_platform.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 619,
						"regions":
						{
						},
						"selection":
						[
							[
								428,
								428
							]
						],
						"settings":
						{
							"glslvalidator_configured": true,
							"glslvalidator_enabled": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "fall.sublime-project",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 97,
						"regions":
						{
						},
						"selection":
						[
							[
								70,
								70
							]
						],
						"settings":
						{
							"glslvalidator_configured": true,
							"glslvalidator_enabled": 1,
							"syntax": "Packages/zzz A File Icon zzz/aliases/JSON (Sublime).sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 28,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": ".clang_complete",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 52,
						"regions":
						{
						},
						"selection":
						[
							[
								52,
								52
							]
						],
						"settings":
						{
							"glslvalidator_configured": true,
							"glslvalidator_enabled": 1,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "game.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3606,
						"regions":
						{
						},
						"selection":
						[
							[
								531,
								531
							]
						],
						"settings":
						{
							"glslvalidator_configured": true,
							"glslvalidator_enabled": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 162.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "asset_manager.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 386,
						"regions":
						{
						},
						"selection":
						[
							[
								197,
								197
							]
						],
						"settings":
						{
							"glslvalidator_configured": true,
							"glslvalidator_enabled": 1,
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "libs/include/Judy.h",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 28031,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"glslvalidator_configured": true,
							"glslvalidator_enabled": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 8,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"default_dir": "C:\\Users\\doug\\Documents\\github\\fall",
							"glslvalidator_configured": true,
							"glslvalidator_enabled": 1,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "asset_manager.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1041,
						"regions":
						{
						},
						"selection":
						[
							[
								1041,
								1041
							]
						],
						"settings":
						{
							"glslvalidator_configured": true,
							"glslvalidator_enabled": 1,
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "build_packager.bat",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 555,
						"regions":
						{
						},
						"selection":
						[
							[
								488,
								488
							]
						],
						"settings":
						{
							"glslvalidator_configured": true,
							"glslvalidator_enabled": 1,
							"syntax": "Packages/Batch File/Batch File.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "asset_packager.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6587,
						"regions":
						{
						},
						"selection":
						[
							[
								4954,
								4954
							]
						],
						"settings":
						{
							"glslvalidator_configured": true,
							"glslvalidator_enabled": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2819.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "assets.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1439,
						"regions":
						{
						},
						"selection":
						[
							[
								1360,
								1379
							]
						],
						"settings":
						{
							"glslvalidator_configured": true,
							"glslvalidator_enabled": 1,
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 378.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "imgui.ini",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 140,
						"regions":
						{
						},
						"selection":
						[
							[
								140,
								140
							]
						],
						"settings":
						{
							"glslvalidator_configured": true,
							"glslvalidator_enabled": 1,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "imgui_memory_editor.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10265,
						"regions":
						{
						},
						"selection":
						[
							[
								6562,
								6562
							]
						],
						"settings":
						{
							"glslvalidator_configured": true,
							"glslvalidator_enabled": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1683.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "render_commands.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1297,
						"regions":
						{
						},
						"selection":
						[
							[
								1062,
								1062
							]
						],
						"settings":
						{
							"glslvalidator_configured": true,
							"glslvalidator_enabled": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "renderer_opengl.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 840,
						"regions":
						{
						},
						"selection":
						[
							[
								602,
								602
							]
						],
						"settings":
						{
							"glslvalidator_configured": true,
							"glslvalidator_enabled": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 56.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "renderer_opengl.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6933,
						"regions":
						{
						},
						"selection":
						[
							[
								6250,
								6250
							]
						],
						"settings":
						{
							"glslvalidator_configured": true,
							"glslvalidator_enabled": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2275.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "shaders/common.glsl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 235,
						"regions":
						{
						},
						"selection":
						[
							[
								235,
								235
							]
						],
						"settings":
						{
							"glslvalidator_configured": true,
							"glslvalidator_enabled": 1,
							"syntax": "Packages/OpenGL Shading Language (GLSL)/GLSL.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "shaders/textured_quads.glsl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 471,
						"regions":
						{
						},
						"selection":
						[
							[
								167,
								167
							]
						],
						"settings":
						{
							"glslvalidator_configured": true,
							"glslvalidator_enabled": 1,
							"syntax": "Packages/OpenGL Shading Language (GLSL)/GLSL.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "render_commands.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2174,
						"regions":
						{
						},
						"selection":
						[
							[
								1014,
								1014
							]
						],
						"settings":
						{
							"glslvalidator_configured": true,
							"glslvalidator_enabled": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 21,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 673536,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										212,
										229
									],
									[
										522,
										539
									],
									[
										914,
										919
									],
									[
										1032,
										1037
									],
									[
										1038,
										1043
									],
									[
										1180,
										1185
									],
									[
										1222,
										1227
									],
									[
										1263,
										1268
									],
									[
										1394,
										1399
									],
									[
										1723,
										1728
									],
									[
										1819,
										1824
									],
									[
										1924,
										1929
									],
									[
										2054,
										2059
									],
									[
										2139,
										2144
									],
									[
										2145,
										2150
									],
									[
										2173,
										2178
									],
									[
										2179,
										2184
									],
									[
										2212,
										2217
									],
									[
										2218,
										2223
									],
									[
										2393,
										2398
									],
									[
										2399,
										2404
									],
									[
										2506,
										2511
									],
									[
										2512,
										2517
									],
									[
										2606,
										2611
									],
									[
										2612,
										2617
									],
									[
										2704,
										2709
									],
									[
										2807,
										2812
									],
									[
										2930,
										2935
									],
									[
										2936,
										2941
									],
									[
										3088,
										3093
									],
									[
										3094,
										3099
									],
									[
										3233,
										3238
									],
									[
										3239,
										3244
									],
									[
										3376,
										3381
									],
									[
										3524,
										3529
									],
									[
										3651,
										3656
									],
									[
										3673,
										3678
									],
									[
										3680,
										3685
									],
									[
										3772,
										3777
									],
									[
										3794,
										3799
									],
									[
										3903,
										3908
									],
									[
										3909,
										3914
									],
									[
										4031,
										4036
									],
									[
										4136,
										4141
									],
									[
										4209,
										4214
									],
									[
										4338,
										4343
									],
									[
										4585,
										4590
									],
									[
										4688,
										4693
									],
									[
										4758,
										4763
									],
									[
										4784,
										4789
									],
									[
										4933,
										4938
									],
									[
										4968,
										4973
									],
									[
										4983,
										4988
									],
									[
										5032,
										5037
									],
									[
										5192,
										5197
									],
									[
										5198,
										5203
									],
									[
										5269,
										5274
									],
									[
										5286,
										5291
									],
									[
										5459,
										5464
									],
									[
										5465,
										5470
									],
									[
										5491,
										5496
									],
									[
										5497,
										5502
									],
									[
										5630,
										5635
									],
									[
										5738,
										5743
									],
									[
										5938,
										5943
									],
									[
										6148,
										6153
									],
									[
										6355,
										6360
									],
									[
										6972,
										6977
									],
									[
										6985,
										6990
									],
									[
										7065,
										7070
									],
									[
										7078,
										7083
									],
									[
										7164,
										7169
									],
									[
										7260,
										7265
									],
									[
										7343,
										7348
									],
									[
										7430,
										7435
									],
									[
										7524,
										7529
									],
									[
										7607,
										7612
									],
									[
										7696,
										7701
									],
									[
										7796,
										7801
									],
									[
										7888,
										7893
									],
									[
										7991,
										7996
									],
									[
										8089,
										8094
									],
									[
										8185,
										8190
									],
									[
										8289,
										8294
									],
									[
										8398,
										8403
									],
									[
										8496,
										8501
									],
									[
										8604,
										8609
									],
									[
										8714,
										8719
									],
									[
										8804,
										8809
									],
									[
										8904,
										8909
									],
									[
										9000,
										9005
									],
									[
										9097,
										9102
									],
									[
										9185,
										9190
									],
									[
										9275,
										9280
									],
									[
										9367,
										9372
									],
									[
										9457,
										9462
									],
									[
										9565,
										9570
									],
									[
										9656,
										9661
									],
									[
										9770,
										9775
									],
									[
										9801,
										9806
									],
									[
										9927,
										9932
									],
									[
										10037,
										10042
									],
									[
										10133,
										10138
									],
									[
										10227,
										10232
									],
									[
										10312,
										10317
									],
									[
										10411,
										10416
									],
									[
										10515,
										10520
									],
									[
										10605,
										10610
									],
									[
										10690,
										10695
									],
									[
										10793,
										10798
									],
									[
										10901,
										10906
									],
									[
										10995,
										11000
									],
									[
										11082,
										11087
									],
									[
										11167,
										11172
									],
									[
										11255,
										11260
									],
									[
										11341,
										11346
									],
									[
										11424,
										11429
									],
									[
										11509,
										11514
									],
									[
										11597,
										11602
									],
									[
										11688,
										11693
									],
									[
										11783,
										11788
									],
									[
										11872,
										11877
									],
									[
										11886,
										11891
									],
									[
										11978,
										11983
									],
									[
										11991,
										11996
									],
									[
										12076,
										12081
									],
									[
										12168,
										12173
									],
									[
										12260,
										12265
									],
									[
										12359,
										12364
									],
									[
										12445,
										12450
									],
									[
										12532,
										12537
									],
									[
										12629,
										12634
									],
									[
										12710,
										12715
									],
									[
										12805,
										12810
									],
									[
										12901,
										12906
									],
									[
										12995,
										13000
									],
									[
										13081,
										13086
									],
									[
										13179,
										13184
									],
									[
										13265,
										13270
									],
									[
										13351,
										13356
									],
									[
										13439,
										13444
									],
									[
										13527,
										13532
									],
									[
										13622,
										13627
									],
									[
										13718,
										13723
									],
									[
										13807,
										13812
									],
									[
										13897,
										13902
									],
									[
										13979,
										13984
									],
									[
										14063,
										14068
									],
									[
										14147,
										14152
									],
									[
										14232,
										14237
									],
									[
										14315,
										14320
									],
									[
										14406,
										14411
									],
									[
										14493,
										14498
									],
									[
										14580,
										14585
									],
									[
										14663,
										14668
									],
									[
										14752,
										14757
									],
									[
										14848,
										14853
									],
									[
										14934,
										14939
									],
									[
										15019,
										15024
									],
									[
										15117,
										15122
									],
									[
										15204,
										15209
									],
									[
										15295,
										15300
									],
									[
										15396,
										15401
									],
									[
										15497,
										15502
									],
									[
										15611,
										15616
									],
									[
										15701,
										15706
									],
									[
										15802,
										15807
									],
									[
										15904,
										15909
									],
									[
										15984,
										15989
									],
									[
										16074,
										16079
									],
									[
										16163,
										16168
									],
									[
										16251,
										16256
									],
									[
										16340,
										16345
									],
									[
										16429,
										16434
									],
									[
										16518,
										16523
									],
									[
										16597,
										16602
									],
									[
										16682,
										16687
									],
									[
										16767,
										16772
									],
									[
										16852,
										16857
									],
									[
										16936,
										16941
									],
									[
										17021,
										17026
									],
									[
										17106,
										17111
									],
									[
										17191,
										17196
									],
									[
										17275,
										17280
									],
									[
										17361,
										17366
									],
									[
										17453,
										17458
									],
									[
										17554,
										17559
									],
									[
										17659,
										17664
									],
									[
										17749,
										17754
									],
									[
										17841,
										17846
									],
									[
										17930,
										17935
									],
									[
										18026,
										18031
									],
									[
										18113,
										18118
									],
									[
										18201,
										18206
									],
									[
										18289,
										18294
									],
									[
										18378,
										18383
									],
									[
										18466,
										18471
									],
									[
										18553,
										18558
									],
									[
										18654,
										18659
									],
									[
										18747,
										18752
									],
									[
										18842,
										18847
									],
									[
										18957,
										18962
									],
									[
										19071,
										19076
									],
									[
										19167,
										19172
									],
									[
										19261,
										19266
									],
									[
										19352,
										19357
									],
									[
										19440,
										19445
									],
									[
										19536,
										19541
									],
									[
										19625,
										19630
									],
									[
										19740,
										19745
									],
									[
										19839,
										19844
									],
									[
										19931,
										19936
									],
									[
										20028,
										20033
									],
									[
										20111,
										20116
									],
									[
										20216,
										20221
									],
									[
										20332,
										20337
									],
									[
										20441,
										20446
									],
									[
										20555,
										20560
									],
									[
										20654,
										20659
									],
									[
										20751,
										20756
									],
									[
										20848,
										20853
									],
									[
										20945,
										20950
									],
									[
										21047,
										21052
									],
									[
										21143,
										21148
									],
									[
										21237,
										21242
									],
									[
										21331,
										21336
									],
									[
										21425,
										21430
									],
									[
										21524,
										21529
									],
									[
										21621,
										21626
									],
									[
										21651,
										21656
									],
									[
										21765,
										21770
									],
									[
										21807,
										21812
									],
									[
										21913,
										21918
									],
									[
										22010,
										22015
									],
									[
										22105,
										22110
									],
									[
										22200,
										22205
									],
									[
										22292,
										22297
									],
									[
										22386,
										22391
									],
									[
										22478,
										22483
									],
									[
										22570,
										22575
									],
									[
										22664,
										22669
									],
									[
										22762,
										22767
									],
									[
										22860,
										22865
									],
									[
										22958,
										22963
									],
									[
										23055,
										23060
									],
									[
										23148,
										23153
									],
									[
										23243,
										23248
									],
									[
										23338,
										23343
									],
									[
										23433,
										23438
									],
									[
										23530,
										23535
									],
									[
										23638,
										23643
									],
									[
										23743,
										23748
									],
									[
										23829,
										23834
									],
									[
										23916,
										23921
									],
									[
										24007,
										24012
									],
									[
										24099,
										24104
									],
									[
										24195,
										24200
									],
									[
										24284,
										24289
									],
									[
										24374,
										24379
									],
									[
										24468,
										24473
									],
									[
										24563,
										24568
									],
									[
										24658,
										24663
									],
									[
										24743,
										24748
									],
									[
										24827,
										24832
									],
									[
										24926,
										24931
									],
									[
										25024,
										25029
									],
									[
										25116,
										25121
									],
									[
										25208,
										25213
									],
									[
										25303,
										25308
									],
									[
										25397,
										25402
									],
									[
										25500,
										25505
									],
									[
										25603,
										25608
									],
									[
										25701,
										25706
									],
									[
										25818,
										25823
									],
									[
										25921,
										25926
									],
									[
										26014,
										26019
									],
									[
										26092,
										26097
									],
									[
										26177,
										26182
									],
									[
										26262,
										26267
									],
									[
										26347,
										26352
									],
									[
										26437,
										26442
									],
									[
										26536,
										26541
									],
									[
										26624,
										26629
									],
									[
										26712,
										26717
									],
									[
										26805,
										26810
									],
									[
										26888,
										26893
									],
									[
										26979,
										26984
									],
									[
										27067,
										27072
									],
									[
										27152,
										27157
									],
									[
										27236,
										27241
									],
									[
										27320,
										27325
									],
									[
										27407,
										27412
									],
									[
										27493,
										27498
									],
									[
										27583,
										27588
									],
									[
										27678,
										27683
									],
									[
										27765,
										27770
									],
									[
										27858,
										27863
									],
									[
										27963,
										27968
									],
									[
										28065,
										28070
									],
									[
										28167,
										28172
									],
									[
										28254,
										28259
									],
									[
										28348,
										28353
									],
									[
										28429,
										28434
									],
									[
										28515,
										28520
									],
									[
										28607,
										28612
									],
									[
										28690,
										28695
									],
									[
										28776,
										28781
									],
									[
										28858,
										28863
									],
									[
										28948,
										28953
									],
									[
										29047,
										29052
									],
									[
										29134,
										29139
									],
									[
										29225,
										29230
									],
									[
										29311,
										29316
									],
									[
										29398,
										29403
									],
									[
										29486,
										29491
									],
									[
										29576,
										29581
									],
									[
										29665,
										29670
									],
									[
										29753,
										29758
									],
									[
										29850,
										29855
									],
									[
										29948,
										29953
									],
									[
										30050,
										30055
									],
									[
										30138,
										30143
									],
									[
										30227,
										30232
									],
									[
										30320,
										30325
									],
									[
										30423,
										30428
									],
									[
										30526,
										30531
									],
									[
										30613,
										30618
									],
									[
										30712,
										30717
									],
									[
										30821,
										30826
									],
									[
										30914,
										30919
									],
									[
										31005,
										31010
									],
									[
										31093,
										31098
									],
									[
										31194,
										31199
									],
									[
										31298,
										31303
									],
									[
										31405,
										31410
									],
									[
										31500,
										31505
									],
									[
										31601,
										31606
									],
									[
										31697,
										31702
									],
									[
										31804,
										31809
									],
									[
										31909,
										31914
									],
									[
										32011,
										32016
									],
									[
										32104,
										32109
									],
									[
										32187,
										32192
									],
									[
										32275,
										32280
									],
									[
										32365,
										32370
									],
									[
										32451,
										32456
									],
									[
										32540,
										32545
									],
									[
										32637,
										32642
									],
									[
										32727,
										32732
									],
									[
										32823,
										32828
									],
									[
										32921,
										32926
									],
									[
										33014,
										33019
									],
									[
										33118,
										33123
									],
									[
										33205,
										33210
									],
									[
										33320,
										33325
									],
									[
										33420,
										33425
									],
									[
										33524,
										33529
									],
									[
										33612,
										33617
									],
									[
										33699,
										33704
									],
									[
										33795,
										33800
									],
									[
										33889,
										33894
									],
									[
										33972,
										33977
									],
									[
										34057,
										34062
									],
									[
										34151,
										34156
									],
									[
										34243,
										34248
									],
									[
										34330,
										34335
									],
									[
										34419,
										34424
									],
									[
										34432,
										34437
									],
									[
										34544,
										34549
									],
									[
										34558,
										34563
									],
									[
										34652,
										34657
									],
									[
										34665,
										34670
									],
									[
										34759,
										34764
									],
									[
										34773,
										34778
									],
									[
										34851,
										34856
									],
									[
										34952,
										34957
									],
									[
										35052,
										35057
									],
									[
										35134,
										35139
									],
									[
										35233,
										35238
									],
									[
										35282,
										35287
									],
									[
										35365,
										35370
									],
									[
										35458,
										35463
									],
									[
										35559,
										35564
									],
									[
										35655,
										35660
									],
									[
										35746,
										35751
									],
									[
										35842,
										35847
									],
									[
										35940,
										35945
									],
									[
										36028,
										36033
									],
									[
										36118,
										36123
									],
									[
										36209,
										36214
									],
									[
										36302,
										36307
									],
									[
										36395,
										36400
									],
									[
										36487,
										36492
									],
									[
										36581,
										36586
									],
									[
										36677,
										36682
									],
									[
										36773,
										36778
									],
									[
										36870,
										36875
									],
									[
										36970,
										36975
									],
									[
										37070,
										37075
									],
									[
										37172,
										37177
									],
									[
										37266,
										37271
									],
									[
										37374,
										37379
									],
									[
										37479,
										37484
									],
									[
										37571,
										37576
									],
									[
										37662,
										37667
									],
									[
										38137,
										38142
									],
									[
										38242,
										38247
									],
									[
										38334,
										38339
									],
									[
										38442,
										38447
									],
									[
										38554,
										38559
									],
									[
										38661,
										38666
									],
									[
										39140,
										39145
									],
									[
										39606,
										39611
									],
									[
										39700,
										39705
									],
									[
										39803,
										39808
									],
									[
										39908,
										39913
									],
									[
										40009,
										40014
									],
									[
										40099,
										40104
									],
									[
										40185,
										40190
									],
									[
										40274,
										40279
									],
									[
										40365,
										40370
									],
									[
										40466,
										40471
									],
									[
										40567,
										40572
									],
									[
										40580,
										40585
									],
									[
										40672,
										40677
									],
									[
										40685,
										40690
									],
									[
										40776,
										40781
									],
									[
										40790,
										40795
									],
									[
										40874,
										40879
									],
									[
										40962,
										40967
									],
									[
										40977,
										40982
									],
									[
										41066,
										41071
									],
									[
										41151,
										41156
									],
									[
										41236,
										41241
									],
									[
										41318,
										41323
									],
									[
										41412,
										41417
									],
									[
										41505,
										41510
									],
									[
										41606,
										41611
									],
									[
										41707,
										41712
									],
									[
										41817,
										41822
									],
									[
										41832,
										41837
									],
									[
										41934,
										41939
									],
									[
										41948,
										41953
									],
									[
										42036,
										42041
									],
									[
										42143,
										42148
									],
									[
										42240,
										42245
									],
									[
										42329,
										42334
									],
									[
										42435,
										42440
									],
									[
										42540,
										42545
									],
									[
										42661,
										42666
									],
									[
										42770,
										42775
									],
									[
										42867,
										42872
									],
									[
										42964,
										42969
									],
									[
										43066,
										43071
									],
									[
										43161,
										43166
									],
									[
										43263,
										43268
									],
									[
										43365,
										43370
									],
									[
										43467,
										43472
									],
									[
										43575,
										43580
									],
									[
										43672,
										43677
									],
									[
										43770,
										43775
									],
									[
										43876,
										43881
									],
									[
										43972,
										43977
									],
									[
										44070,
										44075
									],
									[
										44111,
										44116
									],
									[
										44218,
										44223
									],
									[
										44312,
										44317
									],
									[
										44409,
										44414
									],
									[
										44426,
										44431
									],
									[
										44542,
										44547
									],
									[
										44571,
										44576
									],
									[
										44671,
										44676
									],
									[
										44774,
										44779
									],
									[
										44863,
										44868
									],
									[
										44943,
										44948
									],
									[
										44955,
										44960
									],
									[
										45083,
										45088
									],
									[
										45172,
										45177
									],
									[
										45331,
										45336
									],
									[
										45446,
										45451
									],
									[
										45968,
										45973
									],
									[
										46341,
										46346
									],
									[
										46537,
										46542
									],
									[
										46732,
										46737
									],
									[
										46829,
										46834
									],
									[
										46927,
										46932
									],
									[
										47396,
										47401
									],
									[
										47492,
										47497
									],
									[
										47772,
										47777
									],
									[
										48226,
										48231
									],
									[
										48311,
										48316
									],
									[
										48396,
										48401
									],
									[
										48483,
										48488
									],
									[
										48572,
										48577
									],
									[
										48663,
										48668
									],
									[
										48763,
										48768
									],
									[
										48788,
										48793
									],
									[
										48878,
										48883
									],
									[
										48980,
										48985
									],
									[
										49065,
										49070
									],
									[
										49151,
										49156
									],
									[
										49245,
										49250
									],
									[
										49331,
										49336
									],
									[
										49780,
										49785
									],
									[
										49870,
										49875
									],
									[
										49960,
										49965
									],
									[
										50058,
										50063
									],
									[
										50530,
										50535
									],
									[
										50626,
										50631
									],
									[
										51014,
										51019
									],
									[
										51293,
										51298
									],
									[
										51395,
										51400
									],
									[
										51492,
										51497
									],
									[
										51592,
										51597
									],
									[
										51957,
										51962
									],
									[
										52405,
										52410
									],
									[
										52490,
										52495
									],
									[
										52577,
										52582
									],
									[
										52664,
										52669
									],
									[
										52749,
										52754
									],
									[
										52835,
										52840
									],
									[
										53296,
										53301
									],
									[
										53323,
										53328
									],
									[
										53820,
										53825
									],
									[
										53846,
										53851
									],
									[
										54392,
										54397
									],
									[
										54416,
										54421
									],
									[
										54507,
										54512
									],
									[
										54532,
										54537
									],
									[
										54746,
										54751
									],
									[
										54775,
										54780
									],
									[
										54876,
										54881
									],
									[
										54913,
										54918
									],
									[
										55128,
										55133
									],
									[
										55165,
										55170
									],
									[
										55507,
										55512
									],
									[
										55595,
										55600
									],
									[
										55686,
										55691
									],
									[
										56130,
										56135
									],
									[
										56225,
										56230
									],
									[
										56511,
										56516
									],
									[
										56610,
										56615
									],
									[
										57087,
										57092
									],
									[
										57100,
										57105
									],
									[
										57196,
										57201
									],
									[
										57209,
										57214
									],
									[
										57654,
										57659
									],
									[
										57841,
										57846
									],
									[
										58028,
										58033
									],
									[
										58120,
										58125
									],
									[
										58600,
										58605
									],
									[
										58794,
										58799
									],
									[
										59175,
										59180
									],
									[
										59268,
										59273
									],
									[
										59482,
										59487
									],
									[
										59596,
										59601
									],
									[
										59804,
										59809
									],
									[
										60014,
										60019
									],
									[
										60235,
										60240
									],
									[
										60793,
										60798
									],
									[
										61019,
										61024
									],
									[
										61562,
										61567
									],
									[
										62095,
										62100
									],
									[
										62118,
										62123
									],
									[
										62210,
										62215
									],
									[
										62236,
										62241
									],
									[
										62331,
										62336
									],
									[
										62355,
										62360
									],
									[
										62448,
										62453
									],
									[
										62473,
										62478
									],
									[
										62675,
										62680
									],
									[
										62701,
										62706
									],
									[
										63184,
										63189
									],
									[
										63287,
										63292
									],
									[
										63775,
										63780
									],
									[
										64152,
										64157
									],
									[
										64257,
										64262
									],
									[
										64357,
										64362
									],
									[
										64555,
										64560
									],
									[
										64661,
										64666
									],
									[
										64943,
										64948
									],
									[
										65136,
										65141
									],
									[
										65430,
										65435
									],
									[
										65918,
										65923
									],
									[
										66128,
										66133
									],
									[
										66331,
										66336
									],
									[
										66532,
										66537
									],
									[
										66748,
										66753
									],
									[
										66777,
										66782
									],
									[
										66874,
										66879
									],
									[
										66903,
										66908
									],
									[
										66993,
										66998
									],
									[
										67103,
										67108
									],
									[
										67132,
										67137
									],
									[
										67229,
										67234
									],
									[
										67255,
										67260
									],
									[
										67553,
										67558
									],
									[
										67579,
										67584
									],
									[
										67769,
										67774
									],
									[
										67875,
										67880
									],
									[
										67901,
										67906
									],
									[
										68018,
										68023
									],
									[
										68047,
										68052
									],
									[
										68156,
										68161
									],
									[
										68261,
										68266
									],
									[
										68366,
										68371
									],
									[
										68475,
										68480
									],
									[
										68769,
										68774
									],
									[
										69053,
										69058
									],
									[
										69596,
										69601
									],
									[
										69623,
										69628
									],
									[
										69960,
										69965
									],
									[
										69984,
										69989
									],
									[
										70081,
										70086
									],
									[
										70107,
										70112
									],
									[
										70206,
										70211
									],
									[
										70232,
										70237
									],
									[
										70452,
										70457
									],
									[
										70490,
										70495
									],
									[
										71005,
										71010
									],
									[
										71216,
										71221
									],
									[
										71733,
										71738
									],
									[
										71938,
										71943
									],
									[
										72044,
										72049
									],
									[
										72148,
										72153
									],
									[
										72358,
										72363
									],
									[
										72468,
										72473
									],
									[
										72684,
										72689
									],
									[
										73156,
										73161
									],
									[
										73647,
										73652
									],
									[
										73752,
										73757
									],
									[
										73959,
										73964
									],
									[
										74066,
										74071
									],
									[
										74568,
										74573
									],
									[
										74660,
										74665
									],
									[
										74849,
										74854
									],
									[
										75063,
										75068
									],
									[
										75518,
										75523
									],
									[
										75530,
										75535
									],
									[
										76004,
										76009
									],
									[
										76104,
										76109
									],
									[
										76201,
										76206
									],
									[
										76311,
										76316
									],
									[
										76426,
										76431
									],
									[
										76529,
										76534
									],
									[
										76638,
										76643
									],
									[
										76761,
										76766
									],
									[
										76949,
										76954
									],
									[
										77044,
										77049
									],
									[
										77323,
										77328
									],
									[
										77445,
										77450
									],
									[
										77464,
										77469
									],
									[
										77565,
										77570
									],
									[
										77670,
										77675
									],
									[
										78147,
										78152
									],
									[
										78387,
										78392
									],
									[
										78738,
										78743
									],
									[
										78855,
										78860
									],
									[
										78964,
										78969
									],
									[
										79086,
										79091
									],
									[
										79591,
										79596
									],
									[
										79626,
										79631
									],
									[
										80035,
										80040
									],
									[
										80142,
										80147
									],
									[
										80439,
										80444
									],
									[
										80456,
										80461
									],
									[
										80559,
										80564
									],
									[
										80576,
										80581
									],
									[
										80681,
										80686
									],
									[
										80698,
										80703
									],
									[
										80805,
										80810
									],
									[
										80904,
										80909
									],
									[
										80942,
										80947
									],
									[
										81038,
										81043
									],
									[
										81143,
										81148
									],
									[
										81160,
										81165
									],
									[
										81274,
										81279
									],
									[
										81291,
										81296
									],
									[
										81406,
										81411
									],
									[
										81423,
										81428
									],
									[
										81531,
										81536
									],
									[
										81548,
										81553
									],
									[
										81657,
										81662
									],
									[
										81675,
										81680
									],
									[
										81785,
										81790
									],
									[
										81802,
										81807
									],
									[
										81905,
										81910
									],
									[
										81922,
										81927
									],
									[
										82048,
										82053
									],
									[
										82065,
										82070
									],
									[
										82187,
										82192
									],
									[
										82204,
										82209
									],
									[
										82324,
										82329
									],
									[
										82341,
										82346
									],
									[
										82472,
										82477
									],
									[
										82489,
										82494
									],
									[
										82622,
										82627
									],
									[
										82749,
										82754
									],
									[
										82766,
										82771
									],
									[
										82901,
										82906
									],
									[
										82937,
										82942
									],
									[
										83040,
										83045
									],
									[
										83057,
										83062
									],
									[
										83183,
										83188
									],
									[
										83200,
										83205
									],
									[
										83338,
										83343
									],
									[
										83355,
										83360
									],
									[
										83488,
										83493
									],
									[
										83614,
										83619
									],
									[
										83739,
										83744
									],
									[
										83756,
										83761
									],
									[
										83900,
										83905
									],
									[
										84016,
										84021
									],
									[
										84033,
										84038
									],
									[
										84158,
										84163
									],
									[
										84175,
										84180
									],
									[
										84303,
										84308
									],
									[
										84320,
										84325
									],
									[
										84621,
										84626
									],
									[
										84741,
										84746
									],
									[
										84861,
										84866
									],
									[
										84983,
										84988
									],
									[
										85117,
										85122
									],
									[
										85242,
										85247
									],
									[
										85372,
										85377
									],
									[
										85858,
										85863
									],
									[
										85965,
										85970
									],
									[
										86462,
										86467
									],
									[
										86604,
										86609
									],
									[
										86629,
										86634
									],
									[
										86748,
										86753
									],
									[
										86788,
										86793
									],
									[
										87258,
										87263
									],
									[
										87710,
										87715
									],
									[
										88228,
										88233
									],
									[
										88700,
										88705
									],
									[
										88726,
										88731
									],
									[
										89110,
										89115
									],
									[
										89214,
										89219
									],
									[
										89301,
										89306
									],
									[
										89390,
										89395
									],
									[
										89488,
										89493
									],
									[
										89579,
										89584
									],
									[
										89676,
										89681
									],
									[
										89784,
										89789
									],
									[
										89876,
										89881
									],
									[
										89987,
										89992
									],
									[
										90093,
										90098
									],
									[
										90193,
										90198
									],
									[
										90305,
										90310
									],
									[
										90422,
										90427
									],
									[
										90528,
										90533
									],
									[
										90644,
										90649
									],
									[
										90762,
										90767
									],
									[
										90860,
										90865
									],
									[
										90968,
										90973
									],
									[
										91072,
										91077
									],
									[
										91177,
										91182
									],
									[
										91273,
										91278
									],
									[
										91372,
										91377
									],
									[
										91470,
										91475
									],
									[
										91586,
										91591
									],
									[
										91685,
										91690
									],
									[
										91807,
										91812
									],
									[
										91838,
										91843
									],
									[
										91972,
										91977
									],
									[
										92090,
										92095
									],
									[
										92194,
										92199
									],
									[
										92296,
										92301
									],
									[
										92389,
										92394
									],
									[
										92496,
										92501
									],
									[
										92608,
										92613
									],
									[
										92706,
										92711
									],
									[
										92799,
										92804
									],
									[
										92910,
										92915
									],
									[
										93026,
										93031
									],
									[
										93128,
										93133
									],
									[
										93226,
										93231
									],
									[
										93320,
										93325
									],
									[
										93411,
										93416
									],
									[
										93503,
										93508
									],
									[
										93598,
										93603
									],
									[
										93697,
										93702
									],
									[
										93800,
										93805
									],
									[
										93897,
										93902
									],
									[
										93911,
										93916
									],
									[
										94011,
										94016
									],
									[
										94024,
										94029
									],
									[
										94117,
										94122
									],
									[
										94217,
										94222
									],
									[
										94312,
										94317
									],
									[
										94419,
										94424
									],
									[
										94513,
										94518
									],
									[
										94608,
										94613
									],
									[
										94713,
										94718
									],
									[
										94806,
										94811
									],
									[
										94900,
										94905
									],
									[
										95006,
										95011
									],
									[
										95100,
										95105
									],
									[
										95194,
										95199
									],
									[
										95290,
										95295
									],
									[
										95386,
										95391
									],
									[
										95489,
										95494
									],
									[
										95593,
										95598
									],
									[
										95690,
										95695
									],
									[
										95788,
										95793
									],
									[
										95878,
										95883
									],
									[
										95967,
										95972
									],
									[
										96057,
										96062
									],
									[
										96145,
										96150
									],
									[
										96231,
										96236
									],
									[
										96330,
										96335
									],
									[
										96420,
										96425
									],
									[
										96512,
										96517
									],
									[
										96601,
										96606
									],
									[
										96694,
										96699
									],
									[
										96798,
										96803
									],
									[
										96892,
										96897
									],
									[
										96985,
										96990
									],
									[
										97091,
										97096
									],
									[
										97186,
										97191
									],
									[
										97285,
										97290
									],
									[
										97394,
										97399
									],
									[
										97503,
										97508
									],
									[
										97625,
										97630
									],
									[
										97723,
										97728
									],
									[
										97832,
										97837
									],
									[
										97942,
										97947
									],
									[
										98030,
										98035
									],
									[
										98128,
										98133
									],
									[
										98223,
										98228
									],
									[
										98319,
										98324
									],
									[
										98416,
										98421
									],
									[
										98513,
										98518
									],
									[
										98610,
										98615
									],
									[
										98697,
										98702
									],
									[
										98788,
										98793
									],
									[
										98880,
										98885
									],
									[
										98971,
										98976
									],
									[
										99058,
										99063
									],
									[
										99144,
										99149
									],
									[
										99234,
										99239
									],
									[
										99325,
										99330
									],
									[
										99414,
										99419
									],
									[
										99504,
										99509
									],
									[
										99604,
										99609
									],
									[
										99713,
										99718
									],
									[
										99826,
										99831
									],
									[
										99924,
										99929
									],
									[
										100024,
										100029
									],
									[
										100121,
										100126
									],
									[
										100225,
										100230
									],
									[
										100320,
										100325
									],
									[
										100416,
										100421
									],
									[
										100512,
										100517
									],
									[
										100603,
										100608
									],
									[
										100699,
										100704
									],
									[
										100794,
										100799
									],
									[
										100903,
										100908
									],
									[
										101004,
										101009
									],
									[
										101107,
										101112
									],
									[
										101230,
										101235
									],
									[
										101352,
										101357
									],
									[
										101456,
										101461
									],
									[
										101558,
										101563
									],
									[
										101657,
										101662
									],
									[
										101753,
										101758
									],
									[
										101857,
										101862
									],
									[
										101954,
										101959
									],
									[
										102077,
										102082
									],
									[
										102184,
										102189
									],
									[
										102284,
										102289
									],
									[
										102389,
										102394
									],
									[
										102480,
										102485
									],
									[
										102593,
										102598
									],
									[
										102717,
										102722
									],
									[
										102834,
										102839
									],
									[
										102956,
										102961
									],
									[
										103063,
										103068
									],
									[
										103168,
										103173
									],
									[
										103273,
										103278
									],
									[
										103378,
										103383
									],
									[
										103488,
										103493
									],
									[
										103592,
										103597
									],
									[
										103694,
										103699
									],
									[
										103796,
										103801
									],
									[
										103898,
										103903
									],
									[
										104005,
										104010
									],
									[
										104110,
										104115
									],
									[
										104140,
										104145
									],
									[
										104262,
										104267
									],
									[
										104304,
										104309
									],
									[
										104418,
										104423
									],
									[
										104523,
										104528
									],
									[
										104626,
										104631
									],
									[
										104729,
										104734
									],
									[
										104829,
										104834
									],
									[
										104931,
										104936
									],
									[
										105031,
										105036
									],
									[
										105131,
										105136
									],
									[
										105233,
										105238
									],
									[
										105339,
										105344
									],
									[
										105445,
										105450
									],
									[
										105551,
										105556
									],
									[
										105656,
										105661
									],
									[
										105757,
										105762
									],
									[
										105860,
										105865
									],
									[
										105963,
										105968
									],
									[
										106066,
										106071
									],
									[
										106171,
										106176
									],
									[
										106287,
										106292
									],
									[
										106400,
										106405
									],
									[
										106494,
										106499
									],
									[
										106589,
										106594
									],
									[
										106688,
										106693
									],
									[
										106788,
										106793
									],
									[
										106892,
										106897
									],
									[
										106989,
										106994
									],
									[
										107087,
										107092
									],
									[
										107189,
										107194
									],
									[
										107292,
										107297
									],
									[
										107395,
										107400
									],
									[
										107488,
										107493
									],
									[
										107580,
										107585
									],
									[
										107682,
										107687
									],
									[
										107788,
										107793
									],
									[
										107888,
										107893
									],
									[
										107988,
										107993
									],
									[
										108091,
										108096
									],
									[
										108193,
										108198
									],
									[
										108304,
										108309
									],
									[
										108415,
										108420
									],
									[
										108521,
										108526
									],
									[
										108646,
										108651
									],
									[
										108757,
										108762
									],
									[
										108858,
										108863
									],
									[
										108944,
										108949
									],
									[
										109036,
										109041
									],
									[
										109127,
										109132
									],
									[
										109218,
										109223
									],
									[
										109315,
										109320
									],
									[
										109422,
										109427
									],
									[
										109518,
										109523
									],
									[
										109614,
										109619
									],
									[
										109715,
										109720
									],
									[
										109806,
										109811
									],
									[
										109903,
										109908
									],
									[
										109999,
										110004
									],
									[
										110092,
										110097
									],
									[
										110184,
										110189
									],
									[
										110274,
										110279
									],
									[
										110369,
										110374
									],
									[
										110458,
										110463
									],
									[
										110556,
										110561
									],
									[
										110659,
										110664
									],
									[
										110754,
										110759
									],
									[
										110855,
										110860
									],
									[
										110968,
										110973
									],
									[
										111078,
										111083
									],
									[
										111188,
										111193
									],
									[
										111283,
										111288
									],
									[
										111381,
										111386
									],
									[
										111470,
										111475
									],
									[
										111561,
										111566
									],
									[
										111661,
										111666
									],
									[
										111752,
										111757
									],
									[
										111843,
										111848
									],
									[
										111931,
										111936
									],
									[
										112028,
										112033
									],
									[
										112135,
										112140
									],
									[
										112229,
										112234
									],
									[
										112328,
										112333
									],
									[
										112422,
										112427
									],
									[
										112517,
										112522
									],
									[
										112613,
										112618
									],
									[
										112711,
										112716
									],
									[
										112808,
										112813
									],
									[
										112904,
										112909
									],
									[
										113009,
										113014
									],
									[
										113115,
										113120
									],
									[
										113225,
										113230
									],
									[
										113321,
										113326
									],
									[
										113418,
										113423
									],
									[
										113519,
										113524
									],
									[
										113630,
										113635
									],
									[
										113741,
										113746
									],
									[
										113836,
										113841
									],
									[
										113943,
										113948
									],
									[
										114060,
										114065
									],
									[
										114169,
										114174
									],
									[
										114278,
										114283
									],
									[
										114390,
										114395
									],
									[
										114505,
										114510
									],
									[
										114608,
										114613
									],
									[
										114717,
										114722
									],
									[
										114821,
										114826
									],
									[
										114936,
										114941
									],
									[
										115049,
										115054
									],
									[
										115159,
										115164
									],
									[
										115260,
										115265
									],
									[
										115351,
										115356
									],
									[
										115446,
										115451
									],
									[
										115544,
										115549
									],
									[
										115638,
										115643
									],
									[
										115735,
										115740
									],
									[
										115840,
										115845
									],
									[
										115938,
										115943
									],
									[
										116042,
										116047
									],
									[
										116148,
										116153
									],
									[
										116249,
										116254
									],
									[
										116361,
										116366
									],
									[
										116477,
										116482
									],
									[
										116585,
										116590
									],
									[
										116697,
										116702
									],
									[
										116801,
										116806
									],
									[
										116903,
										116908
									],
									[
										116994,
										116999
									],
									[
										117087,
										117092
									],
									[
										117188,
										117193
									],
									[
										117288,
										117293
									],
									[
										117386,
										117391
									],
									[
										117399,
										117404
									],
									[
										117519,
										117524
									],
									[
										117533,
										117538
									],
									[
										117619,
										117624
									],
									[
										117724,
										117729
									],
									[
										117832,
										117837
									],
									[
										117922,
										117927
									],
									[
										118022,
										118027
									],
									[
										118071,
										118076
									],
									[
										118162,
										118167
									],
									[
										118263,
										118268
									],
									[
										118372,
										118377
									],
									[
										118476,
										118481
									],
									[
										118575,
										118580
									],
									[
										118679,
										118684
									],
									[
										118785,
										118790
									],
									[
										118881,
										118886
									],
									[
										118979,
										118984
									],
									[
										119078,
										119083
									],
									[
										119179,
										119184
									],
									[
										119280,
										119285
									],
									[
										119380,
										119385
									],
									[
										119482,
										119487
									],
									[
										119586,
										119591
									],
									[
										119690,
										119695
									],
									[
										119795,
										119800
									],
									[
										119903,
										119908
									],
									[
										120011,
										120016
									],
									[
										120121,
										120126
									],
									[
										120223,
										120228
									],
									[
										120339,
										120344
									],
									[
										120452,
										120457
									],
									[
										120552,
										120557
									],
									[
										120651,
										120656
									],
									[
										121166,
										121171
									],
									[
										121279,
										121284
									],
									[
										121379,
										121384
									],
									[
										121495,
										121500
									],
									[
										121615,
										121620
									],
									[
										121730,
										121735
									],
									[
										122253,
										122258
									],
									[
										122755,
										122760
									],
									[
										122857,
										122862
									],
									[
										122968,
										122973
									],
									[
										123081,
										123086
									],
									[
										123190,
										123195
									],
									[
										123288,
										123293
									],
									[
										123382,
										123387
									],
									[
										123476,
										123481
									],
									[
										123575,
										123580
									],
									[
										123684,
										123689
									],
									[
										123793,
										123798
									],
									[
										123806,
										123811
									],
									[
										123906,
										123911
									],
									[
										123919,
										123924
									],
									[
										124018,
										124023
									],
									[
										124032,
										124037
									],
									[
										124124,
										124129
									],
									[
										124216,
										124221
									],
									[
										124231,
										124236
									],
									[
										124328,
										124333
									],
									[
										124421,
										124426
									],
									[
										124514,
										124519
									],
									[
										124604,
										124609
									],
									[
										124706,
										124711
									],
									[
										124807,
										124812
									],
									[
										124916,
										124921
									],
									[
										125025,
										125030
									],
									[
										125143,
										125148
									],
									[
										125158,
										125163
									],
									[
										125257,
										125262
									],
									[
										125372,
										125377
									],
									[
										125477,
										125482
									],
									[
										125574,
										125579
									],
									[
										125688,
										125693
									],
									[
										125801,
										125806
									],
									[
										125930,
										125935
									],
									[
										126047,
										126052
									],
									[
										126152,
										126157
									],
									[
										126257,
										126262
									],
									[
										126367,
										126372
									],
									[
										126470,
										126475
									],
									[
										126580,
										126585
									],
									[
										126690,
										126695
									],
									[
										126800,
										126805
									],
									[
										126916,
										126921
									],
									[
										127021,
										127026
									],
									[
										127127,
										127132
									],
									[
										127241,
										127246
									],
									[
										127345,
										127350
									],
									[
										127451,
										127456
									],
									[
										127492,
										127497
									],
									[
										127607,
										127612
									],
									[
										127709,
										127714
									],
									[
										127814,
										127819
									],
									[
										127831,
										127836
									],
									[
										127955,
										127960
									],
									[
										127984,
										127989
									],
									[
										128092,
										128097
									],
									[
										128203,
										128208
									],
									[
										128300,
										128305
									],
									[
										128388,
										128393
									],
									[
										128400,
										128405
									],
									[
										128536,
										128541
									],
									[
										128633,
										128638
									],
									[
										129151,
										129156
									],
									[
										129255,
										129260
									],
									[
										129376,
										129381
									],
									[
										129493,
										129498
									],
									[
										129624,
										129629
									],
									[
										129828,
										129833
									],
									[
										129931,
										129936
									],
									[
										130226,
										130231
									],
									[
										130356,
										130361
									],
									[
										130375,
										130380
									],
									[
										130484,
										130489
									],
									[
										130597,
										130602
									],
									[
										131102,
										131107
									],
									[
										131358,
										131363
									],
									[
										131733,
										131738
									],
									[
										131858,
										131863
									],
									[
										131989,
										131994
									],
									[
										132531,
										132536
									],
									[
										132566,
										132571
									],
									[
										133007,
										133012
									],
									[
										133122,
										133127
									],
									[
										133441,
										133446
									],
									[
										133458,
										133463
									],
									[
										133571,
										133576
									],
									[
										133588,
										133593
									],
									[
										133703,
										133708
									],
									[
										133810,
										133815
									],
									[
										133848,
										133853
									],
									[
										133952,
										133957
									],
									[
										134065,
										134070
									],
									[
										134082,
										134087
									],
									[
										134204,
										134209
									],
									[
										134221,
										134226
									],
									[
										134344,
										134349
									],
									[
										134361,
										134366
									],
									[
										134477,
										134482
									],
									[
										134494,
										134499
									],
									[
										134611,
										134616
									],
									[
										134629,
										134634
									],
									[
										134747,
										134752
									],
									[
										134764,
										134769
									],
									[
										134875,
										134880
									],
									[
										134892,
										134897
									],
									[
										135026,
										135031
									],
									[
										135043,
										135048
									],
									[
										135173,
										135178
									],
									[
										135190,
										135195
									],
									[
										135318,
										135323
									],
									[
										135335,
										135340
									],
									[
										135474,
										135479
									],
									[
										135491,
										135496
									],
									[
										135632,
										135637
									],
									[
										135767,
										135772
									],
									[
										135784,
										135789
									],
									[
										135927,
										135932
									],
									[
										135963,
										135968
									],
									[
										136074,
										136079
									],
									[
										136091,
										136096
									],
									[
										136225,
										136230
									],
									[
										136242,
										136247
									],
									[
										136388,
										136393
									],
									[
										136405,
										136410
									],
									[
										136546,
										136551
									],
									[
										136680,
										136685
									],
									[
										136813,
										136818
									],
									[
										136830,
										136835
									],
									[
										136961,
										136966
									],
									[
										136978,
										136983
									],
									[
										137111,
										137116
									],
									[
										137128,
										137133
									],
									[
										137264,
										137269
									],
									[
										137281,
										137286
									],
									[
										137422,
										137427
									],
									[
										137550,
										137555
									],
									[
										137680,
										137685
									],
									[
										137822,
										137827
									],
									[
										137960,
										137965
									],
									[
										138485,
										138490
									],
									[
										138608,
										138613
									],
									[
										138723,
										138728
									],
									[
										138839,
										138844
									],
									[
										139384,
										139389
									],
									[
										139573,
										139578
									],
									[
										139777,
										139782
									],
									[
										139879,
										139884
									],
									[
										140058,
										140063
									],
									[
										140174,
										140179
									],
									[
										140203,
										140208
									],
									[
										140755,
										140760
									],
									[
										141319,
										141324
									],
									[
										141437,
										141442
									],
									[
										141557,
										141562
									],
									[
										141689,
										141694
									],
									[
										141811,
										141816
									],
									[
										142171,
										142176
									],
									[
										142407,
										142412
									],
									[
										142952,
										142957
									],
									[
										142979,
										142984
									],
									[
										143453,
										143458
									],
									[
										143569,
										143574
									],
									[
										143685,
										143690
									],
									[
										143797,
										143802
									],
									[
										144010,
										144015
									],
									[
										144234,
										144239
									],
									[
										144769,
										144774
									],
									[
										145318,
										145323
									],
									[
										145843,
										145848
									],
									[
										146365,
										146370
									],
									[
										146478,
										146483
									],
									[
										146591,
										146596
									],
									[
										146799,
										146804
									],
									[
										147002,
										147007
									],
									[
										147321,
										147326
									],
									[
										147413,
										147418
									],
									[
										147826,
										147831
									],
									[
										148028,
										148033
									],
									[
										148137,
										148142
									],
									[
										148162,
										148167
									],
									[
										148249,
										148254
									],
									[
										148651,
										148656
									],
									[
										149170,
										149175
									],
									[
										149479,
										149484
									],
									[
										149502,
										149507
									],
									[
										150011,
										150016
									],
									[
										150221,
										150226
									],
									[
										150506,
										150511
									],
									[
										150613,
										150618
									],
									[
										150895,
										150900
									],
									[
										151216,
										151221
									],
									[
										151328,
										151333
									],
									[
										151439,
										151444
									],
									[
										151967,
										151972
									],
									[
										152162,
										152167
									],
									[
										152186,
										152191
									],
									[
										152729,
										152734
									],
									[
										152834,
										152839
									],
									[
										153063,
										153068
									],
									[
										153089,
										153094
									],
									[
										153373,
										153378
									],
									[
										153480,
										153485
									],
									[
										153590,
										153595
									],
									[
										153683,
										153688
									],
									[
										153795,
										153800
									],
									[
										154275,
										154280
									],
									[
										154391,
										154396
									],
									[
										154504,
										154509
									],
									[
										154530,
										154535
									],
									[
										154737,
										154742
									],
									[
										154946,
										154951
									],
									[
										155056,
										155061
									],
									[
										155167,
										155172
									],
									[
										155498,
										155503
									],
									[
										156052,
										156057
									],
									[
										156636,
										156641
									],
									[
										157064,
										157069
									],
									[
										157101,
										157106
									],
									[
										157554,
										157559
									],
									[
										157591,
										157596
									],
									[
										158030,
										158035
									],
									[
										158321,
										158326
									],
									[
										158346,
										158351
									],
									[
										158548,
										158553
									],
									[
										158643,
										158648
									],
									[
										158754,
										158759
									],
									[
										158783,
										158788
									],
									[
										158882,
										158887
									],
									[
										158906,
										158911
									],
									[
										159197,
										159202
									],
									[
										159305,
										159310
									],
									[
										159331,
										159336
									],
									[
										159418,
										159423
									],
									[
										159528,
										159533
									],
									[
										159555,
										159560
									],
									[
										159957,
										159962
									],
									[
										160502,
										160507
									],
									[
										160805,
										160810
									],
									[
										161101,
										161106
									],
									[
										161307,
										161312
									],
									[
										161528,
										161533
									],
									[
										161962,
										161967
									],
									[
										162072,
										162077
									],
									[
										162386,
										162391
									],
									[
										162411,
										162416
									],
									[
										162781,
										162786
									],
									[
										162807,
										162812
									],
									[
										163045,
										163050
									],
									[
										163069,
										163074
									],
									[
										163174,
										163179
									],
									[
										163200,
										163205
									],
									[
										163436,
										163441
									],
									[
										163474,
										163479
									],
									[
										163563,
										163568
									],
									[
										163654,
										163659
									],
									[
										163768,
										163773
									],
									[
										163794,
										163799
									],
									[
										163998,
										164003
									],
									[
										164136,
										164141
									],
									[
										164176,
										164181
									],
									[
										164270,
										164275
									],
									[
										164590,
										164595
									],
									[
										164603,
										164608
									],
									[
										164703,
										164708
									],
									[
										164716,
										164721
									],
									[
										164940,
										164945
									],
									[
										165063,
										165068
									],
									[
										165200,
										165205
									],
									[
										165225,
										165230
									],
									[
										165738,
										165743
									],
									[
										166202,
										166207
									],
									[
										166748,
										166753
									],
									[
										167194,
										167199
									],
									[
										167297,
										167302
									],
									[
										167383,
										167388
									],
									[
										167471,
										167476
									],
									[
										167568,
										167573
									],
									[
										167658,
										167663
									],
									[
										167754,
										167759
									],
									[
										167861,
										167866
									],
									[
										167953,
										167958
									],
									[
										168063,
										168068
									],
									[
										168168,
										168173
									],
									[
										168267,
										168272
									],
									[
										168378,
										168383
									],
									[
										168494,
										168499
									],
									[
										168599,
										168604
									],
									[
										168714,
										168719
									],
									[
										168831,
										168836
									],
									[
										168928,
										168933
									],
									[
										169035,
										169040
									],
									[
										169138,
										169143
									],
									[
										169242,
										169247
									],
									[
										169337,
										169342
									],
									[
										169435,
										169440
									],
									[
										169532,
										169537
									],
									[
										169647,
										169652
									],
									[
										169745,
										169750
									],
									[
										169866,
										169871
									],
									[
										169897,
										169902
									],
									[
										170030,
										170035
									],
									[
										170147,
										170152
									],
									[
										170250,
										170255
									],
									[
										170351,
										170356
									],
									[
										170443,
										170448
									],
									[
										170549,
										170554
									],
									[
										170660,
										170665
									],
									[
										170757,
										170762
									],
									[
										170849,
										170854
									],
									[
										170959,
										170964
									],
									[
										171074,
										171079
									],
									[
										171175,
										171180
									],
									[
										171272,
										171277
									],
									[
										171365,
										171370
									],
									[
										171455,
										171460
									],
									[
										171546,
										171551
									],
									[
										171640,
										171645
									],
									[
										171738,
										171743
									],
									[
										171840,
										171845
									],
									[
										171936,
										171941
									],
									[
										171950,
										171955
									],
									[
										172049,
										172054
									],
									[
										172062,
										172067
									],
									[
										172154,
										172159
									],
									[
										172253,
										172258
									],
									[
										172347,
										172352
									],
									[
										172453,
										172458
									],
									[
										172546,
										172551
									],
									[
										172640,
										172645
									],
									[
										172744,
										172749
									],
									[
										172836,
										172841
									],
									[
										172929,
										172934
									],
									[
										173034,
										173039
									],
									[
										173127,
										173132
									],
									[
										173220,
										173225
									],
									[
										173315,
										173320
									],
									[
										173410,
										173415
									],
									[
										173512,
										173517
									],
									[
										173615,
										173620
									],
									[
										173711,
										173716
									],
									[
										173808,
										173813
									],
									[
										173897,
										173902
									],
									[
										173985,
										173990
									],
									[
										174074,
										174079
									],
									[
										174161,
										174166
									],
									[
										174246,
										174251
									],
									[
										174344,
										174349
									],
									[
										174433,
										174438
									],
									[
										174524,
										174529
									],
									[
										174612,
										174617
									],
									[
										174704,
										174709
									],
									[
										174807,
										174812
									],
									[
										174900,
										174905
									],
									[
										174992,
										174997
									],
									[
										175097,
										175102
									],
									[
										175191,
										175196
									],
									[
										175289,
										175294
									],
									[
										175397,
										175402
									],
									[
										175505,
										175510
									],
									[
										175626,
										175631
									],
									[
										175723,
										175728
									],
									[
										175831,
										175836
									],
									[
										175940,
										175945
									],
									[
										176027,
										176032
									],
									[
										176124,
										176129
									],
									[
										176218,
										176223
									],
									[
										176313,
										176318
									],
									[
										176409,
										176414
									],
									[
										176505,
										176510
									],
									[
										176601,
										176606
									],
									[
										176687,
										176692
									],
									[
										176777,
										176782
									],
									[
										176868,
										176873
									],
									[
										176958,
										176963
									],
									[
										177044,
										177049
									],
									[
										177129,
										177134
									],
									[
										177218,
										177223
									],
									[
										177308,
										177313
									],
									[
										177396,
										177401
									],
									[
										177485,
										177490
									],
									[
										177584,
										177589
									],
									[
										177692,
										177697
									],
									[
										177804,
										177809
									],
									[
										177901,
										177906
									],
									[
										178000,
										178005
									],
									[
										178096,
										178101
									],
									[
										178199,
										178204
									],
									[
										178293,
										178298
									],
									[
										178388,
										178393
									],
									[
										178483,
										178488
									],
									[
										178573,
										178578
									],
									[
										178668,
										178673
									],
									[
										178762,
										178767
									],
									[
										178870,
										178875
									],
									[
										178970,
										178975
									],
									[
										179072,
										179077
									],
									[
										179194,
										179199
									],
									[
										179315,
										179320
									],
									[
										179418,
										179423
									],
									[
										179519,
										179524
									],
									[
										179617,
										179622
									],
									[
										179712,
										179717
									],
									[
										179815,
										179820
									],
									[
										179911,
										179916
									],
									[
										180033,
										180038
									],
									[
										180139,
										180144
									],
									[
										180238,
										180243
									],
									[
										180342,
										180347
									],
									[
										180432,
										180437
									],
									[
										180544,
										180549
									],
									[
										180667,
										180672
									],
									[
										180783,
										180788
									],
									[
										180904,
										180909
									],
									[
										181010,
										181015
									],
									[
										181114,
										181119
									],
									[
										181218,
										181223
									],
									[
										181322,
										181327
									],
									[
										181431,
										181436
									],
									[
										181534,
										181539
									],
									[
										181635,
										181640
									],
									[
										181736,
										181741
									],
									[
										181837,
										181842
									],
									[
										181943,
										181948
									],
									[
										182047,
										182052
									],
									[
										182077,
										182082
									],
									[
										182198,
										182203
									],
									[
										182240,
										182245
									],
									[
										182353,
										182358
									],
									[
										182457,
										182462
									],
									[
										182559,
										182564
									],
									[
										182661,
										182666
									],
									[
										182760,
										182765
									],
									[
										182861,
										182866
									],
									[
										182960,
										182965
									],
									[
										183059,
										183064
									],
									[
										183160,
										183165
									],
									[
										183265,
										183270
									],
									[
										183370,
										183375
									],
									[
										183475,
										183480
									],
									[
										183579,
										183584
									],
									[
										183679,
										183684
									],
									[
										183781,
										183786
									],
									[
										183883,
										183888
									],
									[
										183985,
										183990
									],
									[
										184089,
										184094
									],
									[
										184204,
										184209
									],
									[
										184316,
										184321
									],
									[
										184409,
										184414
									],
									[
										184503,
										184508
									],
									[
										184601,
										184606
									],
									[
										184700,
										184705
									],
									[
										184803,
										184808
									],
									[
										184899,
										184904
									],
									[
										184996,
										185001
									],
									[
										185097,
										185102
									],
									[
										185199,
										185204
									],
									[
										185301,
										185306
									],
									[
										185393,
										185398
									],
									[
										185484,
										185489
									],
									[
										185585,
										185590
									],
									[
										185690,
										185695
									],
									[
										185789,
										185794
									],
									[
										185888,
										185893
									],
									[
										185990,
										185995
									],
									[
										186091,
										186096
									],
									[
										186201,
										186206
									],
									[
										186311,
										186316
									],
									[
										186416,
										186421
									],
									[
										186540,
										186545
									],
									[
										186650,
										186655
									],
									[
										186750,
										186755
									],
									[
										186835,
										186840
									],
									[
										186926,
										186931
									],
									[
										187016,
										187021
									],
									[
										187106,
										187111
									],
									[
										187202,
										187207
									],
									[
										187308,
										187313
									],
									[
										187403,
										187408
									],
									[
										187498,
										187503
									],
									[
										187598,
										187603
									],
									[
										187688,
										187693
									],
									[
										187784,
										187789
									],
									[
										187879,
										187884
									],
									[
										187971,
										187976
									],
									[
										188062,
										188067
									],
									[
										188151,
										188156
									],
									[
										188245,
										188250
									],
									[
										188333,
										188338
									],
									[
										188430,
										188435
									],
									[
										188532,
										188537
									],
									[
										188626,
										188631
									],
									[
										188726,
										188731
									],
									[
										188838,
										188843
									],
									[
										188947,
										188952
									],
									[
										189056,
										189061
									],
									[
										189150,
										189155
									],
									[
										189247,
										189252
									],
									[
										189335,
										189340
									],
									[
										189425,
										189430
									],
									[
										189524,
										189529
									],
									[
										189614,
										189619
									],
									[
										189704,
										189709
									],
									[
										189791,
										189796
									],
									[
										189887,
										189892
									],
									[
										189993,
										189998
									],
									[
										190086,
										190091
									],
									[
										190184,
										190189
									],
									[
										190277,
										190282
									],
									[
										190371,
										190376
									],
									[
										190466,
										190471
									],
									[
										190563,
										190568
									],
									[
										190659,
										190664
									],
									[
										190754,
										190759
									],
									[
										190858,
										190863
									],
									[
										190963,
										190968
									],
									[
										191072,
										191077
									],
									[
										191167,
										191172
									],
									[
										191263,
										191268
									],
									[
										191363,
										191368
									],
									[
										191473,
										191478
									],
									[
										191583,
										191588
									],
									[
										191677,
										191682
									],
									[
										191783,
										191788
									],
									[
										191899,
										191904
									],
									[
										192007,
										192012
									],
									[
										192115,
										192120
									],
									[
										192226,
										192231
									],
									[
										192340,
										192345
									],
									[
										192442,
										192447
									],
									[
										192550,
										192555
									],
									[
										192653,
										192658
									],
									[
										192767,
										192772
									],
									[
										192879,
										192884
									],
									[
										192988,
										192993
									],
									[
										193088,
										193093
									],
									[
										193178,
										193183
									],
									[
										193272,
										193277
									],
									[
										193369,
										193374
									],
									[
										193462,
										193467
									],
									[
										193558,
										193563
									],
									[
										193662,
										193667
									],
									[
										193759,
										193764
									],
									[
										193862,
										193867
									],
									[
										193967,
										193972
									],
									[
										194067,
										194072
									],
									[
										194178,
										194183
									],
									[
										194293,
										194298
									],
									[
										194400,
										194405
									],
									[
										194511,
										194516
									],
									[
										194614,
										194619
									],
									[
										194715,
										194720
									],
									[
										194805,
										194810
									],
									[
										194897,
										194902
									],
									[
										194997,
										195002
									],
									[
										195096,
										195101
									],
									[
										195193,
										195198
									],
									[
										195206,
										195211
									],
									[
										195325,
										195330
									],
									[
										195339,
										195344
									],
									[
										195424,
										195429
									],
									[
										195528,
										195533
									],
									[
										195635,
										195640
									],
									[
										195724,
										195729
									],
									[
										195823,
										195828
									],
									[
										195872,
										195877
									],
									[
										195962,
										195967
									],
									[
										196062,
										196067
									],
									[
										196170,
										196175
									],
									[
										196273,
										196278
									],
									[
										196371,
										196376
									],
									[
										196474,
										196479
									],
									[
										196579,
										196584
									],
									[
										196674,
										196679
									],
									[
										196771,
										196776
									],
									[
										196869,
										196874
									],
									[
										196969,
										196974
									],
									[
										197069,
										197074
									],
									[
										197168,
										197173
									],
									[
										197269,
										197274
									],
									[
										197372,
										197377
									],
									[
										197475,
										197480
									],
									[
										197579,
										197584
									],
									[
										197686,
										197691
									],
									[
										197793,
										197798
									],
									[
										197902,
										197907
									],
									[
										198003,
										198008
									],
									[
										198118,
										198123
									],
									[
										198230,
										198235
									],
									[
										198329,
										198334
									],
									[
										198427,
										198432
									],
									[
										198937,
										198942
									],
									[
										199049,
										199054
									],
									[
										199148,
										199153
									],
									[
										199263,
										199268
									],
									[
										199382,
										199387
									],
									[
										199496,
										199501
									],
									[
										200014,
										200019
									],
									[
										200511,
										200516
									],
									[
										200612,
										200617
									],
									[
										200722,
										200727
									],
									[
										200834,
										200839
									],
									[
										200942,
										200947
									],
									[
										201039,
										201044
									],
									[
										201132,
										201137
									],
									[
										201225,
										201230
									],
									[
										201323,
										201328
									],
									[
										201431,
										201436
									],
									[
										201539,
										201544
									],
									[
										201552,
										201557
									],
									[
										201651,
										201656
									],
									[
										201664,
										201669
									],
									[
										201762,
										201767
									],
									[
										201776,
										201781
									],
									[
										201867,
										201872
									],
									[
										201958,
										201963
									],
									[
										201973,
										201978
									],
									[
										202069,
										202074
									],
									[
										202161,
										202166
									],
									[
										202253,
										202258
									],
									[
										202342,
										202347
									],
									[
										202443,
										202448
									],
									[
										202543,
										202548
									],
									[
										202651,
										202656
									],
									[
										202759,
										202764
									],
									[
										202876,
										202881
									],
									[
										202891,
										202896
									],
									[
										202989,
										202994
									],
									[
										203103,
										203108
									],
									[
										203207,
										203212
									],
									[
										203303,
										203308
									],
									[
										203416,
										203421
									],
									[
										203528,
										203533
									],
									[
										203656,
										203661
									],
									[
										203772,
										203777
									],
									[
										203876,
										203881
									],
									[
										203980,
										203985
									],
									[
										204089,
										204094
									],
									[
										204191,
										204196
									],
									[
										204300,
										204305
									],
									[
										204409,
										204414
									],
									[
										204518,
										204523
									],
									[
										204633,
										204638
									],
									[
										204737,
										204742
									],
									[
										204842,
										204847
									],
									[
										204955,
										204960
									],
									[
										205058,
										205063
									],
									[
										205163,
										205168
									],
									[
										205204,
										205209
									],
									[
										205318,
										205323
									],
									[
										205419,
										205424
									],
									[
										205523,
										205528
									],
									[
										205540,
										205545
									],
									[
										205663,
										205668
									],
									[
										205692,
										205697
									],
									[
										205799,
										205804
									],
									[
										205909,
										205914
									],
									[
										206005,
										206010
									],
									[
										206092,
										206097
									],
									[
										206104,
										206109
									],
									[
										206239,
										206244
									],
									[
										206335,
										206340
									],
									[
										206848,
										206853
									],
									[
										206951,
										206956
									],
									[
										207071,
										207076
									],
									[
										207187,
										207192
									],
									[
										207317,
										207322
									],
									[
										207519,
										207524
									],
									[
										207621,
										207626
									],
									[
										207914,
										207919
									],
									[
										208043,
										208048
									],
									[
										208062,
										208067
									],
									[
										208170,
										208175
									],
									[
										208282,
										208287
									],
									[
										208782,
										208787
									],
									[
										209036,
										209041
									],
									[
										209408,
										209413
									],
									[
										209532,
										209537
									],
									[
										209662,
										209667
									],
									[
										210199,
										210204
									],
									[
										210234,
										210239
									],
									[
										210671,
										210676
									],
									[
										210785,
										210790
									],
									[
										211101,
										211106
									],
									[
										211118,
										211123
									],
									[
										211230,
										211235
									],
									[
										211247,
										211252
									],
									[
										211361,
										211366
									],
									[
										211467,
										211472
									],
									[
										211505,
										211510
									],
									[
										211608,
										211613
									],
									[
										211720,
										211725
									],
									[
										211737,
										211742
									],
									[
										211858,
										211863
									],
									[
										211875,
										211880
									],
									[
										211997,
										212002
									],
									[
										212014,
										212019
									],
									[
										212129,
										212134
									],
									[
										212146,
										212151
									],
									[
										212262,
										212267
									],
									[
										212280,
										212285
									],
									[
										212397,
										212402
									],
									[
										212414,
										212419
									],
									[
										212524,
										212529
									],
									[
										212541,
										212546
									],
									[
										212674,
										212679
									],
									[
										212691,
										212696
									],
									[
										212820,
										212825
									],
									[
										212837,
										212842
									],
									[
										212964,
										212969
									],
									[
										212981,
										212986
									],
									[
										213119,
										213124
									],
									[
										213136,
										213141
									],
									[
										213276,
										213281
									],
									[
										213410,
										213415
									],
									[
										213427,
										213432
									],
									[
										213569,
										213574
									],
									[
										213605,
										213610
									],
									[
										213715,
										213720
									],
									[
										213732,
										213737
									],
									[
										213865,
										213870
									],
									[
										213882,
										213887
									],
									[
										214027,
										214032
									],
									[
										214044,
										214049
									],
									[
										214184,
										214189
									],
									[
										214317,
										214322
									],
									[
										214449,
										214454
									],
									[
										214466,
										214471
									],
									[
										214596,
										214601
									],
									[
										214613,
										214618
									],
									[
										214745,
										214750
									],
									[
										214762,
										214767
									],
									[
										214897,
										214902
									],
									[
										214914,
										214919
									],
									[
										215054,
										215059
									],
									[
										215181,
										215186
									],
									[
										215310,
										215315
									],
									[
										215451,
										215456
									],
									[
										215588,
										215593
									],
									[
										216108,
										216113
									],
									[
										216230,
										216235
									],
									[
										216344,
										216349
									],
									[
										216459,
										216464
									],
									[
										216931,
										216936
									],
									[
										217020,
										217025
									],
									[
										217110,
										217115
									],
									[
										217204,
										217209
									],
									[
										217300,
										217305
									],
									[
										217398,
										217403
									],
									[
										217423,
										217428
									],
									[
										217520,
										217525
									],
									[
										217629,
										217634
									],
									[
										217719,
										217724
									],
									[
										217812,
										217817
									],
									[
										218194,
										218199
									],
									[
										218584,
										218589
									],
									[
										218690,
										218695
									],
									[
										219185,
										219190
									],
									[
										219393,
										219398
									],
									[
										219501,
										219506
									],
									[
										220001,
										220006
									],
									[
										220106,
										220111
									],
									[
										220390,
										220395
									],
									[
										220480,
										220485
									],
									[
										220574,
										220579
									],
									[
										220668,
										220673
									],
									[
										220758,
										220763
									],
									[
										220851,
										220856
									],
									[
										221335,
										221340
									],
									[
										221362,
										221367
									],
									[
										221560,
										221565
									],
									[
										221586,
										221591
									],
									[
										222169,
										222174
									],
									[
										222193,
										222198
									],
									[
										222291,
										222296
									],
									[
										222316,
										222321
									],
									[
										222667,
										222672
									],
									[
										222704,
										222709
									],
									[
										222810,
										222815
									],
									[
										222839,
										222844
									],
									[
										222947,
										222952
									],
									[
										222984,
										222989
									],
									[
										223351,
										223356
									],
									[
										223446,
										223451
									],
									[
										223544,
										223549
									],
									[
										223934,
										223939
									],
									[
										224456,
										224461
									],
									[
										224469,
										224474
									],
									[
										224572,
										224577
									],
									[
										224585,
										224590
									],
									[
										224878,
										224883
									],
									[
										225079,
										225084
									],
									[
										225178,
										225183
									],
									[
										225316,
										225321
									],
									[
										225465,
										225470
									],
									[
										225490,
										225495
									],
									[
										225616,
										225621
									],
									[
										225656,
										225661
									],
									[
										226159,
										226164
									],
									[
										226571,
										226576
									],
									[
										226671,
										226676
									],
									[
										227229,
										227234
									],
									[
										227813,
										227818
									],
									[
										228280,
										228285
									],
									[
										228401,
										228406
									],
									[
										228518,
										228523
									],
									[
										228639,
										228644
									],
									[
										228864,
										228869
									],
									[
										228981,
										228986
									],
									[
										229530,
										229535
									],
									[
										229553,
										229558
									],
									[
										229652,
										229657
									],
									[
										229678,
										229683
									],
									[
										229780,
										229785
									],
									[
										229804,
										229809
									],
									[
										229904,
										229909
									],
									[
										229929,
										229934
									],
									[
										230151,
										230156
									],
									[
										230177,
										230182
									],
									[
										230689,
										230694
									],
									[
										231214,
										231219
									],
									[
										231321,
										231326
									],
									[
										231430,
										231435
									],
									[
										231638,
										231643
									],
									[
										231854,
										231859
									],
									[
										232182,
										232187
									],
									[
										232476,
										232481
									],
									[
										232694,
										232699
									],
									[
										233117,
										233122
									],
									[
										233235,
										233240
									],
									[
										233347,
										233352
									],
									[
										233658,
										233663
									],
									[
										234177,
										234182
									],
									[
										234290,
										234295
									],
									[
										234316,
										234321
									],
									[
										234526,
										234531
									],
									[
										234552,
										234557
									],
									[
										234676,
										234681
									],
									[
										234705,
										234710
									],
									[
										234821,
										234826
									],
									[
										235041,
										235046
									],
									[
										235153,
										235158
									],
									[
										235366,
										235371
									],
									[
										235476,
										235481
									],
									[
										235997,
										236002
									],
									[
										236544,
										236549
									],
									[
										236571,
										236576
									],
									[
										237169,
										237174
									],
									[
										237193,
										237198
									],
									[
										237297,
										237302
									],
									[
										237323,
										237328
									],
									[
										237429,
										237434
									],
									[
										237455,
										237460
									],
									[
										237807,
										237812
									],
									[
										237845,
										237850
									],
									[
										238375,
										238380
									],
									[
										238589,
										238594
									],
									[
										239138,
										239143
									],
									[
										239248,
										239253
									],
									[
										239361,
										239366
									],
									[
										239472,
										239477
									],
									[
										239696,
										239701
									],
									[
										239818,
										239823
									],
									[
										240042,
										240047
									],
									[
										240550,
										240555
									],
									[
										241076,
										241081
									],
									[
										241188,
										241193
									],
									[
										241298,
										241303
									],
									[
										241523,
										241528
									],
									[
										242060,
										242065
									],
									[
										242373,
										242378
									],
									[
										242490,
										242495
									],
									[
										242941,
										242946
									],
									[
										243049,
										243054
									],
									[
										243069,
										243074
									],
									[
										243304,
										243309
									],
									[
										243355,
										243360
									],
									[
										243419,
										243424
									],
									[
										243446,
										243451
									],
									[
										243471,
										243476
									],
									[
										243485,
										243490
									],
									[
										243650,
										243655
									],
									[
										243711,
										243716
									],
									[
										243914,
										243919
									],
									[
										244018,
										244023
									],
									[
										244183,
										244188
									],
									[
										244308,
										244313
									],
									[
										244332,
										244337
									],
									[
										244585,
										244590
									],
									[
										244681,
										244686
									],
									[
										244790,
										244795
									],
									[
										244974,
										244979
									],
									[
										245053,
										245058
									],
									[
										245080,
										245085
									],
									[
										245187,
										245192
									],
									[
										245270,
										245275
									],
									[
										245336,
										245341
									],
									[
										245441,
										245446
									],
									[
										245746,
										245751
									],
									[
										245903,
										245908
									],
									[
										245998,
										246003
									],
									[
										246077,
										246082
									],
									[
										246350,
										246355
									],
									[
										246760,
										246765
									],
									[
										247134,
										247139
									],
									[
										247367,
										247372
									],
									[
										247789,
										247794
									],
									[
										248049,
										248054
									],
									[
										248325,
										248330
									],
									[
										248356,
										248361
									],
									[
										248637,
										248642
									],
									[
										248708,
										248713
									],
									[
										248771,
										248776
									],
									[
										248848,
										248853
									],
									[
										249289,
										249294
									],
									[
										249328,
										249333
									],
									[
										249821,
										249826
									],
									[
										249835,
										249840
									],
									[
										249970,
										249975
									],
									[
										250426,
										250431
									],
									[
										250440,
										250445
									],
									[
										250671,
										250676
									],
									[
										250717,
										250722
									],
									[
										250854,
										250859
									],
									[
										250876,
										250881
									],
									[
										250903,
										250908
									],
									[
										250933,
										250938
									],
									[
										250997,
										251002
									],
									[
										251093,
										251098
									],
									[
										251291,
										251296
									],
									[
										251786,
										251791
									],
									[
										252573,
										252578
									],
									[
										252950,
										252955
									],
									[
										252967,
										252972
									],
									[
										253039,
										253044
									],
									[
										254061,
										254066
									],
									[
										254285,
										254290
									],
									[
										254565,
										254570
									],
									[
										254678,
										254683
									],
									[
										254700,
										254705
									],
									[
										254788,
										254793
									],
									[
										255603,
										255608
									],
									[
										255631,
										255636
									],
									[
										255646,
										255651
									],
									[
										255661,
										255666
									],
									[
										256456,
										256461
									],
									[
										256692,
										256697
									],
									[
										256843,
										256848
									],
									[
										257585,
										257590
									],
									[
										258173,
										258178
									],
									[
										258196,
										258201
									],
									[
										258249,
										258254
									],
									[
										258274,
										258279
									],
									[
										258730,
										258735
									],
									[
										258763,
										258768
									],
									[
										259097,
										259102
									],
									[
										259195,
										259200
									],
									[
										259220,
										259225
									],
									[
										259336,
										259341
									],
									[
										259729,
										259734
									],
									[
										260275,
										260280
									],
									[
										260745,
										260750
									],
									[
										260780,
										260785
									],
									[
										260941,
										260946
									],
									[
										261178,
										261183
									],
									[
										261357,
										261362
									],
									[
										261371,
										261376
									],
									[
										261389,
										261394
									],
									[
										261403,
										261408
									],
									[
										261422,
										261427
									],
									[
										261440,
										261445
									],
									[
										261945,
										261950
									],
									[
										262223,
										262228
									],
									[
										262482,
										262487
									],
									[
										262544,
										262549
									],
									[
										262567,
										262572
									],
									[
										262588,
										262593
									],
									[
										262616,
										262621
									],
									[
										262644,
										262649
									],
									[
										262924,
										262929
									],
									[
										263438,
										263443
									],
									[
										263724,
										263729
									],
									[
										263750,
										263755
									],
									[
										263766,
										263771
									],
									[
										263833,
										263838
									],
									[
										264059,
										264064
									],
									[
										264379,
										264384
									],
									[
										264589,
										264594
									],
									[
										264841,
										264846
									],
									[
										265046,
										265051
									],
									[
										265468,
										265473
									],
									[
										265610,
										265615
									],
									[
										265664,
										265669
									],
									[
										266043,
										266048
									],
									[
										266213,
										266218
									],
									[
										266571,
										266576
									],
									[
										266873,
										266878
									],
									[
										266887,
										266892
									],
									[
										267162,
										267167
									],
									[
										267176,
										267181
									],
									[
										267495,
										267500
									],
									[
										267513,
										267518
									],
									[
										267900,
										267905
									],
									[
										268149,
										268154
									],
									[
										268493,
										268498
									],
									[
										269152,
										269157
									],
									[
										269198,
										269203
									],
									[
										269361,
										269366
									],
									[
										269784,
										269789
									],
									[
										269874,
										269879
									],
									[
										270888,
										270893
									],
									[
										271358,
										271363
									],
									[
										271882,
										271887
									],
									[
										272225,
										272230
									],
									[
										272249,
										272254
									],
									[
										272292,
										272297
									],
									[
										272336,
										272341
									],
									[
										273124,
										273129
									],
									[
										273882,
										273887
									],
									[
										274320,
										274325
									],
									[
										274521,
										274526
									],
									[
										274591,
										274596
									],
									[
										274677,
										274682
									],
									[
										274717,
										274722
									],
									[
										274782,
										274787
									],
									[
										274823,
										274828
									],
									[
										274893,
										274898
									],
									[
										274930,
										274935
									],
									[
										274964,
										274969
									],
									[
										275049,
										275054
									],
									[
										275113,
										275118
									],
									[
										275194,
										275199
									],
									[
										275320,
										275325
									],
									[
										275395,
										275400
									],
									[
										275654,
										275659
									],
									[
										275740,
										275745
									],
									[
										275775,
										275780
									],
									[
										275819,
										275824
									],
									[
										275888,
										275893
									],
									[
										276231,
										276236
									],
									[
										276423,
										276428
									],
									[
										276479,
										276484
									],
									[
										276506,
										276511
									],
									[
										276783,
										276788
									],
									[
										276810,
										276815
									],
									[
										277235,
										277240
									],
									[
										277382,
										277387
									],
									[
										277519,
										277524
									],
									[
										277690,
										277695
									],
									[
										277963,
										277968
									],
									[
										278051,
										278056
									],
									[
										278088,
										278093
									],
									[
										278300,
										278305
									],
									[
										278472,
										278477
									],
									[
										278632,
										278637
									],
									[
										278665,
										278670
									],
									[
										278685,
										278690
									],
									[
										278728,
										278733
									],
									[
										278753,
										278758
									],
									[
										278911,
										278916
									],
									[
										278923,
										278928
									],
									[
										279041,
										279046
									],
									[
										279421,
										279426
									],
									[
										279510,
										279515
									],
									[
										279599,
										279604
									],
									[
										279688,
										279693
									],
									[
										279777,
										279782
									],
									[
										279866,
										279871
									],
									[
										279955,
										279960
									],
									[
										280044,
										280049
									],
									[
										280201,
										280206
									],
									[
										280290,
										280295
									],
									[
										280379,
										280384
									],
									[
										280468,
										280473
									],
									[
										280557,
										280562
									],
									[
										280646,
										280651
									],
									[
										280735,
										280740
									],
									[
										280824,
										280829
									],
									[
										280913,
										280918
									],
									[
										281002,
										281007
									],
									[
										281091,
										281096
									],
									[
										281180,
										281185
									],
									[
										281269,
										281274
									],
									[
										281358,
										281363
									],
									[
										281447,
										281452
									],
									[
										281536,
										281541
									],
									[
										281625,
										281630
									],
									[
										281714,
										281719
									],
									[
										281803,
										281808
									],
									[
										281892,
										281897
									],
									[
										281981,
										281986
									],
									[
										282070,
										282075
									],
									[
										282159,
										282164
									],
									[
										282248,
										282253
									],
									[
										282337,
										282342
									],
									[
										282426,
										282431
									],
									[
										282515,
										282520
									],
									[
										282604,
										282609
									],
									[
										282693,
										282698
									],
									[
										282782,
										282787
									],
									[
										282871,
										282876
									],
									[
										282960,
										282965
									],
									[
										283049,
										283054
									],
									[
										283138,
										283143
									],
									[
										283227,
										283232
									],
									[
										283322,
										283327
									],
									[
										283331,
										283336
									],
									[
										283502,
										283507
									],
									[
										283540,
										283545
									],
									[
										283807,
										283812
									],
									[
										284098,
										284103
									],
									[
										284233,
										284238
									],
									[
										284343,
										284348
									],
									[
										284446,
										284451
									],
									[
										284686,
										284691
									],
									[
										284816,
										284821
									],
									[
										284936,
										284941
									],
									[
										285052,
										285057
									],
									[
										285071,
										285076
									],
									[
										285137,
										285142
									],
									[
										285183,
										285188
									],
									[
										285293,
										285298
									],
									[
										285388,
										285393
									],
									[
										285666,
										285671
									],
									[
										285982,
										285987
									],
									[
										286200,
										286205
									],
									[
										286247,
										286252
									],
									[
										286487,
										286492
									],
									[
										286638,
										286643
									],
									[
										286817,
										286822
									],
									[
										286974,
										286979
									],
									[
										287119,
										287124
									],
									[
										287169,
										287174
									],
									[
										287196,
										287201
									],
									[
										287238,
										287243
									],
									[
										287310,
										287315
									],
									[
										287508,
										287513
									],
									[
										287646,
										287651
									],
									[
										287667,
										287672
									],
									[
										287784,
										287789
									],
									[
										287940,
										287945
									],
									[
										287962,
										287967
									],
									[
										288095,
										288100
									],
									[
										288118,
										288123
									],
									[
										288237,
										288242
									],
									[
										288394,
										288399
									],
									[
										288419,
										288424
									],
									[
										288519,
										288524
									],
									[
										288817,
										288822
									],
									[
										288841,
										288846
									],
									[
										288980,
										288985
									],
									[
										289005,
										289010
									],
									[
										289138,
										289143
									],
									[
										289164,
										289169
									],
									[
										289306,
										289311
									],
									[
										289334,
										289339
									],
									[
										289645,
										289650
									],
									[
										289666,
										289671
									],
									[
										289796,
										289801
									],
									[
										289818,
										289823
									],
									[
										289916,
										289921
									],
									[
										289939,
										289944
									],
									[
										290071,
										290076
									],
									[
										290096,
										290101
									],
									[
										290228,
										290233
									],
									[
										290426,
										290431
									],
									[
										290625,
										290630
									],
									[
										290642,
										290647
									],
									[
										290761,
										290766
									],
									[
										290869,
										290874
									],
									[
										290930,
										290935
									],
									[
										291034,
										291039
									],
									[
										291146,
										291151
									],
									[
										291292,
										291297
									],
									[
										291391,
										291396
									],
									[
										291617,
										291622
									],
									[
										291814,
										291819
									],
									[
										291944,
										291949
									],
									[
										292135,
										292140
									],
									[
										292256,
										292261
									],
									[
										292276,
										292281
									],
									[
										292363,
										292368
									],
									[
										292523,
										292528
									],
									[
										292716,
										292721
									],
									[
										292934,
										292939
									],
									[
										293378,
										293383
									],
									[
										293418,
										293423
									],
									[
										293440,
										293445
									],
									[
										293715,
										293720
									],
									[
										294430,
										294435
									],
									[
										294517,
										294522
									],
									[
										294680,
										294685
									],
									[
										294994,
										294999
									],
									[
										295132,
										295137
									],
									[
										295462,
										295467
									],
									[
										295530,
										295535
									],
									[
										295715,
										295720
									],
									[
										295920,
										295925
									],
									[
										296238,
										296243
									],
									[
										296352,
										296357
									],
									[
										296365,
										296370
									],
									[
										296604,
										296609
									],
									[
										296626,
										296631
									],
									[
										296646,
										296651
									],
									[
										296674,
										296679
									],
									[
										296835,
										296840
									],
									[
										296994,
										296999
									],
									[
										297008,
										297013
									],
									[
										297078,
										297083
									],
									[
										297143,
										297148
									],
									[
										297213,
										297218
									],
									[
										297221,
										297226
									],
									[
										297298,
										297303
									],
									[
										297340,
										297345
									],
									[
										297419,
										297424
									],
									[
										297489,
										297494
									],
									[
										297497,
										297502
									],
									[
										297553,
										297558
									],
									[
										297595,
										297600
									],
									[
										297654,
										297659
									],
									[
										297724,
										297729
									],
									[
										297732,
										297737
									],
									[
										297820,
										297825
									],
									[
										298062,
										298067
									],
									[
										298210,
										298215
									],
									[
										298251,
										298256
									],
									[
										298271,
										298276
									],
									[
										298368,
										298373
									],
									[
										298381,
										298386
									],
									[
										298426,
										298431
									],
									[
										298446,
										298451
									],
									[
										298621,
										298626
									],
									[
										298640,
										298645
									],
									[
										298652,
										298657
									],
									[
										298693,
										298698
									],
									[
										298713,
										298718
									],
									[
										298826,
										298831
									],
									[
										298920,
										298925
									],
									[
										298940,
										298945
									],
									[
										298972,
										298977
									],
									[
										298992,
										298997
									],
									[
										299101,
										299106
									],
									[
										299120,
										299125
									],
									[
										299152,
										299157
									],
									[
										299172,
										299177
									],
									[
										299332,
										299337
									],
									[
										299409,
										299414
									],
									[
										299584,
										299589
									],
									[
										299604,
										299609
									],
									[
										299830,
										299835
									],
									[
										300247,
										300252
									],
									[
										300286,
										300291
									],
									[
										300319,
										300324
									],
									[
										300578,
										300583
									],
									[
										300598,
										300603
									],
									[
										300705,
										300710
									],
									[
										300748,
										300753
									],
									[
										300809,
										300814
									],
									[
										300829,
										300834
									],
									[
										300847,
										300852
									],
									[
										300982,
										300987
									],
									[
										301269,
										301274
									],
									[
										301304,
										301309
									],
									[
										301357,
										301362
									],
									[
										301377,
										301382
									],
									[
										301493,
										301498
									],
									[
										301812,
										301817
									],
									[
										301841,
										301846
									],
									[
										301913,
										301918
									],
									[
										301933,
										301938
									],
									[
										302335,
										302340
									],
									[
										302511,
										302516
									],
									[
										302542,
										302547
									],
									[
										302650,
										302655
									],
									[
										302737,
										302742
									],
									[
										302757,
										302762
									],
									[
										302878,
										302883
									],
									[
										303032,
										303037
									],
									[
										303296,
										303301
									],
									[
										303344,
										303349
									],
									[
										303390,
										303395
									],
									[
										303445,
										303450
									],
									[
										303501,
										303506
									],
									[
										303547,
										303552
									],
									[
										303609,
										303614
									],
									[
										303663,
										303668
									],
									[
										303695,
										303700
									],
									[
										303725,
										303730
									],
									[
										303789,
										303794
									],
									[
										303856,
										303861
									],
									[
										303902,
										303907
									],
									[
										303932,
										303937
									],
									[
										304004,
										304009
									],
									[
										304051,
										304056
									],
									[
										304138,
										304143
									],
									[
										304384,
										304389
									],
									[
										304398,
										304403
									],
									[
										304453,
										304458
									],
									[
										304489,
										304494
									],
									[
										304514,
										304519
									],
									[
										304556,
										304561
									],
									[
										304598,
										304603
									],
									[
										304735,
										304740
									],
									[
										304786,
										304791
									],
									[
										304800,
										304805
									],
									[
										304940,
										304945
									],
									[
										304961,
										304966
									],
									[
										304992,
										304997
									],
									[
										305041,
										305046
									],
									[
										305192,
										305197
									],
									[
										305214,
										305219
									],
									[
										305314,
										305319
									],
									[
										305371,
										305376
									],
									[
										305449,
										305454
									],
									[
										305458,
										305463
									],
									[
										305501,
										305506
									],
									[
										305536,
										305541
									],
									[
										305548,
										305553
									],
									[
										305594,
										305599
									],
									[
										305772,
										305777
									],
									[
										305821,
										305826
									],
									[
										305853,
										305858
									],
									[
										305913,
										305918
									],
									[
										305958,
										305963
									],
									[
										305999,
										306004
									],
									[
										306050,
										306055
									],
									[
										306098,
										306103
									],
									[
										306136,
										306141
									],
									[
										306156,
										306161
									],
									[
										306297,
										306302
									],
									[
										306314,
										306319
									],
									[
										306337,
										306342
									],
									[
										306404,
										306409
									],
									[
										306586,
										306591
									],
									[
										306752,
										306757
									],
									[
										307250,
										307255
									],
									[
										307507,
										307512
									],
									[
										307705,
										307710
									],
									[
										307959,
										307964
									],
									[
										308242,
										308247
									],
									[
										308594,
										308599
									],
									[
										308870,
										308875
									],
									[
										308943,
										308948
									],
									[
										309143,
										309148
									],
									[
										309318,
										309323
									],
									[
										309462,
										309467
									],
									[
										309940,
										309945
									],
									[
										310117,
										310122
									],
									[
										310445,
										310450
									],
									[
										310673,
										310678
									],
									[
										310715,
										310720
									],
									[
										310754,
										310759
									],
									[
										310820,
										310825
									],
									[
										310950,
										310955
									],
									[
										310988,
										310993
									],
									[
										311008,
										311013
									],
									[
										311315,
										311320
									],
									[
										311477,
										311482
									],
									[
										311507,
										311512
									],
									[
										311687,
										311692
									],
									[
										311860,
										311865
									],
									[
										312033,
										312038
									],
									[
										312067,
										312072
									],
									[
										312157,
										312162
									],
									[
										312228,
										312233
									],
									[
										312248,
										312253
									],
									[
										312266,
										312271
									],
									[
										312378,
										312383
									],
									[
										312516,
										312521
									],
									[
										312587,
										312592
									],
									[
										312611,
										312616
									],
									[
										312649,
										312654
									],
									[
										312671,
										312676
									],
									[
										312867,
										312872
									],
									[
										312887,
										312892
									],
									[
										312995,
										313000
									],
									[
										313196,
										313201
									],
									[
										313327,
										313332
									],
									[
										313347,
										313352
									],
									[
										313511,
										313516
									],
									[
										313582,
										313587
									],
									[
										313660,
										313665
									],
									[
										313907,
										313912
									],
									[
										314092,
										314097
									],
									[
										314112,
										314117
									],
									[
										314326,
										314331
									],
									[
										314351,
										314356
									],
									[
										314387,
										314392
									],
									[
										314412,
										314417
									],
									[
										314466,
										314471
									],
									[
										314504,
										314509
									],
									[
										314589,
										314594
									],
									[
										314629,
										314634
									],
									[
										314716,
										314721
									],
									[
										314757,
										314762
									],
									[
										314944,
										314949
									],
									[
										314979,
										314984
									],
									[
										315231,
										315236
									],
									[
										315351,
										315356
									],
									[
										315592,
										315597
									],
									[
										315666,
										315671
									],
									[
										315825,
										315830
									],
									[
										316020,
										316025
									],
									[
										316220,
										316225
									],
									[
										316570,
										316575
									],
									[
										316707,
										316712
									],
									[
										316956,
										316961
									],
									[
										316997,
										317002
									],
									[
										317333,
										317338
									],
									[
										317371,
										317376
									],
									[
										317391,
										317396
									],
									[
										317475,
										317480
									],
									[
										317555,
										317560
									],
									[
										317614,
										317619
									],
									[
										317732,
										317737
									],
									[
										317770,
										317775
									],
									[
										317820,
										317825
									],
									[
										317989,
										317994
									],
									[
										318238,
										318243
									],
									[
										318436,
										318441
									],
									[
										318526,
										318531
									],
									[
										318743,
										318748
									],
									[
										318779,
										318784
									],
									[
										318799,
										318804
									],
									[
										318863,
										318868
									],
									[
										318954,
										318959
									],
									[
										319128,
										319133
									],
									[
										319252,
										319257
									],
									[
										319541,
										319546
									],
									[
										319693,
										319698
									],
									[
										319916,
										319921
									],
									[
										320162,
										320167
									],
									[
										320379,
										320384
									],
									[
										320436,
										320441
									],
									[
										320456,
										320461
									],
									[
										320640,
										320645
									],
									[
										320660,
										320665
									],
									[
										320678,
										320683
									],
									[
										320700,
										320705
									],
									[
										320791,
										320796
									],
									[
										321078,
										321083
									],
									[
										321209,
										321214
									],
									[
										321329,
										321334
									],
									[
										321469,
										321474
									],
									[
										321586,
										321591
									],
									[
										321606,
										321611
									],
									[
										321624,
										321629
									],
									[
										321848,
										321853
									],
									[
										322022,
										322027
									],
									[
										322137,
										322142
									],
									[
										322157,
										322162
									],
									[
										322175,
										322180
									],
									[
										322377,
										322382
									],
									[
										322722,
										322727
									],
									[
										323018,
										323023
									],
									[
										323038,
										323043
									],
									[
										323056,
										323061
									],
									[
										323389,
										323394
									],
									[
										323573,
										323578
									],
									[
										323765,
										323770
									],
									[
										323877,
										323882
									],
									[
										324047,
										324052
									],
									[
										324182,
										324187
									],
									[
										324284,
										324289
									],
									[
										324418,
										324423
									],
									[
										324509,
										324514
									],
									[
										324529,
										324534
									],
									[
										324547,
										324552
									],
									[
										324739,
										324744
									],
									[
										324785,
										324790
									],
									[
										324837,
										324842
									],
									[
										324930,
										324935
									],
									[
										324965,
										324970
									],
									[
										325014,
										325019
									],
									[
										325080,
										325085
									],
									[
										325100,
										325105
									],
									[
										325118,
										325123
									],
									[
										325361,
										325366
									],
									[
										325392,
										325397
									],
									[
										325524,
										325529
									],
									[
										325544,
										325549
									],
									[
										325728,
										325733
									],
									[
										325976,
										325981
									],
									[
										326115,
										326120
									],
									[
										326135,
										326140
									],
									[
										326153,
										326158
									],
									[
										326642,
										326647
									],
									[
										326728,
										326733
									],
									[
										326748,
										326753
									],
									[
										326838,
										326843
									],
									[
										326974,
										326979
									],
									[
										327086,
										327091
									],
									[
										327346,
										327351
									],
									[
										327446,
										327451
									],
									[
										327466,
										327471
									],
									[
										327484,
										327489
									],
									[
										327592,
										327597
									],
									[
										327643,
										327648
									],
									[
										327663,
										327668
									],
									[
										327753,
										327758
									],
									[
										327807,
										327812
									],
									[
										327827,
										327832
									],
									[
										327906,
										327911
									],
									[
										328073,
										328078
									],
									[
										328143,
										328148
									],
									[
										328184,
										328189
									],
									[
										328252,
										328257
									],
									[
										328271,
										328276
									],
									[
										328333,
										328338
									],
									[
										328369,
										328374
									],
									[
										328421,
										328426
									],
									[
										328571,
										328576
									],
									[
										328612,
										328617
									],
									[
										328672,
										328677
									],
									[
										328740,
										328745
									],
									[
										328760,
										328765
									],
									[
										328927,
										328932
									],
									[
										328983,
										328988
									],
									[
										329003,
										329008
									],
									[
										329170,
										329175
									],
									[
										329221,
										329226
									],
									[
										329241,
										329246
									],
									[
										329395,
										329400
									],
									[
										329462,
										329467
									],
									[
										329482,
										329487
									],
									[
										329659,
										329664
									],
									[
										329714,
										329719
									],
									[
										329734,
										329739
									],
									[
										329892,
										329897
									],
									[
										329952,
										329957
									],
									[
										329972,
										329977
									],
									[
										330135,
										330140
									],
									[
										330212,
										330217
									],
									[
										330232,
										330237
									],
									[
										330392,
										330397
									],
									[
										330441,
										330446
									],
									[
										330622,
										330627
									],
									[
										330684,
										330689
									],
									[
										330704,
										330709
									],
									[
										330876,
										330881
									],
									[
										330955,
										330960
									],
									[
										330975,
										330980
									],
									[
										331131,
										331136
									],
									[
										331190,
										331195
									],
									[
										331210,
										331215
									],
									[
										331393,
										331398
									],
									[
										331410,
										331415
									],
									[
										331462,
										331467
									],
									[
										331511,
										331516
									],
									[
										331533,
										331538
									],
									[
										331584,
										331589
									],
									[
										331647,
										331652
									],
									[
										331712,
										331717
									],
									[
										331792,
										331797
									],
									[
										331854,
										331859
									],
									[
										331931,
										331936
									],
									[
										331974,
										331979
									],
									[
										332104,
										332109
									],
									[
										332151,
										332156
									],
									[
										332276,
										332281
									],
									[
										332318,
										332323
									],
									[
										332338,
										332343
									],
									[
										332400,
										332405
									],
									[
										332553,
										332558
									],
									[
										332697,
										332702
									],
									[
										332751,
										332756
									],
									[
										332777,
										332782
									],
									[
										332842,
										332847
									],
									[
										332895,
										332900
									],
									[
										332946,
										332951
									],
									[
										332989,
										332994
									],
									[
										333301,
										333306
									],
									[
										333350,
										333355
									],
									[
										333370,
										333375
									],
									[
										333523,
										333528
									],
									[
										333567,
										333572
									],
									[
										333691,
										333696
									],
									[
										333735,
										333740
									],
									[
										333859,
										333864
									],
									[
										333904,
										333909
									],
									[
										334034,
										334039
									],
									[
										334134,
										334139
									],
									[
										334432,
										334437
									],
									[
										334502,
										334507
									],
									[
										334522,
										334527
									],
									[
										334633,
										334638
									],
									[
										334771,
										334776
									],
									[
										334791,
										334796
									],
									[
										335036,
										335041
									],
									[
										335078,
										335083
									],
									[
										335103,
										335108
									],
									[
										335128,
										335133
									],
									[
										335156,
										335161
									],
									[
										335180,
										335185
									],
									[
										335206,
										335211
									],
									[
										335239,
										335244
									],
									[
										335285,
										335290
									],
									[
										335354,
										335359
									],
									[
										335436,
										335441
									],
									[
										335524,
										335529
									],
									[
										335586,
										335591
									],
									[
										335618,
										335623
									],
									[
										335638,
										335643
									],
									[
										336178,
										336183
									],
									[
										336213,
										336218
									],
									[
										336294,
										336299
									],
									[
										336314,
										336319
									],
									[
										336332,
										336337
									],
									[
										336382,
										336387
									],
									[
										336491,
										336496
									],
									[
										336517,
										336522
									],
									[
										336842,
										336847
									],
									[
										336899,
										336904
									],
									[
										337012,
										337017
									],
									[
										337032,
										337037
									],
									[
										337204,
										337209
									],
									[
										337371,
										337376
									],
									[
										337447,
										337452
									],
									[
										337555,
										337560
									],
									[
										337618,
										337623
									],
									[
										337638,
										337643
									],
									[
										337726,
										337731
									],
									[
										337840,
										337845
									],
									[
										338014,
										338019
									],
									[
										338034,
										338039
									],
									[
										338086,
										338091
									],
									[
										338175,
										338180
									],
									[
										338323,
										338328
									],
									[
										338411,
										338416
									],
									[
										338431,
										338436
									],
									[
										338573,
										338578
									],
									[
										338620,
										338625
									],
									[
										338640,
										338645
									],
									[
										338993,
										338998
									],
									[
										339168,
										339173
									],
									[
										339188,
										339193
									],
									[
										339466,
										339471
									],
									[
										339516,
										339521
									],
									[
										339536,
										339541
									],
									[
										339554,
										339559
									],
									[
										339610,
										339615
									],
									[
										339730,
										339735
									],
									[
										339750,
										339755
									],
									[
										339798,
										339803
									],
									[
										339835,
										339840
									],
									[
										339858,
										339863
									],
									[
										339886,
										339891
									],
									[
										339910,
										339915
									],
									[
										339936,
										339941
									],
									[
										339969,
										339974
									],
									[
										340061,
										340066
									],
									[
										340410,
										340415
									],
									[
										340476,
										340481
									],
									[
										340549,
										340554
									],
									[
										340711,
										340716
									],
									[
										340794,
										340799
									],
									[
										340857,
										340862
									],
									[
										340888,
										340893
									],
									[
										341143,
										341148
									],
									[
										341203,
										341208
									],
									[
										341258,
										341263
									],
									[
										341308,
										341313
									],
									[
										341328,
										341333
									],
									[
										341346,
										341351
									],
									[
										341402,
										341407
									],
									[
										341520,
										341525
									],
									[
										341557,
										341562
									],
									[
										341580,
										341585
									],
									[
										341603,
										341608
									],
									[
										341631,
										341636
									],
									[
										341691,
										341696
									],
									[
										341895,
										341900
									],
									[
										342012,
										342017
									],
									[
										342050,
										342055
									],
									[
										342129,
										342134
									],
									[
										342221,
										342226
									],
									[
										342268,
										342273
									],
									[
										342315,
										342320
									],
									[
										342355,
										342360
									],
									[
										342617,
										342622
									],
									[
										342792,
										342797
									],
									[
										342983,
										342988
									],
									[
										343186,
										343191
									],
									[
										343235,
										343240
									],
									[
										343285,
										343290
									],
									[
										343307,
										343312
									],
									[
										343345,
										343350
									],
									[
										343370,
										343375
									],
									[
										343398,
										343403
									],
									[
										343424,
										343429
									],
									[
										343457,
										343462
									],
									[
										343535,
										343540
									],
									[
										343718,
										343723
									],
									[
										344001,
										344006
									],
									[
										344169,
										344174
									],
									[
										344364,
										344369
									],
									[
										344452,
										344457
									],
									[
										344498,
										344503
									],
									[
										344535,
										344540
									],
									[
										344625,
										344630
									],
									[
										344700,
										344705
									],
									[
										344750,
										344755
									],
									[
										344915,
										344920
									],
									[
										344933,
										344938
									],
									[
										344982,
										344987
									],
									[
										345123,
										345128
									],
									[
										345161,
										345166
									],
									[
										345248,
										345253
									],
									[
										345358,
										345363
									],
									[
										345440,
										345445
									],
									[
										345729,
										345734
									],
									[
										345928,
										345933
									],
									[
										346034,
										346039
									],
									[
										346226,
										346231
									],
									[
										346249,
										346254
									],
									[
										346281,
										346286
									],
									[
										346331,
										346336
									],
									[
										346351,
										346356
									],
									[
										346375,
										346380
									],
									[
										346415,
										346420
									],
									[
										346437,
										346442
									],
									[
										346474,
										346479
									],
									[
										346505,
										346510
									],
									[
										346525,
										346530
									],
									[
										346593,
										346598
									],
									[
										346613,
										346618
									],
									[
										346681,
										346686
									],
									[
										346735,
										346740
									],
									[
										346781,
										346786
									],
									[
										346807,
										346812
									],
									[
										346892,
										346897
									],
									[
										346935,
										346940
									],
									[
										346965,
										346970
									],
									[
										346999,
										347004
									],
									[
										347154,
										347159
									],
									[
										347397,
										347402
									],
									[
										347417,
										347422
									],
									[
										347875,
										347880
									],
									[
										347896,
										347901
									],
									[
										348087,
										348092
									],
									[
										348100,
										348105
									],
									[
										348267,
										348272
									],
									[
										348287,
										348292
									],
									[
										348305,
										348310
									],
									[
										348467,
										348472
									],
									[
										348527,
										348532
									],
									[
										348571,
										348576
									],
									[
										348591,
										348596
									],
									[
										348660,
										348665
									],
									[
										348683,
										348688
									],
									[
										348696,
										348701
									],
									[
										348719,
										348724
									],
									[
										348770,
										348775
									],
									[
										348854,
										348859
									],
									[
										349151,
										349156
									],
									[
										349346,
										349351
									],
									[
										349428,
										349433
									],
									[
										349515,
										349520
									],
									[
										349669,
										349674
									],
									[
										349839,
										349844
									],
									[
										350011,
										350016
									],
									[
										350234,
										350239
									],
									[
										350292,
										350297
									],
									[
										350312,
										350317
									],
									[
										350478,
										350483
									],
									[
										350711,
										350716
									],
									[
										350742,
										350747
									],
									[
										350923,
										350928
									],
									[
										351677,
										351682
									],
									[
										351977,
										351982
									],
									[
										352042,
										352047
									],
									[
										352087,
										352092
									],
									[
										352138,
										352143
									],
									[
										352227,
										352232
									],
									[
										352321,
										352326
									],
									[
										352365,
										352370
									],
									[
										352385,
										352390
									],
									[
										352409,
										352414
									],
									[
										352598,
										352603
									],
									[
										352685,
										352690
									],
									[
										352704,
										352709
									],
									[
										352741,
										352746
									],
									[
										352800,
										352805
									],
									[
										352851,
										352856
									],
									[
										352877,
										352882
									],
									[
										352991,
										352996
									],
									[
										353138,
										353143
									],
									[
										353328,
										353333
									],
									[
										353452,
										353457
									],
									[
										353735,
										353740
									],
									[
										353972,
										353977
									],
									[
										354024,
										354029
									],
									[
										354552,
										354557
									],
									[
										355046,
										355051
									],
									[
										355066,
										355071
									],
									[
										355094,
										355099
									],
									[
										355328,
										355333
									],
									[
										355727,
										355732
									],
									[
										355973,
										355978
									],
									[
										356252,
										356257
									],
									[
										356474,
										356479
									],
									[
										356505,
										356510
									],
									[
										356776,
										356781
									],
									[
										356820,
										356825
									],
									[
										356846,
										356851
									],
									[
										357185,
										357190
									],
									[
										357557,
										357562
									],
									[
										357599,
										357604
									],
									[
										357840,
										357845
									],
									[
										358093,
										358098
									],
									[
										358118,
										358123
									],
									[
										358266,
										358271
									],
									[
										358553,
										358558
									],
									[
										358597,
										358602
									],
									[
										358639,
										358644
									],
									[
										358670,
										358675
									],
									[
										358698,
										358703
									],
									[
										358876,
										358881
									],
									[
										359361,
										359366
									],
									[
										359403,
										359408
									],
									[
										359582,
										359587
									],
									[
										359939,
										359944
									],
									[
										360248,
										360253
									],
									[
										360624,
										360629
									],
									[
										360812,
										360817
									],
									[
										361057,
										361062
									],
									[
										361100,
										361105
									],
									[
										361423,
										361428
									],
									[
										361760,
										361765
									],
									[
										362194,
										362199
									],
									[
										362543,
										362548
									],
									[
										362919,
										362924
									],
									[
										362962,
										362967
									],
									[
										363487,
										363492
									],
									[
										363526,
										363531
									],
									[
										363767,
										363772
									],
									[
										363945,
										363950
									],
									[
										364185,
										364190
									],
									[
										364456,
										364461
									],
									[
										364748,
										364753
									],
									[
										364858,
										364863
									],
									[
										365163,
										365168
									],
									[
										365331,
										365336
									],
									[
										365419,
										365424
									],
									[
										365457,
										365462
									],
									[
										365486,
										365491
									],
									[
										365603,
										365608
									],
									[
										365925,
										365930
									],
									[
										366385,
										366390
									],
									[
										366596,
										366601
									],
									[
										366719,
										366724
									],
									[
										366800,
										366805
									],
									[
										366981,
										366986
									],
									[
										367023,
										367028
									],
									[
										367262,
										367267
									],
									[
										367389,
										367394
									],
									[
										367413,
										367418
									],
									[
										367464,
										367469
									],
									[
										367535,
										367540
									],
									[
										367590,
										367595
									],
									[
										367633,
										367638
									],
									[
										367701,
										367706
									],
									[
										367756,
										367761
									],
									[
										367830,
										367835
									],
									[
										368244,
										368249
									],
									[
										368275,
										368280
									],
									[
										368293,
										368298
									],
									[
										368316,
										368321
									],
									[
										368415,
										368420
									],
									[
										368649,
										368654
									],
									[
										368674,
										368679
									],
									[
										368710,
										368715
									],
									[
										368730,
										368735
									],
									[
										368823,
										368828
									],
									[
										368974,
										368979
									],
									[
										369115,
										369120
									],
									[
										369247,
										369252
									],
									[
										369277,
										369282
									],
									[
										369332,
										369337
									],
									[
										369352,
										369357
									],
									[
										369569,
										369574
									],
									[
										369758,
										369763
									],
									[
										369933,
										369938
									],
									[
										370075,
										370080
									],
									[
										370148,
										370153
									],
									[
										370315,
										370320
									],
									[
										370541,
										370546
									],
									[
										370850,
										370855
									],
									[
										371210,
										371215
									],
									[
										371282,
										371287
									],
									[
										371311,
										371316
									],
									[
										371350,
										371355
									],
									[
										371484,
										371489
									],
									[
										371693,
										371698
									],
									[
										372121,
										372126
									],
									[
										372631,
										372636
									],
									[
										372667,
										372672
									],
									[
										372963,
										372968
									],
									[
										373040,
										373045
									],
									[
										373191,
										373196
									],
									[
										373512,
										373517
									],
									[
										373545,
										373550
									],
									[
										373565,
										373570
									],
									[
										373583,
										373588
									],
									[
										373785,
										373790
									],
									[
										374102,
										374107
									],
									[
										374492,
										374497
									],
									[
										374550,
										374555
									],
									[
										374570,
										374575
									],
									[
										374594,
										374599
									],
									[
										374640,
										374645
									],
									[
										375038,
										375043
									],
									[
										375159,
										375164
									],
									[
										375349,
										375354
									],
									[
										375397,
										375402
									],
									[
										375499,
										375504
									],
									[
										375549,
										375554
									],
									[
										375578,
										375583
									],
									[
										375629,
										375634
									],
									[
										375714,
										375719
									],
									[
										375733,
										375738
									],
									[
										376091,
										376096
									],
									[
										376435,
										376440
									],
									[
										376580,
										376585
									],
									[
										376606,
										376611
									],
									[
										376647,
										376652
									],
									[
										376679,
										376684
									],
									[
										377064,
										377069
									],
									[
										377083,
										377088
									],
									[
										377124,
										377129
									],
									[
										377144,
										377149
									],
									[
										377363,
										377368
									],
									[
										377680,
										377685
									],
									[
										377861,
										377866
									],
									[
										377920,
										377925
									],
									[
										378224,
										378229
									],
									[
										378246,
										378251
									],
									[
										378290,
										378295
									],
									[
										378311,
										378316
									],
									[
										378380,
										378385
									],
									[
										378710,
										378715
									],
									[
										378752,
										378757
									],
									[
										379004,
										379009
									],
									[
										379047,
										379052
									],
									[
										379226,
										379231
									],
									[
										379246,
										379251
									],
									[
										379414,
										379419
									],
									[
										379434,
										379439
									],
									[
										379661,
										379666
									],
									[
										379711,
										379716
									],
									[
										379731,
										379736
									],
									[
										379836,
										379841
									],
									[
										379873,
										379878
									],
									[
										379893,
										379898
									],
									[
										380024,
										380029
									],
									[
										380101,
										380106
									],
									[
										380316,
										380321
									],
									[
										380367,
										380372
									],
									[
										380634,
										380639
									],
									[
										380691,
										380696
									],
									[
										380866,
										380871
									],
									[
										380911,
										380916
									],
									[
										381155,
										381160
									],
									[
										381216,
										381221
									],
									[
										381397,
										381402
									],
									[
										381441,
										381446
									],
									[
										381681,
										381686
									],
									[
										381703,
										381708
									],
									[
										381756,
										381761
									],
									[
										381776,
										381781
									],
									[
										381794,
										381799
									],
									[
										381931,
										381936
									],
									[
										381983,
										381988
									],
									[
										382003,
										382008
									],
									[
										382067,
										382072
									],
									[
										382259,
										382264
									],
									[
										382297,
										382302
									],
									[
										382434,
										382439
									],
									[
										382498,
										382503
									],
									[
										382530,
										382535
									],
									[
										382576,
										382581
									],
									[
										382617,
										382622
									],
									[
										382652,
										382657
									],
									[
										382693,
										382698
									],
									[
										382736,
										382741
									],
									[
										382777,
										382782
									],
									[
										382821,
										382826
									],
									[
										382862,
										382867
									],
									[
										382905,
										382910
									],
									[
										382946,
										382951
									],
									[
										382995,
										383000
									],
									[
										383036,
										383041
									],
									[
										383078,
										383083
									],
									[
										383119,
										383124
									],
									[
										383162,
										383167
									],
									[
										383203,
										383208
									],
									[
										383244,
										383249
									],
									[
										383285,
										383290
									],
									[
										383331,
										383336
									],
									[
										383372,
										383377
									],
									[
										383415,
										383420
									],
									[
										383456,
										383461
									],
									[
										383497,
										383502
									],
									[
										383538,
										383543
									],
									[
										383608,
										383613
									],
									[
										383643,
										383648
									],
									[
										383710,
										383715
									],
									[
										383801,
										383806
									],
									[
										383821,
										383826
									],
									[
										383877,
										383882
									],
									[
										383962,
										383967
									],
									[
										384072,
										384077
									],
									[
										384104,
										384109
									],
									[
										384218,
										384223
									],
									[
										384238,
										384243
									],
									[
										384302,
										384307
									],
									[
										384387,
										384392
									],
									[
										384500,
										384505
									],
									[
										384532,
										384537
									],
									[
										384646,
										384651
									],
									[
										384696,
										384701
									],
									[
										384716,
										384721
									],
									[
										384780,
										384785
									],
									[
										384850,
										384855
									],
									[
										384941,
										384946
									],
									[
										385063,
										385068
									],
									[
										385212,
										385217
									],
									[
										385397,
										385402
									],
									[
										385420,
										385425
									],
									[
										385499,
										385504
									],
									[
										385523,
										385528
									],
									[
										385602,
										385607
									],
									[
										385648,
										385653
									],
									[
										385710,
										385715
									],
									[
										385764,
										385769
									],
									[
										385828,
										385833
									],
									[
										385880,
										385885
									],
									[
										385930,
										385935
									],
									[
										385992,
										385997
									],
									[
										386044,
										386049
									],
									[
										386110,
										386115
									],
									[
										386174,
										386179
									],
									[
										386226,
										386231
									],
									[
										386296,
										386301
									],
									[
										386360,
										386365
									],
									[
										386416,
										386421
									],
									[
										386476,
										386481
									],
									[
										386540,
										386545
									],
									[
										386618,
										386623
									],
									[
										386694,
										386699
									],
									[
										386746,
										386751
									],
									[
										386802,
										386807
									],
									[
										386860,
										386865
									],
									[
										386930,
										386935
									],
									[
										386980,
										386985
									],
									[
										387044,
										387049
									],
									[
										387106,
										387111
									],
									[
										387156,
										387161
									],
									[
										387220,
										387225
									],
									[
										387282,
										387287
									],
									[
										387332,
										387337
									],
									[
										387396,
										387401
									],
									[
										387458,
										387463
									],
									[
										387516,
										387521
									],
									[
										387588,
										387593
									],
									[
										387658,
										387663
									],
									[
										387718,
										387723
									],
									[
										387792,
										387797
									],
									[
										387864,
										387869
									],
									[
										387920,
										387925
									],
									[
										387990,
										387995
									],
									[
										388054,
										388059
									],
									[
										388132,
										388137
									],
									[
										388198,
										388203
									],
									[
										388333,
										388338
									],
									[
										388378,
										388383
									],
									[
										388398,
										388403
									],
									[
										388537,
										388542
									],
									[
										388582,
										388587
									],
									[
										388602,
										388607
									],
									[
										388692,
										388697
									],
									[
										388741,
										388746
									],
									[
										388761,
										388766
									],
									[
										388863,
										388868
									],
									[
										388922,
										388927
									],
									[
										388942,
										388947
									],
									[
										389075,
										389080
									],
									[
										389134,
										389139
									],
									[
										389154,
										389159
									],
									[
										389335,
										389340
									],
									[
										389379,
										389384
									],
									[
										389402,
										389407
									],
									[
										389488,
										389493
									],
									[
										389533,
										389538
									],
									[
										389556,
										389561
									],
									[
										389643,
										389648
									],
									[
										389685,
										389690
									],
									[
										389705,
										389710
									],
									[
										389723,
										389728
									],
									[
										389846,
										389851
									],
									[
										390009,
										390014
									],
									[
										390049,
										390054
									],
									[
										390302,
										390307
									],
									[
										390322,
										390327
									],
									[
										390350,
										390355
									],
									[
										390471,
										390476
									],
									[
										390510,
										390515
									],
									[
										390549,
										390554
									],
									[
										390668,
										390673
									],
									[
										390725,
										390730
									],
									[
										390768,
										390773
									],
									[
										390893,
										390898
									],
									[
										390936,
										390941
									],
									[
										391064,
										391069
									],
									[
										391105,
										391110
									],
									[
										391360,
										391365
									],
									[
										391380,
										391385
									],
									[
										391408,
										391413
									],
									[
										391494,
										391499
									],
									[
										391535,
										391540
									],
									[
										391589,
										391594
									],
									[
										391653,
										391658
									],
									[
										391712,
										391717
									],
									[
										391751,
										391756
									],
									[
										391925,
										391930
									],
									[
										391962,
										391967
									],
									[
										392227,
										392232
									],
									[
										392247,
										392252
									],
									[
										392275,
										392280
									],
									[
										392361,
										392366
									],
									[
										392403,
										392408
									],
									[
										392462,
										392467
									],
									[
										392531,
										392536
									],
									[
										392586,
										392591
									],
									[
										392648,
										392653
									],
									[
										392708,
										392713
									],
									[
										392747,
										392752
									],
									[
										392905,
										392910
									],
									[
										392962,
										392967
									],
									[
										393014,
										393019
									],
									[
										393116,
										393121
									],
									[
										393250,
										393255
									],
									[
										393293,
										393298
									],
									[
										393332,
										393337
									],
									[
										393352,
										393357
									],
									[
										393449,
										393454
									],
									[
										393499,
										393504
									],
									[
										393529,
										393534
									],
									[
										393568,
										393573
									],
									[
										393588,
										393593
									],
									[
										393708,
										393713
									],
									[
										393758,
										393763
									],
									[
										393803,
										393808
									],
									[
										393842,
										393847
									],
									[
										393862,
										393867
									],
									[
										393962,
										393967
									],
									[
										394012,
										394017
									],
									[
										394096,
										394101
									],
									[
										394194,
										394199
									],
									[
										394214,
										394219
									],
									[
										394380,
										394385
									],
									[
										394452,
										394457
									],
									[
										394472,
										394477
									],
									[
										394572,
										394577
									],
									[
										394622,
										394627
									],
									[
										394688,
										394693
									],
									[
										394708,
										394713
									],
									[
										394890,
										394895
									],
									[
										394940,
										394945
									],
									[
										394986,
										394991
									],
									[
										395025,
										395030
									],
									[
										395045,
										395050
									],
									[
										395160,
										395165
									],
									[
										395210,
										395215
									],
									[
										395258,
										395263
									],
									[
										395278,
										395283
									],
									[
										395402,
										395407
									],
									[
										395451,
										395456
									],
									[
										395634,
										395639
									],
									[
										395685,
										395690
									],
									[
										395841,
										395846
									],
									[
										396005,
										396010
									],
									[
										396060,
										396065
									],
									[
										396187,
										396192
									],
									[
										396242,
										396247
									],
									[
										396368,
										396373
									],
									[
										396425,
										396430
									],
									[
										396588,
										396593
									],
									[
										396635,
										396640
									],
									[
										396655,
										396660
									],
									[
										396722,
										396727
									],
									[
										396780,
										396785
									],
									[
										396800,
										396805
									],
									[
										396891,
										396896
									],
									[
										396950,
										396955
									],
									[
										396970,
										396975
									],
									[
										397099,
										397104
									],
									[
										397146,
										397151
									],
									[
										397256,
										397261
									],
									[
										397301,
										397306
									],
									[
										397344,
										397349
									],
									[
										397393,
										397398
									],
									[
										397441,
										397446
									],
									[
										397501,
										397506
									],
									[
										397558,
										397563
									],
									[
										397617,
										397622
									],
									[
										397637,
										397642
									],
									[
										397655,
										397660
									],
									[
										398158,
										398163
									],
									[
										398200,
										398205
									],
									[
										398347,
										398352
									],
									[
										398390,
										398395
									],
									[
										398543,
										398548
									],
									[
										398586,
										398591
									],
									[
										398738,
										398743
									],
									[
										398803,
										398808
									],
									[
										399041,
										399046
									],
									[
										399091,
										399096
									],
									[
										399333,
										399338
									],
									[
										399383,
										399388
									],
									[
										399627,
										399632
									],
									[
										399674,
										399679
									],
									[
										399810,
										399815
									],
									[
										399858,
										399863
									],
									[
										399973,
										399978
									],
									[
										400045,
										400050
									],
									[
										400254,
										400259
									],
									[
										400302,
										400307
									],
									[
										400364,
										400369
									],
									[
										400412,
										400417
									],
									[
										400474,
										400479
									],
									[
										400517,
										400522
									],
									[
										400683,
										400688
									],
									[
										400726,
										400731
									],
									[
										400891,
										400896
									],
									[
										400945,
										400950
									],
									[
										401115,
										401120
									],
									[
										401169,
										401174
									],
									[
										401453,
										401458
									],
									[
										401666,
										401671
									],
									[
										401992,
										401997
									],
									[
										402055,
										402060
									],
									[
										402207,
										402212
									],
									[
										402432,
										402437
									],
									[
										402492,
										402497
									],
									[
										402701,
										402706
									],
									[
										402724,
										402729
									],
									[
										402764,
										402769
									],
									[
										402904,
										402909
									],
									[
										402918,
										402923
									],
									[
										402963,
										402968
									],
									[
										403081,
										403086
									],
									[
										403145,
										403150
									],
									[
										403263,
										403268
									],
									[
										403283,
										403288
									],
									[
										403490,
										403495
									],
									[
										403593,
										403598
									],
									[
										403698,
										403703
									],
									[
										403805,
										403810
									],
									[
										403934,
										403939
									],
									[
										404021,
										404026
									],
									[
										404037,
										404042
									],
									[
										404057,
										404062
									],
									[
										404168,
										404173
									],
									[
										404279,
										404284
									],
									[
										404369,
										404374
									],
									[
										404584,
										404589
									],
									[
										404694,
										404699
									],
									[
										404777,
										404782
									],
									[
										404895,
										404900
									],
									[
										404915,
										404920
									],
									[
										405035,
										405040
									],
									[
										405094,
										405099
									],
									[
										405345,
										405350
									],
									[
										405365,
										405370
									],
									[
										405590,
										405595
									],
									[
										405678,
										405683
									],
									[
										405796,
										405801
									],
									[
										405816,
										405821
									],
									[
										405840,
										405845
									],
									[
										405956,
										405961
									],
									[
										406122,
										406127
									],
									[
										406257,
										406262
									],
									[
										406277,
										406282
									],
									[
										406299,
										406304
									],
									[
										406365,
										406370
									],
									[
										406481,
										406486
									],
									[
										406670,
										406675
									],
									[
										406710,
										406715
									],
									[
										406757,
										406762
									],
									[
										406801,
										406806
									],
									[
										406821,
										406826
									],
									[
										406839,
										406844
									],
									[
										406912,
										406917
									],
									[
										407058,
										407063
									],
									[
										407099,
										407104
									],
									[
										407133,
										407138
									],
									[
										407169,
										407174
									],
									[
										407239,
										407244
									],
									[
										407373,
										407378
									],
									[
										407511,
										407516
									],
									[
										407693,
										407698
									],
									[
										408244,
										408249
									],
									[
										408523,
										408528
									],
									[
										408594,
										408599
									],
									[
										408828,
										408833
									],
									[
										408948,
										408953
									],
									[
										409451,
										409456
									],
									[
										409702,
										409707
									],
									[
										409781,
										409786
									],
									[
										410215,
										410220
									],
									[
										410412,
										410417
									],
									[
										410471,
										410476
									],
									[
										410515,
										410520
									],
									[
										410639,
										410644
									],
									[
										410659,
										410664
									],
									[
										410683,
										410688
									],
									[
										410729,
										410734
									],
									[
										410912,
										410917
									],
									[
										411466,
										411471
									],
									[
										411686,
										411691
									],
									[
										411720,
										411725
									],
									[
										411745,
										411750
									],
									[
										412064,
										412069
									],
									[
										412118,
										412123
									],
									[
										412224,
										412229
									],
									[
										412442,
										412447
									],
									[
										412500,
										412505
									],
									[
										412520,
										412525
									],
									[
										412684,
										412689
									],
									[
										412838,
										412843
									],
									[
										413051,
										413056
									],
									[
										413138,
										413143
									],
									[
										413268,
										413273
									],
									[
										413518,
										413523
									],
									[
										413537,
										413542
									],
									[
										413602,
										413607
									],
									[
										413834,
										413839
									],
									[
										413873,
										413878
									],
									[
										413903,
										413908
									],
									[
										414247,
										414252
									],
									[
										414409,
										414414
									],
									[
										414482,
										414487
									],
									[
										414652,
										414657
									],
									[
										414863,
										414868
									],
									[
										415054,
										415059
									],
									[
										415178,
										415183
									],
									[
										415198,
										415203
									],
									[
										415222,
										415227
									],
									[
										415527,
										415532
									],
									[
										415689,
										415694
									],
									[
										415723,
										415728
									],
									[
										415748,
										415753
									],
									[
										415968,
										415973
									],
									[
										416000,
										416005
									],
									[
										416051,
										416056
									],
									[
										416071,
										416076
									],
									[
										416141,
										416146
									],
									[
										416274,
										416279
									],
									[
										416313,
										416318
									],
									[
										416387,
										416392
									],
									[
										416407,
										416412
									],
									[
										416477,
										416482
									],
									[
										416604,
										416609
									],
									[
										416642,
										416647
									],
									[
										416699,
										416704
									],
									[
										416719,
										416724
									],
									[
										416789,
										416794
									],
									[
										416910,
										416915
									],
									[
										416949,
										416954
									],
									[
										416969,
										416974
									],
									[
										417099,
										417104
									],
									[
										417139,
										417144
									],
									[
										417159,
										417164
									],
									[
										417242,
										417247
									],
									[
										417272,
										417277
									],
									[
										417284,
										417289
									],
									[
										417342,
										417347
									],
									[
										417531,
										417536
									],
									[
										417551,
										417556
									],
									[
										417569,
										417574
									],
									[
										417619,
										417624
									],
									[
										417808,
										417813
									],
									[
										417975,
										417980
									],
									[
										418002,
										418007
									],
									[
										418295,
										418300
									],
									[
										418636,
										418641
									],
									[
										418797,
										418802
									],
									[
										418821,
										418826
									],
									[
										418833,
										418838
									],
									[
										418921,
										418926
									],
									[
										419045,
										419050
									],
									[
										419065,
										419070
									],
									[
										419089,
										419094
									],
									[
										419165,
										419170
									],
									[
										419415,
										419420
									],
									[
										419722,
										419727
									],
									[
										419754,
										419759
									],
									[
										419798,
										419803
									],
									[
										419837,
										419842
									],
									[
										419900,
										419905
									],
									[
										419969,
										419974
									],
									[
										420019,
										420024
									],
									[
										420053,
										420058
									],
									[
										420239,
										420244
									],
									[
										420319,
										420324
									],
									[
										420352,
										420357
									],
									[
										420419,
										420424
									],
									[
										420608,
										420613
									],
									[
										420791,
										420796
									],
									[
										420956,
										420961
									],
									[
										420990,
										420995
									],
									[
										421015,
										421020
									],
									[
										421268,
										421273
									],
									[
										421393,
										421398
									],
									[
										421565,
										421570
									],
									[
										421813,
										421818
									],
									[
										422042,
										422047
									],
									[
										422151,
										422156
									],
									[
										422189,
										422194
									],
									[
										422331,
										422336
									],
									[
										422374,
										422379
									],
									[
										422420,
										422425
									],
									[
										422598,
										422603
									],
									[
										422636,
										422641
									],
									[
										422710,
										422715
									],
									[
										422767,
										422772
									],
									[
										422813,
										422818
									],
									[
										422972,
										422977
									],
									[
										423062,
										423067
									],
									[
										423100,
										423105
									],
									[
										423148,
										423153
									],
									[
										423415,
										423420
									],
									[
										423435,
										423440
									],
									[
										423787,
										423792
									],
									[
										423824,
										423829
									],
									[
										423870,
										423875
									],
									[
										424010,
										424015
									],
									[
										424049,
										424054
									],
									[
										424126,
										424131
									],
									[
										424250,
										424255
									],
									[
										424270,
										424275
									],
									[
										424517,
										424522
									],
									[
										424556,
										424561
									],
									[
										424633,
										424638
									],
									[
										424757,
										424762
									],
									[
										424777,
										424782
									],
									[
										425024,
										425029
									],
									[
										425183,
										425188
									],
									[
										425342,
										425347
									],
									[
										425380,
										425385
									],
									[
										425497,
										425502
									],
									[
										425535,
										425540
									],
									[
										425652,
										425657
									],
									[
										425779,
										425784
									],
									[
										425906,
										425911
									],
									[
										425961,
										425966
									],
									[
										426101,
										426106
									],
									[
										426152,
										426157
									],
									[
										426172,
										426177
									],
									[
										426364,
										426369
									],
									[
										426419,
										426424
									],
									[
										426439,
										426444
									],
									[
										426539,
										426544
									],
									[
										426580,
										426585
									],
									[
										426619,
										426624
									],
									[
										426639,
										426644
									],
									[
										426746,
										426751
									],
									[
										426796,
										426801
									],
									[
										426850,
										426855
									],
									[
										426982,
										426987
									],
									[
										427066,
										427071
									],
									[
										427216,
										427221
									],
									[
										427270,
										427275
									],
									[
										427402,
										427407
									],
									[
										427505,
										427510
									],
									[
										427637,
										427642
									],
									[
										427672,
										427677
									],
									[
										427777,
										427782
									],
									[
										427785,
										427790
									],
									[
										427846,
										427851
									],
									[
										427907,
										427912
									],
									[
										427915,
										427920
									],
									[
										428006,
										428011
									],
									[
										428085,
										428090
									],
									[
										428093,
										428098
									],
									[
										428154,
										428159
									],
									[
										428220,
										428225
									],
									[
										428256,
										428261
									],
									[
										428374,
										428379
									],
									[
										428394,
										428399
									],
									[
										428418,
										428423
									],
									[
										428781,
										428786
									],
									[
										428851,
										428856
									],
									[
										428969,
										428974
									],
									[
										428989,
										428994
									],
									[
										429013,
										429018
									],
									[
										429135,
										429140
									],
									[
										429279,
										429284
									],
									[
										429410,
										429415
									],
									[
										429541,
										429546
									],
									[
										429707,
										429712
									],
									[
										429833,
										429838
									],
									[
										430053,
										430058
									],
									[
										430187,
										430192
									],
									[
										430311,
										430316
									],
									[
										430497,
										430502
									],
									[
										430746,
										430751
									],
									[
										430933,
										430938
									],
									[
										431089,
										431094
									],
									[
										431348,
										431353
									],
									[
										431425,
										431430
									],
									[
										431466,
										431471
									],
									[
										431521,
										431526
									],
									[
										431541,
										431546
									],
									[
										431559,
										431564
									],
									[
										431956,
										431961
									],
									[
										431991,
										431996
									],
									[
										432189,
										432194
									],
									[
										432383,
										432388
									],
									[
										432542,
										432547
									],
									[
										432684,
										432689
									],
									[
										432730,
										432735
									],
									[
										432814,
										432819
									],
									[
										432858,
										432863
									],
									[
										432878,
										432883
									],
									[
										432896,
										432901
									],
									[
										432955,
										432960
									],
									[
										433080,
										433085
									],
									[
										433272,
										433277
									],
									[
										433640,
										433645
									],
									[
										433668,
										433673
									],
									[
										433843,
										433848
									],
									[
										433978,
										433983
									],
									[
										434102,
										434107
									],
									[
										434122,
										434127
									],
									[
										434146,
										434151
									],
									[
										434192,
										434197
									],
									[
										434454,
										434459
									],
									[
										434598,
										434603
									],
									[
										434754,
										434759
									],
									[
										434878,
										434883
									],
									[
										434898,
										434903
									],
									[
										434922,
										434927
									],
									[
										434968,
										434973
									],
									[
										435250,
										435255
									],
									[
										435440,
										435445
									],
									[
										435634,
										435639
									],
									[
										435804,
										435809
									],
									[
										436070,
										436075
									],
									[
										436222,
										436227
									],
									[
										436346,
										436351
									],
									[
										436366,
										436371
									],
									[
										436472,
										436477
									],
									[
										436710,
										436715
									],
									[
										436948,
										436953
									],
									[
										437186,
										437191
									],
									[
										437317,
										437322
									],
									[
										437441,
										437446
									],
									[
										437461,
										437466
									],
									[
										437567,
										437572
									],
									[
										437775,
										437780
									],
									[
										437983,
										437988
									],
									[
										438191,
										438196
									],
									[
										438235,
										438240
									],
									[
										438354,
										438359
									],
									[
										438374,
										438379
									],
									[
										438398,
										438403
									],
									[
										438526,
										438531
									],
									[
										438571,
										438576
									],
									[
										438597,
										438602
									],
									[
										438749,
										438754
									],
									[
										438897,
										438902
									],
									[
										439021,
										439026
									],
									[
										439041,
										439046
									],
									[
										439065,
										439070
									],
									[
										439111,
										439116
									],
									[
										439373,
										439378
									],
									[
										439499,
										439504
									],
									[
										439664,
										439669
									],
									[
										439788,
										439793
									],
									[
										439808,
										439813
									],
									[
										439914,
										439919
									],
									[
										440172,
										440177
									],
									[
										440430,
										440435
									],
									[
										440688,
										440693
									],
									[
										440908,
										440913
									],
									[
										441032,
										441037
									],
									[
										441052,
										441057
									],
									[
										441221,
										441226
									],
									[
										441404,
										441409
									],
									[
										441548,
										441553
									],
									[
										441672,
										441677
									],
									[
										441692,
										441697
									],
									[
										441798,
										441803
									],
									[
										442026,
										442031
									],
									[
										442254,
										442259
									],
									[
										442482,
										442487
									],
									[
										442679,
										442684
									],
									[
										442803,
										442808
									],
									[
										442823,
										442828
									],
									[
										442916,
										442921
									],
									[
										442930,
										442935
									],
									[
										443167,
										443172
									],
									[
										443285,
										443290
									],
									[
										443305,
										443310
									],
									[
										443329,
										443334
									],
									[
										443526,
										443531
									],
									[
										443710,
										443715
									],
									[
										443804,
										443809
									],
									[
										444119,
										444124
									],
									[
										444264,
										444269
									],
									[
										444629,
										444634
									],
									[
										444652,
										444657
									],
									[
										444673,
										444678
									],
									[
										444765,
										444770
									],
									[
										444788,
										444793
									],
									[
										444816,
										444821
									],
									[
										445218,
										445223
									],
									[
										445305,
										445310
									],
									[
										445517,
										445522
									],
									[
										445652,
										445657
									],
									[
										445760,
										445765
									],
									[
										445952,
										445957
									],
									[
										445991,
										445996
									],
									[
										446187,
										446192
									],
									[
										446392,
										446397
									],
									[
										446457,
										446462
									],
									[
										446625,
										446630
									],
									[
										446861,
										446866
									],
									[
										447017,
										447022
									],
									[
										447226,
										447231
									],
									[
										447291,
										447296
									],
									[
										447463,
										447468
									],
									[
										447703,
										447708
									],
									[
										447955,
										447960
									],
									[
										448055,
										448060
									],
									[
										448173,
										448178
									],
									[
										448193,
										448198
									],
									[
										448217,
										448222
									],
									[
										448422,
										448427
									],
									[
										448681,
										448686
									],
									[
										448871,
										448876
									],
									[
										448935,
										448940
									],
									[
										449059,
										449064
									],
									[
										449079,
										449084
									],
									[
										449103,
										449108
									],
									[
										449149,
										449154
									],
									[
										449386,
										449391
									],
									[
										449421,
										449426
									],
									[
										449447,
										449452
									],
									[
										449810,
										449815
									],
									[
										449909,
										449914
									],
									[
										450101,
										450106
									],
									[
										450172,
										450177
									],
									[
										450296,
										450301
									],
									[
										450316,
										450321
									],
									[
										450340,
										450345
									],
									[
										450386,
										450391
									],
									[
										450679,
										450684
									],
									[
										450714,
										450719
									],
									[
										450740,
										450745
									],
									[
										451046,
										451051
									],
									[
										451124,
										451129
									],
									[
										451250,
										451255
									],
									[
										451350,
										451355
									],
									[
										451429,
										451434
									],
									[
										451774,
										451779
									],
									[
										451825,
										451830
									],
									[
										452113,
										452118
									],
									[
										452617,
										452622
									],
									[
										452652,
										452657
									],
									[
										452671,
										452676
									],
									[
										452925,
										452930
									],
									[
										453240,
										453245
									],
									[
										453404,
										453409
									],
									[
										453743,
										453748
									],
									[
										453770,
										453775
									],
									[
										453964,
										453969
									],
									[
										454043,
										454048
									],
									[
										454206,
										454211
									],
									[
										454241,
										454246
									],
									[
										454280,
										454285
									],
									[
										454317,
										454322
									],
									[
										454392,
										454397
									],
									[
										454616,
										454621
									],
									[
										454828,
										454833
									],
									[
										455009,
										455014
									],
									[
										455165,
										455170
									],
									[
										455233,
										455238
									],
									[
										455322,
										455327
									],
									[
										455392,
										455397
									],
									[
										455931,
										455936
									],
									[
										456018,
										456023
									],
									[
										456045,
										456050
									],
									[
										456114,
										456119
									],
									[
										456259,
										456264
									],
									[
										456308,
										456313
									],
									[
										456430,
										456435
									],
									[
										456482,
										456487
									],
									[
										456590,
										456595
									],
									[
										456610,
										456615
									],
									[
										456634,
										456639
									],
									[
										456671,
										456676
									],
									[
										456754,
										456759
									],
									[
										456836,
										456841
									],
									[
										456917,
										456922
									],
									[
										457125,
										457130
									],
									[
										457610,
										457615
									],
									[
										457802,
										457807
									],
									[
										457959,
										457964
									],
									[
										457998,
										458003
									],
									[
										458407,
										458412
									],
									[
										458750,
										458755
									],
									[
										458973,
										458978
									],
									[
										459408,
										459413
									],
									[
										459652,
										459657
									],
									[
										459891,
										459896
									],
									[
										460180,
										460185
									],
									[
										460480,
										460485
									],
									[
										460672,
										460677
									],
									[
										460860,
										460865
									],
									[
										461000,
										461005
									],
									[
										461246,
										461251
									],
									[
										461339,
										461344
									],
									[
										461610,
										461615
									],
									[
										461664,
										461669
									],
									[
										461931,
										461936
									],
									[
										462090,
										462095
									],
									[
										462263,
										462268
									],
									[
										462436,
										462441
									],
									[
										462608,
										462613
									],
									[
										462655,
										462660
									],
									[
										462818,
										462823
									],
									[
										463044,
										463049
									],
									[
										463306,
										463311
									],
									[
										463589,
										463594
									],
									[
										463746,
										463751
									],
									[
										463787,
										463792
									],
									[
										463825,
										463830
									],
									[
										464128,
										464133
									],
									[
										464187,
										464192
									],
									[
										464208,
										464213
									],
									[
										464260,
										464265
									],
									[
										464324,
										464329
									],
									[
										464404,
										464409
									],
									[
										464483,
										464488
									],
									[
										464563,
										464568
									],
									[
										464624,
										464629
									],
									[
										464708,
										464713
									],
									[
										464784,
										464789
									],
									[
										464868,
										464873
									],
									[
										464929,
										464934
									],
									[
										465015,
										465020
									],
									[
										465091,
										465096
									],
									[
										465176,
										465181
									],
									[
										465252,
										465257
									],
									[
										465387,
										465392
									],
									[
										465488,
										465493
									],
									[
										465737,
										465742
									],
									[
										466100,
										466105
									],
									[
										466451,
										466456
									],
									[
										466879,
										466884
									],
									[
										467218,
										467223
									],
									[
										467721,
										467726
									],
									[
										468163,
										468168
									],
									[
										468425,
										468430
									],
									[
										468557,
										468562
									],
									[
										468621,
										468626
									],
									[
										468648,
										468653
									],
									[
										468737,
										468742
									],
									[
										468927,
										468932
									],
									[
										469020,
										469025
									],
									[
										469047,
										469052
									],
									[
										469176,
										469181
									],
									[
										469411,
										469416
									],
									[
										469451,
										469456
									],
									[
										469556,
										469561
									],
									[
										469609,
										469614
									],
									[
										469733,
										469738
									],
									[
										469753,
										469758
									],
									[
										469777,
										469782
									],
									[
										469968,
										469973
									],
									[
										470037,
										470042
									],
									[
										470097,
										470102
									],
									[
										470334,
										470339
									],
									[
										470584,
										470589
									],
									[
										470610,
										470615
									],
									[
										470903,
										470908
									],
									[
										470929,
										470934
									],
									[
										471136,
										471141
									],
									[
										471235,
										471240
									],
									[
										471480,
										471485
									],
									[
										471650,
										471655
									],
									[
										471718,
										471723
									],
									[
										471990,
										471995
									],
									[
										472084,
										472089
									],
									[
										472251,
										472256
									],
									[
										472338,
										472343
									],
									[
										472391,
										472396
									],
									[
										472515,
										472520
									],
									[
										472535,
										472540
									],
									[
										472641,
										472646
									],
									[
										472714,
										472719
									],
									[
										472861,
										472866
									],
									[
										472934,
										472939
									],
									[
										473081,
										473086
									],
									[
										473154,
										473159
									],
									[
										473301,
										473306
									],
									[
										473361,
										473366
									],
									[
										473414,
										473419
									],
									[
										473538,
										473543
									],
									[
										473558,
										473563
									],
									[
										473664,
										473669
									],
									[
										473710,
										473715
									],
									[
										473836,
										473841
									],
									[
										473882,
										473887
									],
									[
										474008,
										474013
									],
									[
										474054,
										474059
									],
									[
										474242,
										474247
									],
									[
										474595,
										474600
									],
									[
										474802,
										474807
									],
									[
										474971,
										474976
									],
									[
										475095,
										475100
									],
									[
										475115,
										475120
									],
									[
										475139,
										475144
									],
									[
										475185,
										475190
									],
									[
										475438,
										475443
									],
									[
										475609,
										475614
									],
									[
										475634,
										475639
									],
									[
										475958,
										475963
									],
									[
										476037,
										476042
									],
									[
										476062,
										476067
									],
									[
										476108,
										476113
									],
									[
										476140,
										476145
									],
									[
										476455,
										476460
									],
									[
										476507,
										476512
									],
									[
										476579,
										476584
									],
									[
										476703,
										476708
									],
									[
										476723,
										476728
									],
									[
										476747,
										476752
									],
									[
										476808,
										476813
									],
									[
										476926,
										476931
									],
									[
										477280,
										477285
									],
									[
										477548,
										477553
									],
									[
										477759,
										477764
									],
									[
										477961,
										477966
									],
									[
										478132,
										478137
									],
									[
										478190,
										478195
									],
									[
										478233,
										478238
									],
									[
										478289,
										478294
									],
									[
										478336,
										478341
									],
									[
										478368,
										478373
									],
									[
										478426,
										478431
									],
									[
										478473,
										478478
									],
									[
										478523,
										478528
									],
									[
										478578,
										478583
									],
									[
										478619,
										478624
									],
									[
										478806,
										478811
									],
									[
										478998,
										479003
									],
									[
										479032,
										479037
									],
									[
										479057,
										479062
									],
									[
										479208,
										479213
									],
									[
										479377,
										479382
									],
									[
										479423,
										479428
									],
									[
										479453,
										479458
									],
									[
										479605,
										479610
									],
									[
										479738,
										479743
									],
									[
										479796,
										479801
									],
									[
										479913,
										479918
									],
									[
										479968,
										479973
									],
									[
										480312,
										480317
									],
									[
										480396,
										480401
									],
									[
										480526,
										480531
									],
									[
										480575,
										480580
									],
									[
										480715,
										480720
									],
									[
										480979,
										480984
									],
									[
										481022,
										481027
									],
									[
										481148,
										481153
									],
									[
										481251,
										481256
									],
									[
										481537,
										481542
									],
									[
										482023,
										482028
									],
									[
										482242,
										482247
									],
									[
										482348,
										482353
									],
									[
										482472,
										482477
									],
									[
										482492,
										482497
									],
									[
										482745,
										482750
									],
									[
										482777,
										482782
									],
									[
										482834,
										482839
									],
									[
										482966,
										482971
									],
									[
										482996,
										483001
									],
									[
										483332,
										483337
									],
									[
										483348,
										483353
									],
									[
										483437,
										483442
									],
									[
										483655,
										483660
									],
									[
										483701,
										483706
									],
									[
										483721,
										483726
									],
									[
										483907,
										483912
									],
									[
										483968,
										483973
									],
									[
										484056,
										484061
									],
									[
										484084,
										484089
									],
									[
										484110,
										484115
									],
									[
										484134,
										484139
									],
									[
										484163,
										484168
									],
									[
										484196,
										484201
									],
									[
										484305,
										484310
									],
									[
										484398,
										484403
									],
									[
										484440,
										484445
									],
									[
										484578,
										484583
									],
									[
										484981,
										484986
									],
									[
										485135,
										485140
									],
									[
										485175,
										485180
									],
									[
										485319,
										485324
									],
									[
										485550,
										485555
									],
									[
										485653,
										485658
									],
									[
										485723,
										485728
									],
									[
										485847,
										485852
									],
									[
										485867,
										485872
									],
									[
										485891,
										485896
									],
									[
										485937,
										485942
									],
									[
										486055,
										486060
									],
									[
										486242,
										486247
									],
									[
										486745,
										486750
									],
									[
										487021,
										487026
									],
									[
										487171,
										487176
									],
									[
										487199,
										487204
									],
									[
										487250,
										487255
									],
									[
										487637,
										487642
									],
									[
										487665,
										487670
									],
									[
										487704,
										487709
									],
									[
										487758,
										487763
									],
									[
										487856,
										487861
									],
									[
										487886,
										487891
									],
									[
										488183,
										488188
									],
									[
										488206,
										488211
									],
									[
										488611,
										488616
									],
									[
										488900,
										488905
									],
									[
										489126,
										489131
									],
									[
										489163,
										489168
									],
									[
										489188,
										489193
									],
									[
										489238,
										489243
									],
									[
										489261,
										489266
									],
									[
										489292,
										489297
									],
									[
										489319,
										489324
									],
									[
										489350,
										489355
									],
									[
										489578,
										489583
									],
									[
										489820,
										489825
									],
									[
										489918,
										489923
									],
									[
										490042,
										490047
									],
									[
										490062,
										490067
									],
									[
										490086,
										490091
									],
									[
										490132,
										490137
									],
									[
										490438,
										490443
									],
									[
										490679,
										490684
									],
									[
										490762,
										490767
									],
									[
										490886,
										490891
									],
									[
										490906,
										490911
									],
									[
										490930,
										490935
									],
									[
										490976,
										490981
									],
									[
										491158,
										491163
									],
									[
										491243,
										491248
									],
									[
										491289,
										491294
									],
									[
										491495,
										491500
									],
									[
										491665,
										491670
									],
									[
										491705,
										491710
									],
									[
										491852,
										491857
									],
									[
										492183,
										492188
									],
									[
										492222,
										492227
									],
									[
										492606,
										492611
									],
									[
										492852,
										492857
									],
									[
										493144,
										493149
									],
									[
										493328,
										493333
									],
									[
										493349,
										493354
									],
									[
										493394,
										493399
									],
									[
										493547,
										493552
									],
									[
										493586,
										493591
									],
									[
										493796,
										493801
									],
									[
										493834,
										493839
									],
									[
										493854,
										493859
									],
									[
										493996,
										494001
									],
									[
										494033,
										494038
									],
									[
										494167,
										494172
									],
									[
										494220,
										494225
									],
									[
										494354,
										494359
									],
									[
										494415,
										494420
									],
									[
										494594,
										494599
									],
									[
										494683,
										494688
									],
									[
										495014,
										495019
									],
									[
										495054,
										495059
									],
									[
										495188,
										495193
									],
									[
										495590,
										495595
									],
									[
										495701,
										495706
									],
									[
										495739,
										495744
									],
									[
										495759,
										495764
									],
									[
										495777,
										495782
									],
									[
										495945,
										495950
									],
									[
										496260,
										496265
									],
									[
										496326,
										496331
									],
									[
										496444,
										496449
									],
									[
										496464,
										496469
									],
									[
										496549,
										496554
									],
									[
										496586,
										496591
									],
									[
										496783,
										496788
									],
									[
										496831,
										496836
									],
									[
										496871,
										496876
									],
									[
										497021,
										497026
									],
									[
										497041,
										497046
									],
									[
										497135,
										497140
									],
									[
										497179,
										497184
									],
									[
										497298,
										497303
									],
									[
										497343,
										497348
									],
									[
										497740,
										497745
									],
									[
										497760,
										497765
									],
									[
										497778,
										497783
									],
									[
										497800,
										497805
									],
									[
										498059,
										498064
									],
									[
										498197,
										498202
									],
									[
										498263,
										498268
									],
									[
										498401,
										498406
									],
									[
										498462,
										498467
									],
									[
										498482,
										498487
									],
									[
										498500,
										498505
									],
									[
										498703,
										498708
									],
									[
										498749,
										498754
									],
									[
										498915,
										498920
									],
									[
										498990,
										498995
									],
									[
										499217,
										499222
									],
									[
										499263,
										499268
									],
									[
										499376,
										499381
									],
									[
										499436,
										499441
									],
									[
										499654,
										499659
									],
									[
										499676,
										499681
									],
									[
										499854,
										499859
									],
									[
										499953,
										499958
									],
									[
										500012,
										500017
									],
									[
										500110,
										500115
									],
									[
										500193,
										500198
									],
									[
										500213,
										500218
									],
									[
										500231,
										500236
									],
									[
										500436,
										500441
									],
									[
										500482,
										500487
									],
									[
										500799,
										500804
									],
									[
										500994,
										500999
									],
									[
										501028,
										501033
									],
									[
										501053,
										501058
									],
									[
										501535,
										501540
									],
									[
										501924,
										501929
									],
									[
										501970,
										501975
									],
									[
										502161,
										502166
									],
									[
										502211,
										502216
									],
									[
										502231,
										502236
									],
									[
										502249,
										502254
									],
									[
										502507,
										502512
									],
									[
										502559,
										502564
									],
									[
										502579,
										502584
									],
									[
										502597,
										502602
									],
									[
										502855,
										502860
									],
									[
										502911,
										502916
									],
									[
										503044,
										503049
									],
									[
										503100,
										503105
									],
									[
										503233,
										503238
									],
									[
										503254,
										503259
									],
									[
										503286,
										503291
									],
									[
										503419,
										503424
									],
									[
										503456,
										503461
									],
									[
										503591,
										503596
									],
									[
										503729,
										503734
									],
									[
										503845,
										503850
									],
									[
										503970,
										503975
									],
									[
										504153,
										504158
									],
									[
										504326,
										504331
									],
									[
										504586,
										504591
									],
									[
										504643,
										504648
									],
									[
										504850,
										504855
									],
									[
										504969,
										504974
									],
									[
										505147,
										505152
									],
									[
										505205,
										505210
									],
									[
										505386,
										505391
									],
									[
										505406,
										505411
									],
									[
										505476,
										505481
									],
									[
										505661,
										505666
									],
									[
										505975,
										505980
									],
									[
										506162,
										506167
									],
									[
										506371,
										506376
									],
									[
										506434,
										506439
									],
									[
										506448,
										506453
									],
									[
										506501,
										506506
									],
									[
										506514,
										506519
									],
									[
										506525,
										506530
									],
									[
										506562,
										506567
									],
									[
										506632,
										506637
									],
									[
										506658,
										506663
									],
									[
										506700,
										506705
									],
									[
										506754,
										506759
									],
									[
										506792,
										506797
									],
									[
										506829,
										506834
									],
									[
										506886,
										506891
									],
									[
										506916,
										506921
									],
									[
										507013,
										507018
									],
									[
										507117,
										507122
									],
									[
										507326,
										507331
									],
									[
										507574,
										507579
									],
									[
										507654,
										507659
									],
									[
										507700,
										507705
									],
									[
										507893,
										507898
									],
									[
										508077,
										508082
									],
									[
										508389,
										508394
									],
									[
										508719,
										508724
									],
									[
										509065,
										509070
									],
									[
										509306,
										509311
									],
									[
										509940,
										509945
									],
									[
										510010,
										510015
									],
									[
										510294,
										510299
									],
									[
										510417,
										510422
									],
									[
										510516,
										510521
									],
									[
										510608,
										510613
									],
									[
										510852,
										510857
									],
									[
										510941,
										510946
									],
									[
										511030,
										511035
									],
									[
										511268,
										511273
									],
									[
										511360,
										511365
									],
									[
										511529,
										511534
									],
									[
										511848,
										511853
									],
									[
										511932,
										511937
									],
									[
										511977,
										511982
									],
									[
										512057,
										512062
									],
									[
										512077,
										512082
									],
									[
										512199,
										512204
									],
									[
										512468,
										512473
									],
									[
										512522,
										512527
									],
									[
										512726,
										512731
									],
									[
										512799,
										512804
									],
									[
										512940,
										512945
									],
									[
										513020,
										513025
									],
									[
										513110,
										513115
									],
									[
										513164,
										513169
									],
									[
										513232,
										513237
									],
									[
										513337,
										513342
									],
									[
										513442,
										513447
									],
									[
										513559,
										513564
									],
									[
										513775,
										513780
									],
									[
										513871,
										513876
									],
									[
										513930,
										513935
									],
									[
										514074,
										514079
									],
									[
										514103,
										514108
									],
									[
										514199,
										514204
									],
									[
										514295,
										514300
									],
									[
										514362,
										514367
									],
									[
										514376,
										514381
									],
									[
										514408,
										514413
									],
									[
										514513,
										514518
									],
									[
										514572,
										514577
									],
									[
										514620,
										514625
									],
									[
										514647,
										514652
									],
									[
										514714,
										514719
									],
									[
										514750,
										514755
									],
									[
										514833,
										514838
									],
									[
										514895,
										514900
									],
									[
										514940,
										514945
									],
									[
										515174,
										515179
									],
									[
										515317,
										515322
									],
									[
										515342,
										515347
									],
									[
										515683,
										515688
									],
									[
										516207,
										516212
									],
									[
										516295,
										516300
									],
									[
										516315,
										516320
									],
									[
										516425,
										516430
									],
									[
										516469,
										516474
									],
									[
										516547,
										516552
									],
									[
										516625,
										516630
									],
									[
										516734,
										516739
									],
									[
										516822,
										516827
									],
									[
										516870,
										516875
									],
									[
										516907,
										516912
									],
									[
										516963,
										516968
									],
									[
										517072,
										517077
									],
									[
										517134,
										517139
									],
									[
										517224,
										517229
									],
									[
										517256,
										517261
									],
									[
										517537,
										517542
									],
									[
										517858,
										517863
									],
									[
										517888,
										517893
									],
									[
										517960,
										517965
									],
									[
										517989,
										517994
									],
									[
										518061,
										518066
									],
									[
										518095,
										518100
									],
									[
										518140,
										518145
									],
									[
										518167,
										518172
									],
									[
										518196,
										518201
									],
									[
										518268,
										518273
									],
									[
										518307,
										518312
									],
									[
										518379,
										518384
									],
									[
										518416,
										518421
									],
									[
										518488,
										518493
									],
									[
										518525,
										518530
									],
									[
										518597,
										518602
									],
									[
										518630,
										518635
									],
									[
										518702,
										518707
									],
									[
										518742,
										518747
									],
									[
										518814,
										518819
									],
									[
										518855,
										518860
									],
									[
										518927,
										518932
									],
									[
										518968,
										518973
									],
									[
										518991,
										518996
									],
									[
										519047,
										519052
									],
									[
										519076,
										519081
									],
									[
										519264,
										519269
									],
									[
										519485,
										519490
									],
									[
										519657,
										519662
									],
									[
										519702,
										519707
									],
									[
										519712,
										519717
									],
									[
										519746,
										519751
									],
									[
										519756,
										519761
									],
									[
										519793,
										519798
									],
									[
										519996,
										520001
									],
									[
										520079,
										520084
									],
									[
										520173,
										520178
									],
									[
										520253,
										520258
									],
									[
										520357,
										520362
									],
									[
										520404,
										520409
									],
									[
										520497,
										520502
									],
									[
										520537,
										520542
									],
									[
										520616,
										520621
									],
									[
										520718,
										520723
									],
									[
										520815,
										520820
									],
									[
										520841,
										520846
									],
									[
										520941,
										520946
									],
									[
										521050,
										521055
									],
									[
										521119,
										521124
									],
									[
										521464,
										521469
									],
									[
										521583,
										521588
									],
									[
										521943,
										521948
									],
									[
										522170,
										522175
									],
									[
										522280,
										522285
									],
									[
										522530,
										522535
									],
									[
										522565,
										522570
									],
									[
										522632,
										522637
									],
									[
										522694,
										522699
									],
									[
										522741,
										522746
									],
									[
										522978,
										522983
									],
									[
										523126,
										523131
									],
									[
										523232,
										523237
									],
									[
										523407,
										523412
									],
									[
										523646,
										523651
									],
									[
										523752,
										523757
									],
									[
										523932,
										523937
									],
									[
										524147,
										524152
									],
									[
										524277,
										524282
									],
									[
										524330,
										524335
									],
									[
										524384,
										524389
									],
									[
										524440,
										524445
									],
									[
										524636,
										524641
									],
									[
										524696,
										524701
									],
									[
										524788,
										524793
									],
									[
										524835,
										524840
									],
									[
										524965,
										524970
									],
									[
										525027,
										525032
									],
									[
										525165,
										525170
									],
									[
										525266,
										525271
									],
									[
										525516,
										525521
									],
									[
										525746,
										525751
									],
									[
										525947,
										525952
									],
									[
										526010,
										526015
									],
									[
										526106,
										526111
									],
									[
										526276,
										526281
									],
									[
										526332,
										526337
									],
									[
										526534,
										526539
									],
									[
										526592,
										526597
									],
									[
										526840,
										526845
									],
									[
										526899,
										526904
									],
									[
										527039,
										527044
									],
									[
										527245,
										527250
									],
									[
										527319,
										527324
									],
									[
										527389,
										527394
									],
									[
										527465,
										527470
									],
									[
										527581,
										527586
									],
									[
										527658,
										527663
									],
									[
										527731,
										527736
									],
									[
										527927,
										527932
									],
									[
										528075,
										528080
									],
									[
										528223,
										528228
									],
									[
										528390,
										528395
									],
									[
										528557,
										528562
									],
									[
										528705,
										528710
									],
									[
										528853,
										528858
									],
									[
										529075,
										529080
									],
									[
										529308,
										529313
									],
									[
										529578,
										529583
									],
									[
										529618,
										529623
									],
									[
										529798,
										529803
									],
									[
										529808,
										529813
									],
									[
										529901,
										529906
									],
									[
										530051,
										530056
									],
									[
										530097,
										530102
									],
									[
										530136,
										530141
									],
									[
										530181,
										530186
									],
									[
										530246,
										530251
									],
									[
										530283,
										530288
									],
									[
										530325,
										530330
									],
									[
										530362,
										530367
									],
									[
										530412,
										530417
									],
									[
										530475,
										530480
									],
									[
										530598,
										530603
									],
									[
										530790,
										530795
									],
									[
										530985,
										530990
									],
									[
										531021,
										531026
									],
									[
										531179,
										531184
									],
									[
										531388,
										531393
									],
									[
										531707,
										531712
									],
									[
										531758,
										531763
									],
									[
										531928,
										531933
									],
									[
										532192,
										532197
									],
									[
										532245,
										532250
									],
									[
										532449,
										532454
									],
									[
										532509,
										532514
									],
									[
										532856,
										532861
									],
									[
										532948,
										532953
									],
									[
										533070,
										533075
									],
									[
										533235,
										533240
									],
									[
										533359,
										533364
									],
									[
										533486,
										533491
									],
									[
										533623,
										533628
									],
									[
										533810,
										533815
									],
									[
										533997,
										534002
									],
									[
										534276,
										534281
									],
									[
										534323,
										534328
									],
									[
										534476,
										534481
									],
									[
										534584,
										534589
									],
									[
										534692,
										534697
									],
									[
										534800,
										534805
									],
									[
										534908,
										534913
									],
									[
										535016,
										535021
									],
									[
										535146,
										535151
									],
									[
										535356,
										535361
									],
									[
										535529,
										535534
									],
									[
										535765,
										535770
									],
									[
										535909,
										535914
									],
									[
										536122,
										536127
									],
									[
										536549,
										536554
									],
									[
										536758,
										536763
									],
									[
										536876,
										536881
									],
									[
										537007,
										537012
									],
									[
										537334,
										537339
									],
									[
										537554,
										537559
									],
									[
										537750,
										537755
									],
									[
										538030,
										538035
									],
									[
										538252,
										538257
									],
									[
										538429,
										538434
									],
									[
										538522,
										538527
									],
									[
										538585,
										538590
									],
									[
										538640,
										538645
									],
									[
										538684,
										538689
									],
									[
										538694,
										538699
									],
									[
										538876,
										538881
									],
									[
										538934,
										538939
									],
									[
										538944,
										538949
									],
									[
										539026,
										539031
									],
									[
										539036,
										539041
									],
									[
										539118,
										539123
									],
									[
										539198,
										539203
									],
									[
										539271,
										539276
									],
									[
										539398,
										539403
									],
									[
										539463,
										539468
									],
									[
										539562,
										539567
									],
									[
										539689,
										539694
									],
									[
										539717,
										539722
									],
									[
										539786,
										539791
									],
									[
										539867,
										539872
									],
									[
										540211,
										540216
									],
									[
										540291,
										540296
									],
									[
										540546,
										540551
									],
									[
										540719,
										540724
									],
									[
										540816,
										540821
									],
									[
										541077,
										541082
									],
									[
										541216,
										541221
									],
									[
										541295,
										541300
									],
									[
										541412,
										541417
									],
									[
										541553,
										541558
									],
									[
										541645,
										541650
									],
									[
										541888,
										541893
									],
									[
										542235,
										542240
									],
									[
										542308,
										542313
									],
									[
										542424,
										542429
									],
									[
										542504,
										542509
									],
									[
										542593,
										542598
									],
									[
										542742,
										542747
									],
									[
										542942,
										542947
									],
									[
										543143,
										543148
									],
									[
										543265,
										543270
									],
									[
										543519,
										543524
									],
									[
										543631,
										543636
									],
									[
										543669,
										543674
									],
									[
										543831,
										543836
									],
									[
										544106,
										544111
									],
									[
										544389,
										544394
									],
									[
										544668,
										544673
									],
									[
										544955,
										544960
									],
									[
										545485,
										545490
									],
									[
										545721,
										545726
									],
									[
										545918,
										545923
									],
									[
										546115,
										546120
									],
									[
										546312,
										546317
									],
									[
										546585,
										546590
									],
									[
										546821,
										546826
									],
									[
										546984,
										546989
									],
									[
										547147,
										547152
									],
									[
										547310,
										547315
									],
									[
										547598,
										547603
									],
									[
										547679,
										547684
									],
									[
										547710,
										547715
									],
									[
										547785,
										547790
									],
									[
										547909,
										547914
									],
									[
										547940,
										547945
									],
									[
										548015,
										548020
									],
									[
										548150,
										548155
									],
									[
										548199,
										548204
									],
									[
										548294,
										548299
									],
									[
										548343,
										548348
									],
									[
										548438,
										548443
									],
									[
										548487,
										548492
									],
									[
										548582,
										548587
									],
									[
										548631,
										548636
									],
									[
										548726,
										548731
									],
									[
										548775,
										548780
									],
									[
										548838,
										548843
									],
									[
										548887,
										548892
									],
									[
										548950,
										548955
									],
									[
										548999,
										549004
									],
									[
										549062,
										549067
									],
									[
										549260,
										549265
									],
									[
										549537,
										549542
									],
									[
										549700,
										549705
									],
									[
										549863,
										549868
									],
									[
										550026,
										550031
									],
									[
										550169,
										550174
									],
									[
										550301,
										550306
									],
									[
										550436,
										550441
									],
									[
										550571,
										550576
									],
									[
										550706,
										550711
									],
									[
										550887,
										550892
									],
									[
										551077,
										551082
									],
									[
										551312,
										551317
									],
									[
										551544,
										551549
									],
									[
										551656,
										551661
									],
									[
										551768,
										551773
									],
									[
										551880,
										551885
									],
									[
										551934,
										551939
									],
									[
										551976,
										551981
									],
									[
										552031,
										552036
									],
									[
										552108,
										552113
									],
									[
										552163,
										552168
									],
									[
										552240,
										552245
									],
									[
										552296,
										552301
									],
									[
										552365,
										552370
									],
									[
										552421,
										552426
									],
									[
										552490,
										552495
									],
									[
										552725,
										552730
									],
									[
										552837,
										552842
									],
									[
										552968,
										552973
									],
									[
										553135,
										553140
									],
									[
										553389,
										553394
									],
									[
										553447,
										553452
									],
									[
										553546,
										553551
									],
									[
										553606,
										553611
									],
									[
										553770,
										553775
									],
									[
										553844,
										553849
									],
									[
										554035,
										554040
									],
									[
										554112,
										554117
									],
									[
										554313,
										554318
									],
									[
										554385,
										554390
									],
									[
										554463,
										554468
									],
									[
										554614,
										554619
									],
									[
										554817,
										554822
									],
									[
										555044,
										555049
									],
									[
										555161,
										555166
									],
									[
										555469,
										555474
									],
									[
										555497,
										555502
									],
									[
										555567,
										555572
									],
									[
										555636,
										555641
									],
									[
										555714,
										555719
									],
									[
										555818,
										555823
									],
									[
										555902,
										555907
									],
									[
										556009,
										556014
									],
									[
										556155,
										556160
									],
									[
										556201,
										556206
									],
									[
										556280,
										556285
									],
									[
										556452,
										556457
									],
									[
										556529,
										556534
									],
									[
										556729,
										556734
									],
									[
										556782,
										556787
									],
									[
										556924,
										556929
									],
									[
										557016,
										557021
									],
									[
										557065,
										557070
									],
									[
										557238,
										557243
									],
									[
										557284,
										557289
									],
									[
										557503,
										557508
									],
									[
										557534,
										557539
									],
									[
										557776,
										557781
									],
									[
										558164,
										558169
									],
									[
										558392,
										558397
									],
									[
										558471,
										558476
									],
									[
										558642,
										558647
									],
									[
										558865,
										558870
									],
									[
										559070,
										559075
									],
									[
										559277,
										559282
									],
									[
										559324,
										559329
									],
									[
										559708,
										559713
									],
									[
										559835,
										559840
									],
									[
										559963,
										559968
									],
									[
										560099,
										560104
									],
									[
										560237,
										560242
									],
									[
										560403,
										560408
									],
									[
										560597,
										560602
									],
									[
										560743,
										560748
									],
									[
										560825,
										560830
									],
									[
										560967,
										560972
									],
									[
										561197,
										561202
									],
									[
										561431,
										561436
									],
									[
										561599,
										561604
									],
									[
										561782,
										561787
									],
									[
										561837,
										561842
									],
									[
										561891,
										561896
									],
									[
										562044,
										562049
									],
									[
										562152,
										562157
									],
									[
										562260,
										562265
									],
									[
										562502,
										562507
									],
									[
										562720,
										562725
									],
									[
										562852,
										562857
									],
									[
										563041,
										563046
									],
									[
										563225,
										563230
									],
									[
										563448,
										563453
									],
									[
										563645,
										563650
									],
									[
										563856,
										563861
									],
									[
										563989,
										563994
									],
									[
										564013,
										564018
									],
									[
										564059,
										564064
									],
									[
										564111,
										564116
									],
									[
										564151,
										564156
									],
									[
										564177,
										564182
									],
									[
										564410,
										564415
									],
									[
										564574,
										564579
									],
									[
										564798,
										564803
									],
									[
										564866,
										564871
									],
									[
										564906,
										564911
									],
									[
										564938,
										564943
									],
									[
										565077,
										565082
									],
									[
										565137,
										565142
									],
									[
										565207,
										565212
									],
									[
										565285,
										565290
									],
									[
										565411,
										565416
									],
									[
										565566,
										565571
									],
									[
										565602,
										565607
									],
									[
										565665,
										565670
									],
									[
										565735,
										565740
									],
									[
										565868,
										565873
									],
									[
										565949,
										565954
									],
									[
										566170,
										566175
									],
									[
										566278,
										566283
									],
									[
										566405,
										566410
									],
									[
										566562,
										566567
									],
									[
										566781,
										566786
									],
									[
										566939,
										566944
									],
									[
										567295,
										567300
									],
									[
										567438,
										567443
									],
									[
										567728,
										567733
									],
									[
										567910,
										567915
									],
									[
										568017,
										568022
									],
									[
										568104,
										568109
									],
									[
										568302,
										568307
									],
									[
										568497,
										568502
									],
									[
										568603,
										568608
									],
									[
										568613,
										568618
									],
									[
										568732,
										568737
									],
									[
										568865,
										568870
									],
									[
										568908,
										568913
									],
									[
										568947,
										568952
									],
									[
										569038,
										569043
									],
									[
										569322,
										569327
									],
									[
										569601,
										569606
									],
									[
										569627,
										569632
									],
									[
										569683,
										569688
									],
									[
										569738,
										569743
									],
									[
										569793,
										569798
									],
									[
										570202,
										570207
									],
									[
										570228,
										570233
									],
									[
										570277,
										570282
									],
									[
										570287,
										570292
									],
									[
										570393,
										570398
									],
									[
										570432,
										570437
									],
									[
										570463,
										570468
									],
									[
										570473,
										570478
									],
									[
										570519,
										570524
									],
									[
										570561,
										570566
									],
									[
										570645,
										570650
									],
									[
										570846,
										570851
									],
									[
										571410,
										571415
									],
									[
										571629,
										571634
									],
									[
										571663,
										571668
									],
									[
										571690,
										571695
									],
									[
										571753,
										571758
									],
									[
										571837,
										571842
									],
									[
										571951,
										571956
									],
									[
										572048,
										572053
									],
									[
										572189,
										572194
									],
									[
										572306,
										572311
									],
									[
										572428,
										572433
									],
									[
										572541,
										572546
									],
									[
										572645,
										572650
									],
									[
										572749,
										572754
									],
									[
										572857,
										572862
									],
									[
										572938,
										572943
									],
									[
										573162,
										573167
									],
									[
										573223,
										573228
									],
									[
										573358,
										573363
									],
									[
										573532,
										573537
									],
									[
										573662,
										573667
									],
									[
										573794,
										573799
									],
									[
										574023,
										574028
									],
									[
										574133,
										574138
									],
									[
										574243,
										574248
									],
									[
										574353,
										574358
									],
									[
										574461,
										574466
									],
									[
										574573,
										574578
									],
									[
										574683,
										574688
									],
									[
										574798,
										574803
									],
									[
										574934,
										574939
									],
									[
										574965,
										574970
									],
									[
										575031,
										575036
									],
									[
										575119,
										575124
									],
									[
										575214,
										575219
									],
									[
										575300,
										575305
									],
									[
										575390,
										575395
									],
									[
										575505,
										575510
									],
									[
										575651,
										575656
									],
									[
										575778,
										575783
									],
									[
										575913,
										575918
									],
									[
										576067,
										576072
									],
									[
										576255,
										576260
									],
									[
										576377,
										576382
									],
									[
										576581,
										576586
									],
									[
										576689,
										576694
									],
									[
										576767,
										576772
									],
									[
										576848,
										576853
									],
									[
										576984,
										576989
									],
									[
										577118,
										577123
									],
									[
										577139,
										577144
									],
									[
										577178,
										577183
									],
									[
										577218,
										577223
									],
									[
										577301,
										577306
									],
									[
										577414,
										577419
									],
									[
										577540,
										577545
									],
									[
										577708,
										577713
									],
									[
										577899,
										577904
									],
									[
										577989,
										577994
									],
									[
										578086,
										578091
									],
									[
										578187,
										578192
									],
									[
										578300,
										578305
									],
									[
										578430,
										578435
									],
									[
										578532,
										578537
									],
									[
										578658,
										578663
									],
									[
										578823,
										578828
									],
									[
										578865,
										578870
									],
									[
										578893,
										578898
									],
									[
										578966,
										578971
									],
									[
										578998,
										579003
									],
									[
										579065,
										579070
									],
									[
										579177,
										579182
									],
									[
										579321,
										579326
									],
									[
										579457,
										579462
									],
									[
										579502,
										579507
									],
									[
										579542,
										579547
									],
									[
										579572,
										579577
									],
									[
										579633,
										579638
									],
									[
										579681,
										579686
									],
									[
										579729,
										579734
									],
									[
										579777,
										579782
									],
									[
										579825,
										579830
									],
									[
										579853,
										579858
									],
									[
										579883,
										579888
									],
									[
										579931,
										579936
									],
									[
										579979,
										579984
									],
									[
										580027,
										580032
									],
									[
										580075,
										580080
									],
									[
										580123,
										580128
									],
									[
										580171,
										580176
									],
									[
										580238,
										580243
									],
									[
										580299,
										580304
									],
									[
										580361,
										580366
									],
									[
										580421,
										580426
									],
									[
										580482,
										580487
									],
									[
										580543,
										580548
									],
									[
										580649,
										580654
									],
									[
										580679,
										580684
									],
									[
										580705,
										580710
									],
									[
										580739,
										580744
									],
									[
										580814,
										580819
									],
									[
										580888,
										580893
									],
									[
										580980,
										580985
									],
									[
										581008,
										581013
									],
									[
										581042,
										581047
									],
									[
										581151,
										581156
									],
									[
										581187,
										581192
									],
									[
										581222,
										581227
									],
									[
										581251,
										581256
									],
									[
										581289,
										581294
									],
									[
										581324,
										581329
									],
									[
										581355,
										581360
									],
									[
										581388,
										581393
									],
									[
										581423,
										581428
									],
									[
										581465,
										581470
									],
									[
										581506,
										581511
									],
									[
										581535,
										581540
									],
									[
										581566,
										581571
									],
									[
										581598,
										581603
									],
									[
										581636,
										581641
									],
									[
										581664,
										581669
									],
									[
										581699,
										581704
									],
									[
										581733,
										581738
									],
									[
										581761,
										581766
									],
									[
										581796,
										581801
									],
									[
										581830,
										581835
									],
									[
										581858,
										581863
									],
									[
										581893,
										581898
									],
									[
										581927,
										581932
									],
									[
										581959,
										581964
									],
									[
										581998,
										582003
									],
									[
										582036,
										582041
									],
									[
										582069,
										582074
									],
									[
										582109,
										582114
									],
									[
										582148,
										582153
									],
									[
										582179,
										582184
									],
									[
										582217,
										582222
									],
									[
										582252,
										582257
									],
									[
										582294,
										582299
									],
									[
										582330,
										582335
									],
									[
										582427,
										582432
									],
									[
										582565,
										582570
									],
									[
										582664,
										582669
									],
									[
										582699,
										582704
									],
									[
										582754,
										582759
									],
									[
										582810,
										582815
									],
									[
										582865,
										582870
									],
									[
										582921,
										582926
									],
									[
										582976,
										582981
									],
									[
										583032,
										583037
									],
									[
										583087,
										583092
									],
									[
										583143,
										583148
									],
									[
										583199,
										583204
									],
									[
										583254,
										583259
									],
									[
										583309,
										583314
									],
									[
										583353,
										583358
									],
									[
										583377,
										583382
									],
									[
										583540,
										583545
									],
									[
										583580,
										583585
									],
									[
										583627,
										583632
									],
									[
										583684,
										583689
									],
									[
										583723,
										583728
									],
									[
										583762,
										583767
									],
									[
										583862,
										583867
									],
									[
										583900,
										583905
									],
									[
										583939,
										583944
									],
									[
										583978,
										583983
									],
									[
										584063,
										584068
									],
									[
										584120,
										584125
									],
									[
										584177,
										584182
									],
									[
										584255,
										584260
									],
									[
										584312,
										584317
									],
									[
										584417,
										584422
									],
									[
										584489,
										584494
									],
									[
										584618,
										584623
									],
									[
										584650,
										584655
									],
									[
										584684,
										584689
									],
									[
										584752,
										584757
									],
									[
										584880,
										584885
									],
									[
										585016,
										585021
									],
									[
										585180,
										585185
									],
									[
										585292,
										585297
									],
									[
										585792,
										585797
									],
									[
										585828,
										585833
									],
									[
										585838,
										585843
									],
									[
										585920,
										585925
									],
									[
										585938,
										585943
									],
									[
										586042,
										586047
									],
									[
										586471,
										586476
									],
									[
										586597,
										586602
									],
									[
										586658,
										586663
									],
									[
										587129,
										587134
									],
									[
										588067,
										588072
									],
									[
										588664,
										588669
									],
									[
										589053,
										589058
									],
									[
										589366,
										589371
									],
									[
										589489,
										589494
									],
									[
										589948,
										589953
									],
									[
										590108,
										590113
									],
									[
										590729,
										590734
									],
									[
										591254,
										591259
									],
									[
										591603,
										591608
									],
									[
										591615,
										591620
									],
									[
										591951,
										591956
									],
									[
										592223,
										592228
									],
									[
										592580,
										592585
									],
									[
										592909,
										592914
									],
									[
										593087,
										593092
									],
									[
										593335,
										593340
									],
									[
										593600,
										593605
									],
									[
										593634,
										593639
									],
									[
										593654,
										593659
									],
									[
										593679,
										593684
									],
									[
										593714,
										593719
									],
									[
										593754,
										593759
									],
									[
										593883,
										593888
									],
									[
										594106,
										594111
									],
									[
										594370,
										594375
									],
									[
										594523,
										594528
									],
									[
										594585,
										594590
									],
									[
										594994,
										594999
									],
									[
										595115,
										595120
									],
									[
										595195,
										595200
									],
									[
										595537,
										595542
									],
									[
										595615,
										595620
									],
									[
										595928,
										595933
									],
									[
										596001,
										596006
									],
									[
										596097,
										596102
									],
									[
										596175,
										596180
									],
									[
										596255,
										596260
									],
									[
										596571,
										596576
									],
									[
										596611,
										596616
									],
									[
										596638,
										596643
									],
									[
										596690,
										596695
									],
									[
										596717,
										596722
									],
									[
										596751,
										596756
									],
									[
										596779,
										596784
									],
									[
										596836,
										596841
									],
									[
										596864,
										596869
									],
									[
										596899,
										596904
									],
									[
										596928,
										596933
									],
									[
										596985,
										596990
									],
									[
										597014,
										597019
									],
									[
										597050,
										597055
									],
									[
										597081,
										597086
									],
									[
										597135,
										597140
									],
									[
										597166,
										597171
									],
									[
										597696,
										597701
									],
									[
										597721,
										597726
									],
									[
										597795,
										597800
									],
									[
										597825,
										597830
									],
									[
										597871,
										597876
									],
									[
										597902,
										597907
									],
									[
										597953,
										597958
									],
									[
										597985,
										597990
									],
									[
										598036,
										598041
									],
									[
										598070,
										598075
									],
									[
										598237,
										598242
									],
									[
										598360,
										598365
									],
									[
										598462,
										598467
									],
									[
										598508,
										598513
									],
									[
										598554,
										598559
									],
									[
										598608,
										598613
									],
									[
										599072,
										599077
									],
									[
										599540,
										599545
									],
									[
										599608,
										599613
									],
									[
										600114,
										600119
									],
									[
										600345,
										600350
									],
									[
										600698,
										600703
									],
									[
										601165,
										601170
									],
									[
										601384,
										601389
									],
									[
										601562,
										601567
									],
									[
										602018,
										602023
									],
									[
										602239,
										602244
									],
									[
										602454,
										602459
									],
									[
										603262,
										603267
									],
									[
										603728,
										603733
									],
									[
										603970,
										603975
									],
									[
										604156,
										604161
									],
									[
										604352,
										604357
									],
									[
										604522,
										604527
									],
									[
										604732,
										604737
									],
									[
										604897,
										604902
									],
									[
										605251,
										605256
									],
									[
										605408,
										605413
									],
									[
										605499,
										605504
									],
									[
										605579,
										605584
									],
									[
										605747,
										605752
									],
									[
										605871,
										605876
									],
									[
										606129,
										606134
									],
									[
										606305,
										606310
									],
									[
										606568,
										606573
									],
									[
										606650,
										606655
									],
									[
										606703,
										606708
									],
									[
										606745,
										606750
									],
									[
										606818,
										606823
									],
									[
										606894,
										606899
									],
									[
										606999,
										607004
									],
									[
										607266,
										607271
									],
									[
										607462,
										607467
									],
									[
										607630,
										607635
									],
									[
										607769,
										607774
									],
									[
										607890,
										607895
									],
									[
										608016,
										608021
									],
									[
										608124,
										608129
									],
									[
										608256,
										608261
									],
									[
										608370,
										608375
									],
									[
										608489,
										608494
									],
									[
										608711,
										608716
									],
									[
										608903,
										608908
									],
									[
										609201,
										609206
									],
									[
										609345,
										609350
									],
									[
										609467,
										609472
									],
									[
										610071,
										610076
									],
									[
										610194,
										610199
									],
									[
										610385,
										610390
									],
									[
										610507,
										610512
									],
									[
										611098,
										611103
									],
									[
										611160,
										611165
									],
									[
										611204,
										611209
									],
									[
										611301,
										611306
									],
									[
										611512,
										611517
									],
									[
										611912,
										611917
									],
									[
										611948,
										611953
									],
									[
										611994,
										611999
									],
									[
										612064,
										612069
									],
									[
										612205,
										612210
									],
									[
										612329,
										612334
									],
									[
										613013,
										613018
									],
									[
										613058,
										613063
									],
									[
										613148,
										613153
									],
									[
										613346,
										613351
									],
									[
										613611,
										613616
									],
									[
										613779,
										613784
									],
									[
										613960,
										613965
									],
									[
										614258,
										614263
									],
									[
										614532,
										614537
									],
									[
										614568,
										614573
									],
									[
										614605,
										614610
									],
									[
										614683,
										614688
									],
									[
										614775,
										614780
									],
									[
										614948,
										614953
									],
									[
										615252,
										615257
									],
									[
										615563,
										615568
									],
									[
										615905,
										615910
									],
									[
										616071,
										616076
									],
									[
										616192,
										616197
									],
									[
										616261,
										616266
									],
									[
										616326,
										616331
									],
									[
										616653,
										616658
									],
									[
										616827,
										616832
									],
									[
										617322,
										617327
									],
									[
										617420,
										617425
									],
									[
										617518,
										617523
									],
									[
										617659,
										617664
									],
									[
										617787,
										617792
									],
									[
										617897,
										617902
									],
									[
										618522,
										618527
									],
									[
										618545,
										618550
									],
									[
										618718,
										618723
									],
									[
										618861,
										618866
									],
									[
										618998,
										619003
									],
									[
										619029,
										619034
									],
									[
										619061,
										619066
									],
									[
										619109,
										619114
									],
									[
										619168,
										619173
									],
									[
										619235,
										619240
									],
									[
										619818,
										619823
									],
									[
										620017,
										620022
									],
									[
										620156,
										620161
									],
									[
										620289,
										620294
									],
									[
										620558,
										620563
									],
									[
										620622,
										620627
									],
									[
										620903,
										620908
									],
									[
										620930,
										620935
									],
									[
										620994,
										620999
									],
									[
										621017,
										621022
									],
									[
										621031,
										621036
									],
									[
										621061,
										621066
									],
									[
										621171,
										621176
									],
									[
										621275,
										621280
									],
									[
										621299,
										621304
									],
									[
										621342,
										621347
									],
									[
										621386,
										621391
									],
									[
										621586,
										621591
									],
									[
										621610,
										621615
									],
									[
										621636,
										621641
									],
									[
										621696,
										621701
									],
									[
										621760,
										621765
									],
									[
										621797,
										621802
									],
									[
										621916,
										621921
									],
									[
										622125,
										622130
									],
									[
										622191,
										622196
									],
									[
										622272,
										622277
									],
									[
										622427,
										622432
									],
									[
										622469,
										622474
									],
									[
										622501,
										622506
									],
									[
										622740,
										622745
									],
									[
										623171,
										623176
									],
									[
										623353,
										623358
									],
									[
										623613,
										623618
									],
									[
										623669,
										623674
									],
									[
										623717,
										623722
									],
									[
										623982,
										623987
									],
									[
										624038,
										624043
									],
									[
										624087,
										624092
									],
									[
										624327,
										624332
									],
									[
										624462,
										624467
									],
									[
										624819,
										624824
									],
									[
										624969,
										624974
									],
									[
										625044,
										625049
									],
									[
										625165,
										625170
									],
									[
										625444,
										625449
									],
									[
										625458,
										625463
									],
									[
										625673,
										625678
									],
									[
										625967,
										625972
									],
									[
										626136,
										626141
									],
									[
										626216,
										626221
									],
									[
										626389,
										626394
									],
									[
										626602,
										626607
									],
									[
										626852,
										626857
									],
									[
										627137,
										627142
									],
									[
										627180,
										627185
									],
									[
										627322,
										627327
									],
									[
										627720,
										627725
									],
									[
										628033,
										628038
									],
									[
										628325,
										628330
									],
									[
										628524,
										628529
									],
									[
										628960,
										628965
									],
									[
										629071,
										629076
									],
									[
										629189,
										629194
									],
									[
										629622,
										629627
									],
									[
										629838,
										629843
									],
									[
										629961,
										629966
									],
									[
										630005,
										630010
									],
									[
										630044,
										630049
									],
									[
										630319,
										630324
									],
									[
										630519,
										630524
									],
									[
										630700,
										630705
									],
									[
										630793,
										630798
									],
									[
										630890,
										630895
									],
									[
										630982,
										630987
									],
									[
										631078,
										631083
									],
									[
										631174,
										631179
									],
									[
										631272,
										631277
									],
									[
										631367,
										631372
									],
									[
										631436,
										631441
									],
									[
										631473,
										631478
									],
									[
										631712,
										631717
									],
									[
										631732,
										631737
									],
									[
										631903,
										631908
									],
									[
										632131,
										632136
									],
									[
										632292,
										632297
									],
									[
										632353,
										632358
									],
									[
										632499,
										632504
									],
									[
										632522,
										632527
									],
									[
										632549,
										632554
									],
									[
										632569,
										632574
									],
									[
										632624,
										632629
									],
									[
										632687,
										632692
									],
									[
										632735,
										632740
									],
									[
										632766,
										632771
									],
									[
										632792,
										632797
									],
									[
										633026,
										633031
									],
									[
										633075,
										633080
									],
									[
										633149,
										633154
									],
									[
										633293,
										633298
									],
									[
										633501,
										633506
									],
									[
										633515,
										633520
									],
									[
										633745,
										633750
									],
									[
										633873,
										633878
									],
									[
										634009,
										634014
									],
									[
										634077,
										634082
									],
									[
										634091,
										634096
									],
									[
										634187,
										634192
									],
									[
										634279,
										634284
									],
									[
										634293,
										634298
									],
									[
										634408,
										634413
									],
									[
										634534,
										634539
									],
									[
										634659,
										634664
									],
									[
										634864,
										634869
									],
									[
										634976,
										634981
									],
									[
										635038,
										635043
									],
									[
										635052,
										635057
									],
									[
										635089,
										635094
									],
									[
										635156,
										635161
									],
									[
										635243,
										635248
									],
									[
										635305,
										635310
									],
									[
										635369,
										635374
									],
									[
										635427,
										635432
									],
									[
										635489,
										635494
									],
									[
										635550,
										635555
									],
									[
										635615,
										635620
									],
									[
										635672,
										635677
									],
									[
										635727,
										635732
									],
									[
										635780,
										635785
									],
									[
										635839,
										635844
									],
									[
										635891,
										635896
									],
									[
										635944,
										635949
									],
									[
										635987,
										635992
									],
									[
										636030,
										636035
									],
									[
										636073,
										636078
									],
									[
										636116,
										636121
									],
									[
										636159,
										636164
									],
									[
										636223,
										636228
									],
									[
										636310,
										636315
									],
									[
										636337,
										636342
									],
									[
										636424,
										636429
									],
									[
										636494,
										636499
									],
									[
										636612,
										636617
									],
									[
										636660,
										636665
									],
									[
										636715,
										636720
									],
									[
										636763,
										636768
									],
									[
										636864,
										636869
									],
									[
										636923,
										636928
									],
									[
										636937,
										636942
									],
									[
										637127,
										637132
									],
									[
										637251,
										637256
									],
									[
										637362,
										637367
									],
									[
										637523,
										637528
									],
									[
										637584,
										637589
									],
									[
										637730,
										637735
									],
									[
										637753,
										637758
									],
									[
										637780,
										637785
									],
									[
										637800,
										637805
									],
									[
										637855,
										637860
									],
									[
										637918,
										637923
									],
									[
										637966,
										637971
									],
									[
										638063,
										638068
									],
									[
										638085,
										638090
									],
									[
										638135,
										638140
									],
									[
										638157,
										638162
									],
									[
										638193,
										638198
									],
									[
										638215,
										638220
									],
									[
										638269,
										638274
									],
									[
										638291,
										638296
									],
									[
										638420,
										638425
									],
									[
										638440,
										638445
									],
									[
										638462,
										638467
									],
									[
										638513,
										638518
									],
									[
										638535,
										638540
									],
									[
										638659,
										638664
									],
									[
										638769,
										638774
									],
									[
										639021,
										639026
									],
									[
										639100,
										639105
									],
									[
										639141,
										639146
									],
									[
										639156,
										639161
									],
									[
										639382,
										639387
									],
									[
										639495,
										639500
									],
									[
										639522,
										639527
									],
									[
										639551,
										639556
									],
									[
										639581,
										639586
									],
									[
										639615,
										639620
									],
									[
										639647,
										639652
									],
									[
										639681,
										639686
									],
									[
										639709,
										639714
									],
									[
										639745,
										639750
									],
									[
										639774,
										639779
									],
									[
										639814,
										639819
									],
									[
										639844,
										639849
									],
									[
										639880,
										639885
									],
									[
										639910,
										639915
									],
									[
										639947,
										639952
									],
									[
										639977,
										639982
									],
									[
										640016,
										640021
									],
									[
										640046,
										640051
									],
									[
										640269,
										640274
									],
									[
										640412,
										640417
									],
									[
										640602,
										640607
									],
									[
										640823,
										640828
									],
									[
										640843,
										640848
									],
									[
										640853,
										640858
									],
									[
										640868,
										640873
									],
									[
										640896,
										640901
									],
									[
										640995,
										641000
									],
									[
										641160,
										641165
									],
									[
										641324,
										641329
									],
									[
										641518,
										641523
									],
									[
										641704,
										641709
									],
									[
										641931,
										641936
									],
									[
										642071,
										642076
									],
									[
										642222,
										642227
									],
									[
										642324,
										642329
									],
									[
										642743,
										642748
									],
									[
										642821,
										642826
									],
									[
										642911,
										642916
									],
									[
										642969,
										642974
									],
									[
										643031,
										643036
									],
									[
										643154,
										643159
									],
									[
										643288,
										643293
									],
									[
										643399,
										643404
									],
									[
										643729,
										643734
									],
									[
										644307,
										644312
									],
									[
										644574,
										644579
									],
									[
										644612,
										644617
									],
									[
										644693,
										644698
									],
									[
										644854,
										644859
									],
									[
										644977,
										644982
									],
									[
										645102,
										645107
									],
									[
										645232,
										645237
									],
									[
										645354,
										645359
									],
									[
										645472,
										645477
									],
									[
										645558,
										645563
									],
									[
										645689,
										645694
									],
									[
										645801,
										645806
									],
									[
										645969,
										645974
									],
									[
										646007,
										646012
									],
									[
										646086,
										646091
									],
									[
										646180,
										646185
									],
									[
										646213,
										646218
									],
									[
										646274,
										646279
									],
									[
										646335,
										646340
									],
									[
										646396,
										646401
									],
									[
										646565,
										646570
									],
									[
										646602,
										646607
									],
									[
										646639,
										646644
									],
									[
										646696,
										646701
									],
									[
										646730,
										646735
									],
									[
										646762,
										646767
									],
									[
										646816,
										646821
									],
									[
										646850,
										646855
									],
									[
										646880,
										646885
									],
									[
										646912,
										646917
									],
									[
										646964,
										646969
									],
									[
										646996,
										647001
									],
									[
										647046,
										647051
									],
									[
										647096,
										647101
									],
									[
										647146,
										647151
									],
									[
										647196,
										647201
									],
									[
										647372,
										647377
									],
									[
										647550,
										647555
									],
									[
										647582,
										647587
									],
									[
										647785,
										647790
									],
									[
										647819,
										647824
									],
									[
										647926,
										647931
									],
									[
										647940,
										647945
									],
									[
										648017,
										648022
									],
									[
										648031,
										648036
									],
									[
										648110,
										648115
									],
									[
										648124,
										648129
									],
									[
										648299,
										648304
									],
									[
										648431,
										648436
									],
									[
										648733,
										648738
									],
									[
										648743,
										648748
									],
									[
										648872,
										648877
									],
									[
										649129,
										649134
									],
									[
										649139,
										649144
									],
									[
										649178,
										649183
									],
									[
										649719,
										649724
									],
									[
										649919,
										649924
									],
									[
										650476,
										650481
									],
									[
										650505,
										650510
									],
									[
										650567,
										650572
									],
									[
										650734,
										650739
									],
									[
										650775,
										650780
									],
									[
										650950,
										650955
									],
									[
										650984,
										650989
									],
									[
										651049,
										651054
									],
									[
										651174,
										651179
									],
									[
										651239,
										651244
									],
									[
										651410,
										651415
									],
									[
										651424,
										651429
									],
									[
										651436,
										651441
									],
									[
										651464,
										651469
									],
									[
										651681,
										651686
									],
									[
										651701,
										651706
									],
									[
										651782,
										651787
									],
									[
										651821,
										651826
									],
									[
										652278,
										652283
									],
									[
										652322,
										652327
									],
									[
										652367,
										652372
									],
									[
										652467,
										652472
									],
									[
										652513,
										652518
									],
									[
										652614,
										652619
									],
									[
										652712,
										652717
									],
									[
										652832,
										652837
									],
									[
										652979,
										652984
									],
									[
										653038,
										653043
									],
									[
										653126,
										653131
									],
									[
										653620,
										653625
									],
									[
										653671,
										653676
									],
									[
										653800,
										653805
									],
									[
										653918,
										653923
									],
									[
										654130,
										654135
									],
									[
										654247,
										654252
									],
									[
										654465,
										654470
									],
									[
										654574,
										654579
									],
									[
										654911,
										654916
									],
									[
										654968,
										654973
									],
									[
										655026,
										655031
									],
									[
										655091,
										655096
									],
									[
										655282,
										655287
									],
									[
										655620,
										655625
									],
									[
										655946,
										655951
									],
									[
										655994,
										655999
									],
									[
										656034,
										656039
									],
									[
										656106,
										656111
									],
									[
										656215,
										656220
									],
									[
										656347,
										656352
									],
									[
										656830,
										656835
									],
									[
										656940,
										656945
									],
									[
										657224,
										657229
									],
									[
										657461,
										657466
									],
									[
										657717,
										657722
									],
									[
										657733,
										657738
									],
									[
										657808,
										657813
									],
									[
										657818,
										657823
									],
									[
										658001,
										658006
									],
									[
										658411,
										658416
									],
									[
										658451,
										658456
									],
									[
										658500,
										658505
									],
									[
										658934,
										658939
									],
									[
										658972,
										658977
									],
									[
										659248,
										659253
									],
									[
										659306,
										659311
									],
									[
										659355,
										659360
									],
									[
										659594,
										659599
									],
									[
										659799,
										659804
									],
									[
										659952,
										659957
									],
									[
										659962,
										659967
									],
									[
										660035,
										660040
									],
									[
										660125,
										660130
									],
									[
										660197,
										660202
									],
									[
										660855,
										660860
									],
									[
										661499,
										661504
									],
									[
										661976,
										661981
									],
									[
										662142,
										662147
									],
									[
										662309,
										662314
									],
									[
										662483,
										662488
									],
									[
										662629,
										662634
									],
									[
										663179,
										663184
									],
									[
										663295,
										663300
									],
									[
										663491,
										663496
									],
									[
										663669,
										663674
									],
									[
										663857,
										663862
									],
									[
										664086,
										664091
									],
									[
										664129,
										664134
									],
									[
										664163,
										664168
									],
									[
										664238,
										664243
									],
									[
										664285,
										664290
									],
									[
										664565,
										664570
									],
									[
										664687,
										664692
									],
									[
										664743,
										664748
									],
									[
										665003,
										665008
									],
									[
										665049,
										665054
									],
									[
										665394,
										665399
									],
									[
										665614,
										665619
									],
									[
										665705,
										665710
									],
									[
										665727,
										665732
									],
									[
										665763,
										665768
									],
									[
										665826,
										665831
									],
									[
										665870,
										665875
									],
									[
										665890,
										665895
									],
									[
										665944,
										665949
									],
									[
										665988,
										665993
									],
									[
										666008,
										666013
									],
									[
										666086,
										666091
									],
									[
										666096,
										666101
									],
									[
										666140,
										666145
									],
									[
										666150,
										666155
									],
									[
										666211,
										666216
									],
									[
										666247,
										666252
									],
									[
										666288,
										666293
									],
									[
										666352,
										666357
									],
									[
										666633,
										666638
									],
									[
										666669,
										666674
									],
									[
										666681,
										666686
									],
									[
										666712,
										666717
									],
									[
										666764,
										666769
									],
									[
										666801,
										666806
									],
									[
										666825,
										666830
									],
									[
										666861,
										666866
									],
									[
										666893,
										666898
									],
									[
										666986,
										666991
									],
									[
										667077,
										667082
									],
									[
										667133,
										667138
									],
									[
										667158,
										667163
									],
									[
										667218,
										667223
									],
									[
										667271,
										667276
									],
									[
										667323,
										667328
									],
									[
										667376,
										667381
									],
									[
										667422,
										667427
									],
									[
										667535,
										667540
									],
									[
										667583,
										667588
									],
									[
										667616,
										667621
									],
									[
										667712,
										667717
									],
									[
										667813,
										667818
									],
									[
										668116,
										668121
									],
									[
										668295,
										668300
									],
									[
										668435,
										668440
									],
									[
										668559,
										668564
									],
									[
										668800,
										668805
									],
									[
										668935,
										668940
									],
									[
										669040,
										669045
									],
									[
										669101,
										669106
									],
									[
										669176,
										669181
									],
									[
										669347,
										669352
									],
									[
										669404,
										669409
									],
									[
										669451,
										669456
									],
									[
										669491,
										669496
									],
									[
										669581,
										669586
									],
									[
										669621,
										669626
									],
									[
										669657,
										669662
									],
									[
										669722,
										669727
									],
									[
										669785,
										669790
									],
									[
										669869,
										669874
									],
									[
										669909,
										669914
									],
									[
										670070,
										670075
									],
									[
										670218,
										670223
									],
									[
										670279,
										670284
									],
									[
										670390,
										670395
									],
									[
										670564,
										670569
									],
									[
										670725,
										670730
									],
									[
										670829,
										670834
									],
									[
										670856,
										670861
									],
									[
										670931,
										670936
									],
									[
										671035,
										671040
									],
									[
										671080,
										671085
									],
									[
										671157,
										671162
									],
									[
										671202,
										671207
									],
									[
										671259,
										671264
									],
									[
										671364,
										671369
									],
									[
										671409,
										671414
									],
									[
										671503,
										671508
									],
									[
										671544,
										671549
									],
									[
										671599,
										671604
									],
									[
										671640,
										671645
									],
									[
										671652,
										671657
									],
									[
										671739,
										671744
									],
									[
										671786,
										671791
									],
									[
										671798,
										671803
									],
									[
										671947,
										671952
									],
									[
										671985,
										671990
									],
									[
										672017,
										672022
									],
									[
										672048,
										672053
									],
									[
										672285,
										672290
									],
									[
										672378,
										672383
									],
									[
										672481,
										672486
									],
									[
										672589,
										672594
									],
									[
										672721,
										672726
									],
									[
										672851,
										672856
									],
									[
										672960,
										672965
									],
									[
										673034,
										673039
									],
									[
										673217,
										673222
									],
									[
										673284,
										673289
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								639076,
								639076
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"glslvalidator_configured": true,
							"glslvalidator_enabled": 1,
							"line_numbers": false,
							"output_tag": 2,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 186805.0,
						"zoom_level": 1.0
					},
					"stack_index": 25,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "imgui/imgui_impl_sdl_gl3.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16921,
						"regions":
						{
						},
						"selection":
						[
							[
								4511,
								4528
							]
						],
						"settings":
						{
							"glslvalidator_configured": true,
							"glslvalidator_enabled": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1088.0,
						"zoom_level": 1.0
					},
					"stack_index": 23,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "geometry.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 152,
						"regions":
						{
						},
						"selection":
						[
							[
								99,
								99
							]
						],
						"settings":
						{
							"auto_name": "",
							"glslvalidator_configured": true,
							"glslvalidator_enabled": 1,
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 29,
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "game.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 361,
						"regions":
						{
						},
						"selection":
						[
							[
								284,
								284
							]
						],
						"settings":
						{
							"glslvalidator_configured": true,
							"glslvalidator_enabled": 1,
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 25,
					"file": "imgui/imgui.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 435673,
						"regions":
						{
						},
						"selection":
						[
							[
								258697,
								258697
							]
						],
						"settings":
						{
							"glslvalidator_configured": true,
							"glslvalidator_enabled": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 102511.0,
						"zoom_level": 1.0
					},
					"stack_index": 31,
					"type": "text"
				},
				{
					"buffer": 26,
					"file": "imgui/imgui.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 124576,
						"regions":
						{
						},
						"selection":
						[
							[
								27100,
								27157
							]
						],
						"settings":
						{
							"glslvalidator_configured": true,
							"glslvalidator_enabled": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 36.0,
						"translation.y": 4267.0,
						"zoom_level": 1.0
					},
					"stack_index": 30,
					"type": "text"
				},
				{
					"buffer": 27,
					"file": "fall.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 437,
						"regions":
						{
						},
						"selection":
						[
							[
								135,
								135
							]
						],
						"settings":
						{
							"glslvalidator_configured": true,
							"glslvalidator_enabled": 1,
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 28,
					"file": "build.bat",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 822,
						"regions":
						{
						},
						"selection":
						[
							[
								499,
								499
							]
						],
						"settings":
						{
							"glslvalidator_configured": true,
							"glslvalidator_enabled": 1,
							"syntax": "Packages/Batch File/Batch File.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 29,
					"file": "imgui_extensions.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 118,
						"regions":
						{
						},
						"selection":
						[
							[
								84,
								84
							]
						],
						"settings":
						{
							"glslvalidator_configured": true,
							"glslvalidator_enabled": 1,
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 26,
					"type": "text"
				},
				{
					"buffer": 30,
					"file": "imgui_extensions.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 181,
						"regions":
						{
						},
						"selection":
						[
							[
								75,
								75
							]
						],
						"settings":
						{
							"glslvalidator_configured": true,
							"glslvalidator_enabled": 1,
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 27,
					"type": "text"
				},
				{
					"buffer": 31,
					"file": "platform.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7175,
						"regions":
						{
						},
						"selection":
						[
							[
								3884,
								3892
							]
						],
						"settings":
						{
							"glslvalidator_configured": true,
							"glslvalidator_enabled": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2288.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 28.0
	},
	"input":
	{
		"height": 34.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 387.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "fall.sublime-project",
	"replace":
	{
		"height": 52.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"asset_manager.cpp"
			],
			[
				"ass",
				"assets.h"
			],
			[
				"assetma",
				"asset_manager.cpp"
			],
			[
				"assetm",
				"asset_manager.h"
			],
			[
				"asset_pa",
				"asset_packager.cpp"
			],
			[
				"pla",
				"platform.h"
			],
			[
				"fall",
				"fall.cpp"
			],
			[
				"asset",
				"asset_packager.h"
			],
			[
				"ga",
				"game.cpp"
			],
			[
				"render",
				"render_commands.cpp"
			],
			[
				"assetpac",
				"packager\\asset_packager.h"
			],
			[
				"gam",
				"game.cpp"
			],
			[
				"stb_re",
				"packager\\stb_rect_pack.h"
			],
			[
				"sdl_",
				"sdl_platform.cpp"
			],
			[
				"game",
				"game.h"
			],
			[
				"rendercom",
				"render_commands.h"
			],
			[
				"te",
				"shaders\\textured_quads.glsl"
			],
			[
				"comm",
				"shaders\\common.glsl"
			],
			[
				"imgu",
				"imgui\\imgui_impl_sdl_gl3.cpp"
			],
			[
				"rende",
				"renderer_opengl.cpp"
			],
			[
				"debug",
				"debug.h"
			],
			[
				"imgui",
				"imgui\\imgui_impl_sdl_gl3.cpp"
			],
			[
				"ren",
				"render_commands.h"
			],
			[
				"re",
				"render_commands.h"
			],
			[
				"opengl",
				"renderer_opengl.cpp"
			],
			[
				"sdl_pl",
				"sdl_platform.cpp"
			],
			[
				"open",
				"renderer_opengl.h"
			],
			[
				"rend",
				"render_commands.h"
			],
			[
				"bui",
				"build.bat"
			],
			[
				"sdl",
				"sdl_platform.cpp"
			],
			[
				"renderer",
				"renderer_opengl.cpp"
			],
			[
				"sdlpl",
				"sdl_platform.cpp"
			],
			[
				"pl",
				"platform.h"
			],
			[
				"fal",
				"fall.cpp"
			],
			[
				"fall.su",
				"fall.sublime-project"
			],
			[
				"sd",
				"sdl_platform.cpp"
			],
			[
				"fa",
				"fall.cpp"
			],
			[
				"imguiim",
				"imgui\\imgui_impl_sdl_gl3.cpp"
			],
			[
				"sdl_p",
				"sdl_platform.cpp"
			],
			[
				"imguiex",
				"imgui_extensions.h"
			],
			[
				"plato",
				"sdl_platform.cpp"
			],
			[
				"game.h",
				"game.h"
			],
			[
				"plat",
				"platform.h"
			],
			[
				"option",
				"options.js"
			],
			[
				"opti",
				"options.html"
			],
			[
				"ma",
				"manifest.json"
			],
			[
				"browser_panelui",
				"browser\\components\\customizableui\\test\\browser_panelUINotifications.js"
			],
			[
				"testconsta",
				"browser\\components\\appUpdate\\test\\testConstants.js"
			],
			[
				"downloadscom",
				"browser\\components\\downloads\\DownloadsCommon.jsm"
			],
			[
				"indicato",
				"browser\\components\\downloads\\content\\indicator.js"
			],
			[
				"test_ui",
				"services\\sync\\tests\\unit\\test_uistate.js"
			],
			[
				"uistate",
				"services\\sync\\modules\\UIState.jsm"
			],
			[
				"browser_syn",
				"browser\\base\\content\\test\\sync\\browser_sync.js"
			],
			[
				"uistat",
				"services\\sync\\modules\\UIState.jsm"
			],
			[
				"appmenu",
				"toolkit\\modules\\AppMenuNotifications.jsm"
			],
			[
				"browser-s",
				"browser\\base\\content\\browser-sync.js"
			],
			[
				"appuphead.js",
				"browser\\components\\appUpdate\\test\\head.js"
			],
			[
				"panelui",
				"browser\\components\\customizableui\\content\\panelUI.js"
			],
			[
				"panelui.j",
				"browser\\components\\customizableui\\content\\panelUI.js"
			],
			[
				"browser-sy",
				"browser\\base\\content\\browser-sync.js"
			],
			[
				"browser-add",
				"browser\\base\\content\\browser-addons.js"
			],
			[
				"test_sideload",
				"browser\\base\\content\\test\\webextensions\\browser_extension_sideloading.js"
			],
			[
				"browser-addon",
				"browser\\base\\content\\browser-addons.js"
			],
			[
				"extensionsui",
				"browser\\modules\\ExtensionsUI.jsm"
			],
			[
				"head",
				"addon-sdk\\test\\head.js"
			],
			[
				"updatesback",
				"browser\\base\\content\\test\\appUpdate\\browser_updatesBackgroundWindowFailures.js"
			],
			[
				"appmenun",
				"browser\\components\\customizableui\\AppMenuNotifications.jsm"
			],
			[
				"updateli",
				"browser\\components\\appUpdate\\UpdateListener.jsm"
			],
			[
				"updatelis",
				"browser\\components\\appUpdate\\UpdateListener.jsm"
			],
			[
				"loginmanagerparent",
				"toolkit\\components\\passwordmgr\\LoginManagerParent.jsm"
			],
			[
				"browser.js",
				"browser\\base\\content\\browser.js"
			],
			[
				"loginmanapar",
				"toolkit\\components\\passwordmgr\\LoginManagerParent.jsm"
			],
			[
				"browser",
				"browser\\base\\content\\browser.js"
			],
			[
				"test_01",
				"toolkit\\mozapps\\update\\tests\\chrome\\test_0161_check_unsupported.xul"
			],
			[
				"appupdahea",
				"browser\\base\\content\\test\\appUpdate\\head.js"
			],
			[
				"updatesba",
				"browser\\base\\content\\test\\appUpdate\\browser_updatesBasicPromptNoStaging.js"
			],
			[
				"nsbrowse",
				"browser\\components\\nsBrowserGlue.js"
			],
			[
				"nsbrows",
				"browser\\components\\nsBrowserGlue.js"
			],
			[
				"appup",
				"browser\\base\\content\\test\\appUpdate\\head.js"
			],
			[
				"paneluinoti",
				"browser\\components\\customizableui\\test\\browser_panelUINotifications.js"
			],
			[
				"panelui.",
				"browser\\components\\customizableui\\content\\panelUI.js"
			],
			[
				"nsbrowserg",
				"browser\\components\\nsBrowserGlue.js"
			],
			[
				"appmenuno",
				"browser\\components\\customizableui\\AppMenuNotifications.jsm"
			],
			[
				"browser_pa",
				"browser\\components\\customizableui\\test\\browser_panelUINotifications.js"
			],
			[
				"panelu",
				"browser\\components\\customizableui\\content\\panelUI.js"
			],
			[
				"browser-",
				"browser\\base\\content\\browser-addons.js"
			],
			[
				"browser-syn",
				"browser\\base\\content\\browser-sync.js"
			],
			[
				"browser-addo",
				"browser\\base\\content\\browser-addons.js"
			],
			[
				"paneluino",
				"browser\\components\\customizableui\\test\\browser_panelUINotifications.js"
			],
			[
				"appupdate/hea",
				"browser\\base\\content\\test\\appUpdate\\head.js"
			],
			[
				"appupdate/",
				"browser\\components\\appUpdate\\moz.build"
			],
			[
				"selfsuppo",
				"browser\\modules\\SelfSupportBackend.jsm"
			],
			[
				"browser.",
				"browser\\base\\content\\browser.js"
			],
			[
				"testupdatewi",
				"testing\\firefox-ui\\tests\\puppeteer\\test_update_wizard.py"
			],
			[
				"nsupdates",
				"toolkit\\mozapps\\update\\nsUpdateService.js"
			],
			[
				"nsupdateser",
				"toolkit\\mozapps\\update\\nsUpdateService.js"
			],
			[
				"updatewiza",
				"testing\\firefox-ui\\tests\\puppeteer\\test_update_wizard.py"
			],
			[
				"noperms",
				"toolkit\\mozapps\\update\\tests\\chrome\\test_0172_notify_noPerms_manual.xul"
			],
			[
				"updatescant",
				"browser\\base\\content\\test\\appUpdate\\browser_updatesCantApply.js"
			],
			[
				"test_update_wi",
				"testing\\firefox-ui\\tests\\puppeteer\\test_update_wizard.py"
			],
			[
				"firefox.js",
				"browser\\app\\profile\\firefox.js"
			],
			[
				"panelui.inc",
				"browser\\themes\\shared\\customizableui\\panelUI.inc.css"
			],
			[
				"notifications.inc.",
				"browser\\themes\\shared\\notification-icons.inc.css"
			],
			[
				"compacttheme",
				"browser\\themes\\shared\\compacttheme.inc.css"
			],
			[
				"appupdatehead",
				"browser\\base\\content\\test\\appUpdate\\head.js"
			],
			[
				"notifyno",
				"toolkit\\mozapps\\update\\tests\\chrome\\test_0172_notify_noPerms_manual.xul"
			],
			[
				"updatesbasi",
				"browser\\base\\content\\test\\appUpdate\\browser_updatesBasicPrompt.js"
			],
			[
				"cantappl",
				"browser\\base\\content\\test\\appUpdate\\browser_updatesCantApply.js"
			],
			[
				"noper",
				"toolkit\\mozapps\\update\\tests\\chrome\\test_0171_check_noPerms_manual.xul"
			],
			[
				"notify_nop",
				"toolkit\\mozapps\\update\\tests\\chrome\\test_0172_notify_noPerms_manual.xul"
			],
			[
				"ext-comm",
				"browser\\components\\extensions\\ext-commands.js"
			],
			[
				"panelui.css",
				"browser\\themes\\shared\\customizableui\\panelUI.inc.css"
			],
			[
				"updatesnew",
				"browser\\base\\content\\test\\appUpdate\\browser_updatesNewWindow.js"
			],
			[
				"nsiupdate",
				"toolkit\\mozapps\\update\\nsIUpdateService.idl"
			],
			[
				"browser.dt",
				"browser\\locales\\en-US\\chrome\\browser\\browser.dtd"
			],
			[
				"nsupdat",
				"toolkit\\mozapps\\update\\nsUpdateService.js"
			],
			[
				"nsupdatese",
				"toolkit\\mozapps\\update\\nsUpdateService.js"
			],
			[
				"nsiupdates",
				"toolkit\\mozapps\\update\\nsIUpdateService.idl"
			],
			[
				"popupno",
				"toolkit\\modules\\PopupNotifications.jsm"
			],
			[
				"commands.json",
				"browser\\components\\extensions\\schemas\\commands.json"
			],
			[
				"ext-com",
				"browser\\components\\extensions\\ext-commands.js"
			],
			[
				"popupnoti",
				"browser\\base\\content\\test\\popupNotifications\\browser_popupNotification_5.js"
			],
			[
				"browser_updates",
				"browser\\base\\content\\test\\appUpdate\\browser_updatesBasicPrompt.js"
			],
			[
				"paneluinot",
				"browser\\components\\customizableui\\test\\browser_panelUINotifications.js"
			],
			[
				"panelui.xu",
				"browser\\components\\customizableui\\content\\panelUI.inc.xul"
			],
			[
				"browser.xu",
				"browser\\base\\content\\browser.xul"
			],
			[
				"ext_commands_",
				"browser\\components\\extensions\\test\\browser\\browser_ext_commands_onCommand.js"
			],
			[
				"browser_popupnot",
				"browser\\base\\content\\test\\popupNotifications\\browser_popupNotification_5.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"C:\\Users\\doug\\Documents\\github\\fall\\fall.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 354.0,
		"last_filter": "platformas",
		"selected_items":
		[
			[
				"platformas",
				"PlatformAsyncFileHandle"
			],
			[
				"pushtoar",
				"push_to_archive_mem"
			],
			[
				"archie",
				"ArchiveEntryHeader_texture_atlas"
			],
			[
				"debugrea",
				"DEBUG_PLATFORM_READ_ENTIRE_FILE"
			],
			[
				"opengl",
				"OpenGLState"
			],
			[
				"texture",
				"TexturedQuadVertex"
			],
			[
				"textured",
				"TexturedQuadVertex"
			],
			[
				"initre",
				"init_render_commands"
			],
			[
				"rendergrou",
				"RENDER_GROUP_H__"
			],
			[
				"Image",
				"Image"
			],
			[
				"text",
				"Text"
			],
			[
				"makeprofi",
				"makeProfileAvailableToTab"
			],
			[
				"scrollToSelectionGeneration",
				"scrollToSelectionGeneration"
			],
			[
				"openUiL",
				"openUILinkIn"
			],
			[
				"up_che",
				"UP_checkForUpdates"
			],
			[
				"waitforwindowfo",
				"waitForWindowFocus"
			],
			[
				"ensurewindowis",
				"ensureWindowIsFocused"
			],
			[
				"ensurewindowisfo",
				"ensureWindowIsFocused"
			],
			[
				"dumpsymb",
				"DumpSymbols"
			],
			[
				"platformrea",
				"platform_read_entire_file"
			],
			[
				"getroa",
				"get_rotation_matrix"
			],
			[
				"getContentTypeForMIMEType",
				"GetContentTypeForMIMEType"
			],
			[
				"getcontenttypeformim",
				"GetContentTypeForMIMEType"
			],
			[
				"getContentTypeFor",
				"getContentTypeForMIMEType"
			],
			[
				"getContentTypeForM",
				"getContentTypeForMIMEType"
			],
			[
				"forcecc",
				"ForceCC"
			],
			[
				"getWeakRefe",
				"GetWeakReference"
			],
			[
				"plugins",
				"Plugins"
			],
			[
				"nsIDocum",
				"nsIDocument"
			],
			[
				"translationnodeli",
				"nsTranslationNodeList"
			],
			[
				"neuteredwindowre",
				"NeuteredWindowRegion"
			],
			[
				"CallWindowP",
				"CallWindowProcedureHook"
			]
		],
		"width": 478.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 472.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
